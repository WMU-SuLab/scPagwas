assay="RNA",
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
nfeatures =NULL,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld)
##------ Thu Apr 28 19:57:20 2022 ------##
##------ Thu Apr 28 19:57:21 2022 ------##
##------ Thu Apr 28 19:57:29 2022 ------##
##------ Thu Apr 28 19:57:29 2022 ------##
##------ Thu Apr 28 19:57:30 2022 ------##
##------ Thu Apr 28 19:57:31 2022 ------##
##------ Thu Apr 28 19:58:00 2022 ------##
devtools::load_all(".")
data(Genes_by_pathway_kegg)
#gene annotation files.
data(block_annotation)
#LD data
data(chrom_ld)
Pagwas = NULL
gwas_data = system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas")
add_eqtls="OnlyTSS"
Single_data = system.file("extdata", "scRNAexample.rds", package = "scPagwas")
Pathway_list=Genes_by_pathway_kegg
marg=10000
split_n=1
maf_filter = 0.01
nfeatures =NULL
min_clustercells=10
min.pathway.size=5
max.pathway.size=300
n.cores=1
param.file=T
log.file='scPagwas.run.log'
Pagwas <- list();
class(Pagwas) <- 'Pagwas'
Single_data=readRDS(Single_data)
Pagwas <- Single_data_input(Pagwas=Pagwas,
nfeatures =nfeatures,
Single_data=Single_data,
Pathway_list=Genes_by_pathway_kegg,
min_clustercells=min_clustercells)
# rm(Single_data)
Pagwas <- Pathway_pcascore_run(Pagwas=Pagwas,n.cores=n.cores,
Pathway_list=Genes_by_pathway_kegg,
min.pathway.size=min.pathway.size,
max.pathway.size=max.pathway.size
)
suppressMessages(gwas_data <- bigreadr::fread2(gwas_data))
Pagwas <- GWAS_summary_input(Pagwas=Pagwas,
gwas_data=gwas_data,
maf_filter=maf_filter)
snp_gene_df<-Snp2Gene(snp=Pagwas$gwas_data,refGene=block_annotation,marg=marg)
snp_gene_df$slope <- rep(1,nrow(snp_gene_df))
Pagwas$snp_gene_df<- snp_gene_df[snp_gene_df$Disstance=="0",]
Pagwas <- Pathway_annotation_input(Pagwas=Pagwas,
block_annotation=block_annotation,
n.cores=n.cores)
Pagwas <- Link_pathway_blocks_gwas(Pagwas=Pagwas,
chrom_ld=chrom_ld,
n.cores=n.cores)
Pagwas <- link_scCell_pwpca_block(Pagwas=Pagwas,
n.cores = 1,
remove_outlier=T)
Pagwas <- link_scCell_pwpca_block(Pagwas=Pagwas,
n.cores = 1,
remove_outlier=T)
if (dim(Pagwas$data_mat)[2] != dim(Pagwas$pca_scCell_mat)[2]) {
stop("* please check the colnames of Singlecell data.There may have specific symbol")
}
paths <- colnames(Pagwas$Pathway_sclm_results)
ncells<- nrow(Pagwas$Pathway_sclm_results)
message("* Get pathways mean expression in single cell")
Pathway_sc_results <- Pagwas$Pathway_sclm_results * t(Pagwas$pca_scCell_mat[paths, ])
rownames(Pathway_sc_results)<-colnames(Pagwas$pca_scCell_mat)
Pathway_sc_results<-data.matrix(Pathway_sc_results)
message("* Get rankPvalue for each single cell")
CellsrankPvalue<-rankPvalue(Pathway_sc_results, columnweights = NULL,
na.last = "keep", ties.method = "average",
calculateQvalue = F, pValueMethod = "rank")
Pagwas$CellsrankPvalue <- CellsrankPvalue$pValueHigh
names(Pagwas$CellsrankPvalue)<-rownames(Pathway_sc_results)
message("* Get Pathways'rankPvalue for each celltypes!")
cl<-unique((Pagwas$Celltype_anno$annotation))
Pathways_rankPvalue<-lapply(cl, function(ss){
tt<-Pagwas$Celltype_anno$annotation==ss
PathwayrankPvalue<-rankPvalue(t(Pathway_sc_results[tt,]), columnweights = NULL, na.last = "keep", ties.method = "average", calculateQvalue = F, pValueMethod = "rank")
return(PathwayrankPvalue$pValueHigh)
})
#Pathways_rankPvalue <- as.data.frame(Pathways_rankPvalue)
Pagwas$Pathways_rankPvalue <- Reduce(function(dtf1, dtf2) cbind(dtf1, dtf2),Pathways_rankPvalue)
colnames(Pagwas$Pathways_rankPvalue)<-cl
rownames(Pagwas$Pathways_rankPvalue)<-colnames(Pagwas$Pathway_sclm_results)
message("* Get scPgwas score for each single cell")
scs <- rowSums(Pathway_sc_results)
#rm(pa_exp_mat)
df <- data.frame(cellid = colnames(Pagwas$pca_scCell_mat), scPagwas_score = sign(scs) * log10(abs(scs) + 0.0001))
rownames(df) <- df$cellid
#rm(pca_scCell_mat)
gc()
if (remove_outlier) {
scPagwas_score <- scPagwas_score_filter(scPagwas_score = df$scPagwas_score)
}
names(scPagwas_score)<-df$cellid
Pagwas$scPagwas_score<-scPagwas_score
message("* Get rankPvalue for each celltypes!")
cl<-unique((Pagwas$Celltype_anno$annotation))
Pathways_celltype<-lapply(cl, function(ss){
tt<-Pagwas$Celltype_anno$annotation==ss
x<-colMeans(Pathway_sc_results[tt,])
return(x)
})
Pathways_celltype<-as.data.frame(Pathways_celltype)
colnames(Pathways_celltype)<-cl
Pagwas$celltypes_rankpvalue<-rankPvalue(t(Pathways_celltype), columnweights = NULL,
na.last = "keep", ties.method = "average",
calculateQvalue = F,
pValueMethod = "rank")
Pagwas <- link_scCell_pwpca_block(Pagwas=Pagwas,
n.cores = 1,
remove_outlier=T)
link_scCell_pwpca_block <- function(Pagwas,
n.cores = 1,
remove_outlier=T) {
#if (is.null(Pagwas$Pathway_ld_gwas_data)) {
#  message("* no loaded Pathway_ld_gwas data")
#  return(Pagwas)
#}
#if (dim(Pagwas$data_mat)[2] != dim(Pagwas$pca_scCell_mat)[2]) {
#  stop("* please check the colnames of Singlecell data.There may have specific symbol")
#}
paths <- colnames(Pagwas$Pathway_sclm_results)
ncells<- nrow(Pagwas$Pathway_sclm_results)
message("* Get pathways mean expression in single cell")
Pathway_sc_results <- Pagwas$Pathway_sclm_results * t(Pagwas$pca_scCell_mat[paths, ])
rownames(Pathway_sc_results)<-colnames(Pagwas$pca_scCell_mat)
Pathway_sc_results<-data.matrix(Pathway_sc_results)
message("* Get rankPvalue for each single cell")
CellsrankPvalue<-rankPvalue(Pathway_sc_results, columnweights = NULL,
na.last = "keep", ties.method = "average",
calculateQvalue = F, pValueMethod = "rank")
Pagwas$CellsrankPvalue <- CellsrankPvalue$pValueHigh
names(Pagwas$CellsrankPvalue)<-rownames(Pathway_sc_results)
message("* Get Pathways'rankPvalue for each celltypes!")
cl<-unique((Pagwas$Celltype_anno$annotation))
Pathways_rankPvalue<-lapply(cl, function(ss){
tt<-Pagwas$Celltype_anno$annotation==ss
PathwayrankPvalue<-rankPvalue(t(Pathway_sc_results[tt,]), columnweights = NULL, na.last = "keep", ties.method = "average", calculateQvalue = F, pValueMethod = "rank")
return(PathwayrankPvalue$pValueHigh)
})
#Pathways_rankPvalue <- as.data.frame(Pathways_rankPvalue)
Pagwas$Pathways_rankPvalue <- Reduce(function(dtf1, dtf2) cbind(dtf1, dtf2),Pathways_rankPvalue)
colnames(Pagwas$Pathways_rankPvalue)<-cl
rownames(Pagwas$Pathways_rankPvalue)<-colnames(Pagwas$Pathway_sclm_results)
message("* Get scPgwas score for each single cell")
scs <- rowSums(Pathway_sc_results)
#rm(pa_exp_mat)
df <- data.frame(cellid = colnames(Pagwas$pca_scCell_mat), scPagwas_score = sign(scs) * log10(abs(scs) + 0.0001))
rownames(df) <- df$cellid
#rm(pca_scCell_mat)
gc()
if (remove_outlier) {
scPagwas_score <- scPagwas_score_filter(scPagwas_score = df$scPagwas_score)
}
names(scPagwas_score)<-df$cellid
Pagwas$scPagwas_score<-scPagwas_score
message("* Get rankPvalue for each celltypes!")
cl<-unique((Pagwas$Celltype_anno$annotation))
Pathways_celltype<-lapply(cl, function(ss){
tt<-Pagwas$Celltype_anno$annotation==ss
x<-colMeans(Pathway_sc_results[tt,])
return(x)
})
Pathways_celltype<-as.data.frame(Pathways_celltype)
colnames(Pathways_celltype)<-cl
Pagwas$celltypes_rankpvalue<-rankPvalue(t(Pathways_celltype), columnweights = NULL,
na.last = "keep", ties.method = "average",
calculateQvalue = F,
pValueMethod = "rank")
return(Pagwas)
}
Pathway_singlecell_rankp<- function(Pagwas,
n.cores = 1,
remove_outlier=T) {
#if (is.null(Pagwas$Pathway_ld_gwas_data)) {
#  message("* no loaded Pathway_ld_gwas data")
#  return(Pagwas)
#}
#if (dim(Pagwas$data_mat)[2] != dim(Pagwas$pca_scCell_mat)[2]) {
#  stop("* please check the colnames of Singlecell data.There may have specific symbol")
#}
paths <- colnames(Pagwas$Pathway_sclm_results)
ncells<- nrow(Pagwas$Pathway_sclm_results)
message("* Get pathways mean expression in single cell")
Pathway_sc_results <- Pagwas$Pathway_sclm_results * t(Pagwas$pca_scCell_mat[paths, ])
rownames(Pathway_sc_results)<-colnames(Pagwas$pca_scCell_mat)
Pathway_sc_results<-data.matrix(Pathway_sc_results)
message("* Get rankPvalue for each single cell")
CellsrankPvalue<-rankPvalue(Pathway_sc_results, columnweights = NULL,
na.last = "keep", ties.method = "average",
calculateQvalue = F, pValueMethod = "rank")
Pagwas$CellsrankPvalue <- CellsrankPvalue$pValueHigh
names(Pagwas$CellsrankPvalue)<-rownames(Pathway_sc_results)
message("* Get Pathways'rankPvalue for each celltypes!")
cl<-unique((Pagwas$Celltype_anno$annotation))
Pathways_rankPvalue<-lapply(cl, function(ss){
tt<-Pagwas$Celltype_anno$annotation==ss
PathwayrankPvalue<-rankPvalue(t(Pathway_sc_results[tt,]), columnweights = NULL, na.last = "keep", ties.method = "average", calculateQvalue = F, pValueMethod = "rank")
return(PathwayrankPvalue$pValueHigh)
})
#Pathways_rankPvalue <- as.data.frame(Pathways_rankPvalue)
Pagwas$Pathways_rankPvalue <- Reduce(function(dtf1, dtf2) cbind(dtf1, dtf2),Pathways_rankPvalue)
colnames(Pagwas$Pathways_rankPvalue)<-cl
rownames(Pagwas$Pathways_rankPvalue)<-colnames(Pagwas$Pathway_sclm_results)
message("* Get scPgwas score for each single cell")
scs <- rowSums(Pathway_sc_results)
#rm(pa_exp_mat)
df <- data.frame(cellid = colnames(Pagwas$pca_scCell_mat), scPagwas_score = sign(scs) * log10(abs(scs) + 0.0001))
rownames(df) <- df$cellid
#rm(pca_scCell_mat)
gc()
if (remove_outlier) {
scPagwas_score <- scPagwas_score_filter(scPagwas_score = df$scPagwas_score)
}
names(scPagwas_score)<-df$cellid
Pagwas$scPagwas_score<-scPagwas_score
message("* Get rankPvalue for each celltypes!")
cl<-unique((Pagwas$Celltype_anno$annotation))
Pathways_celltype<-lapply(cl, function(ss){
tt<-Pagwas$Celltype_anno$annotation==ss
x<-colMeans(Pathway_sc_results[tt,])
return(x)
})
Pathways_celltype<-as.data.frame(Pathways_celltype)
colnames(Pathways_celltype)<-cl
Pagwas$celltypes_rankpvalue<-rankPvalue(t(Pathways_celltype), columnweights = NULL,
na.last = "keep", ties.method = "average",
calculateQvalue = F,
pValueMethod = "rank")
return(Pagwas)
}
Pathway_singlecell_rankp<- function(Pagwas,
n.cores = 1,
remove_outlier=T) {
#if (is.null(Pagwas$Pathway_ld_gwas_data)) {
#  message("* no loaded Pathway_ld_gwas data")
#  return(Pagwas)
#}
#if (dim(Pagwas$data_mat)[2] != dim(Pagwas$pca_scCell_mat)[2]) {
#  stop("* please check the colnames of Singlecell data.There may have specific symbol")
#}
paths <- colnames(Pagwas$Pathway_sclm_results)
ncells<- nrow(Pagwas$Pathway_sclm_results)
message("* Get pathways mean expression in single cell")
Pathway_sc_results <- Pagwas$Pathway_sclm_results * t(Pagwas$pca_scCell_mat[paths, ])
rownames(Pathway_sc_results)<-colnames(Pagwas$pca_scCell_mat)
Pathway_sc_results<-data.matrix(Pathway_sc_results)
message("* Get rankPvalue for each single cell")
CellsrankPvalue<-rankPvalue(Pathway_sc_results, columnweights = NULL,
na.last = "keep", ties.method = "average",
calculateQvalue = F, pValueMethod = "rank")
Pagwas$CellsrankPvalue <- CellsrankPvalue$pValueHigh
names(Pagwas$CellsrankPvalue)<-rownames(Pathway_sc_results)
message("* Get Pathways'rankPvalue for each celltypes!")
cl<-unique((Pagwas$Celltype_anno$annotation))
Pathways_rankPvalue<-lapply(cl, function(ss){
tt<-Pagwas$Celltype_anno$annotation==ss
PathwayrankPvalue<-rankPvalue(t(Pathway_sc_results[tt,]), columnweights = NULL, na.last = "keep", ties.method = "average", calculateQvalue = F, pValueMethod = "rank")
return(PathwayrankPvalue$pValueHigh)
})
#Pathways_rankPvalue <- as.data.frame(Pathways_rankPvalue)
Pagwas$Pathways_rankPvalue <- Reduce(function(dtf1, dtf2) cbind(dtf1, dtf2),Pathways_rankPvalue)
colnames(Pagwas$Pathways_rankPvalue)<-cl
rownames(Pagwas$Pathways_rankPvalue)<-colnames(Pagwas$Pathway_sclm_results)
message("* Get scPgwas score for each single cell")
scs <- rowSums(Pathway_sc_results)
#rm(pa_exp_mat)
df <- data.frame(cellid = colnames(Pagwas$pca_scCell_mat), scPagwas_score = sign(scs) * log10(abs(scs) + 0.0001))
rownames(df) <- df$cellid
#rm(pca_scCell_mat)
gc()
if (remove_outlier) {
scPagwas_score <- scPagwas_score_filter(scPagwas_score = df$scPagwas_score)
}
names(scPagwas_score)<-df$cellid
Pagwas$scPagwas_score<-scPagwas_score
message("* Get rankPvalue for each celltypes!")
cl<-unique((Pagwas$Celltype_anno$annotation))
Pathways_celltype<-lapply(cl, function(ss){
tt<-Pagwas$Celltype_anno$annotation==ss
x<-colMeans(Pathway_sc_results[tt,])
return(x)
})
Pathways_celltype<-as.data.frame(Pathways_celltype)
colnames(Pathways_celltype)<-cl
Pagwas$celltypes_rankpvalue<-rankPvalue(t(Pathways_celltype), columnweights = NULL,
na.last = "keep", ties.method = "average",
calculateQvalue = F,
pValueMethod = "rank")
return(Pagwas)
}
Pagwas <- Pathway_singlecell_rankp(Pagwas=Pagwas,
n.cores = 1,
remove_outlier=T)
Pathway_singlecell_rankp<- function(Pagwas,
n.cores = 1,
remove_outlier=T) {
#if (is.null(Pagwas$Pathway_ld_gwas_data)) {
#  message("* no loaded Pathway_ld_gwas data")
#  return(Pagwas)
#}
if (dim(Pagwas$data_mat)[2] != dim(Pagwas$pca_scCell_mat)[2]) {
stop("* please check the colnames of Singlecell data.There may have specific symbol")
}
paths <- colnames(Pagwas$Pathway_sclm_results)
ncells<- nrow(Pagwas$Pathway_sclm_results)
message("* Get pathways mean expression in single cell")
Pathway_sc_results <- Pagwas$Pathway_sclm_results * t(Pagwas$pca_scCell_mat[paths, ])
rownames(Pathway_sc_results)<-colnames(Pagwas$pca_scCell_mat)
Pathway_sc_results<-data.matrix(Pathway_sc_results)
message("* Get rankPvalue for each single cell")
CellsrankPvalue<-rankPvalue(Pathway_sc_results, columnweights = NULL,
na.last = "keep", ties.method = "average",
calculateQvalue = F, pValueMethod = "rank")
Pagwas$CellsrankPvalue <- CellsrankPvalue$pValueHigh
names(Pagwas$CellsrankPvalue)<-rownames(Pathway_sc_results)
message("* Get Pathways'rankPvalue for each celltypes!")
cl<-unique((Pagwas$Celltype_anno$annotation))
Pathways_rankPvalue<-lapply(cl, function(ss){
tt<-Pagwas$Celltype_anno$annotation==ss
PathwayrankPvalue<-rankPvalue(t(Pathway_sc_results[tt,]), columnweights = NULL, na.last = "keep", ties.method = "average", calculateQvalue = F, pValueMethod = "rank")
return(PathwayrankPvalue$pValueHigh)
})
#Pathways_rankPvalue <- as.data.frame(Pathways_rankPvalue)
Pagwas$Pathways_rankPvalue <- Reduce(function(dtf1, dtf2) cbind(dtf1, dtf2),Pathways_rankPvalue)
colnames(Pagwas$Pathways_rankPvalue)<-cl
rownames(Pagwas$Pathways_rankPvalue)<-colnames(Pagwas$Pathway_sclm_results)
message("* Get scPgwas score for each single cell")
scs <- rowSums(Pathway_sc_results)
#rm(pa_exp_mat)
df <- data.frame(cellid = colnames(Pagwas$pca_scCell_mat), scPagwas_score = sign(scs) * log10(abs(scs) + 0.0001))
rownames(df) <- df$cellid
#rm(pca_scCell_mat)
gc()
if (remove_outlier) {
scPagwas_score <- scPagwas_score_filter(scPagwas_score = df$scPagwas_score)
}
names(scPagwas_score)<-df$cellid
Pagwas$scPagwas_score<-scPagwas_score
message("* Get rankPvalue for each celltypes!")
cl<-unique((Pagwas$Celltype_anno$annotation))
Pathways_celltype<-lapply(cl, function(ss){
tt<-Pagwas$Celltype_anno$annotation==ss
x<-colMeans(Pathway_sc_results[tt,])
return(x)
})
Pathways_celltype<-as.data.frame(Pathways_celltype)
colnames(Pathways_celltype)<-cl
Pagwas$celltypes_rankpvalue<-rankPvalue(t(Pathways_celltype), columnweights = NULL,
na.last = "keep", ties.method = "average",
calculateQvalue = F,
pValueMethod = "rank")
return(Pagwas)
}
Pagwas <- Pathway_singlecell_rankp(Pagwas=Pagwas,
n.cores = 1,
remove_outlier=T)
devtools::document()
devtools::document()
devtools::document()
library(scPagwas)
library(scPagwas)
library(scPagwas)
library(ggplot2)
suppressMessages(library(Seurat))
suppressMessages(library("dplyr"))
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#gene annotation files.
data(block_annotation)
#LD data
data(chrom_ld)
#1.start to run the wrapper functions for preprogress.
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
output.prefix="test",
add_eqtls="OnlyTSS",
block_annotation = block_annotation,
assay="RNA",
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
nfeatures =NULL,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld)
##------ Thu Apr 28 20:16:21 2022 ------##
##------ Thu Apr 28 20:16:23 2022 ------##
##------ Thu Apr 28 20:16:31 2022 ------##
##------ Thu Apr 28 20:16:32 2022 ------##
##------ Thu Apr 28 20:16:32 2022 ------##
##------ Thu Apr 28 20:16:33 2022 ------##
##------ Thu Apr 28 20:17:02 2022 ------##
##------ Thu Apr 28 20:17:05 2022 ------##
names(Pagwas)
library(scPagwas)
library(ggplot2)
suppressMessages(library(Seurat))
suppressMessages(library("dplyr"))
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#gene annotation files.
data(block_annotation)
#LD data
data(chrom_ld)
#1.start to run the wrapper functions for preprogress.
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
output.prefix="test",
add_eqtls="OnlyTSS",
block_annotation = block_annotation,
assay="RNA",
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
nfeatures =NULL,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld)
##------ Thu Apr 28 20:22:01 2022 ------##
##------ Thu Apr 28 20:22:02 2022 ------##
##------ Thu Apr 28 20:22:13 2022 ------##
##------ Thu Apr 28 20:22:13 2022 ------##
##------ Thu Apr 28 20:22:14 2022 ------##
##------ Thu Apr 28 20:22:15 2022 ------##
##------ Thu Apr 28 20:22:37 2022 ------##
##------ Thu Apr 28 20:22:40 2022 ------##
names(Pagwas)
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
output.prefix="test",
add_eqtls="OnlyTSS",
block_annotation = block_annotation,
assay="RNA",
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
nfeatures =NULL,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
SimpleResult=T)
##------ Thu Apr 28 20:24:36 2022 ------##
##------ Thu Apr 28 20:24:37 2022 ------##
##------ Thu Apr 28 20:24:48 2022 ------##
##------ Thu Apr 28 20:24:48 2022 ------##
##------ Thu Apr 28 20:24:48 2022 ------##
##------ Thu Apr 28 20:24:49 2022 ------##
##------ Thu Apr 28 20:25:04 2022 ------##
##------ Thu Apr 28 20:25:06 2022 ------##
names(Pagwas)
Bootstrap_P_Barplot(p_results=Pagwas$celltypes_rankpvalue$pValueHigh,
p_names=rownames(Pagwas$celltypes_rankpvalue),
figurenames = NULL,
width = 5,
height = 7,
do_plot=T,
title = "Test scPagwas")
require("RColorBrewer")
require("Seurat")
require("SeuratObject")
require("ggsci")
#check the objects
#Single_data<-FindVariableFeatures(Single_data)
scRNAexample<-readRDS(system.file("extdata", "scRNAexample.rds", package = "scPagwas"))
scRNAexample <- suppressMessages(Seurat::RunPCA(object = scRNAexample, assay =  "SCT", npcs = npcs))
scRNAexample <- suppressMessages(Seurat::RunTSNE(object = scRNAexample, assay =  "SCT", reduction = "pca", dims = 1:50))
scRNAexample <- suppressMessages(Seurat::RunUMAP(object = scRNAexample, assay =  "SCT", reduction = "pca", dims = 1:50))
DimPlot(scRNAexample,group.by = "anno",pt.size=1,reduction="tsne",label = F, repel=TRUE)+
umap_theme()+ggtitle("Test")+labs(x="TSNE",y="")+theme(aspect.ratio=1)
scPagwas_Visualization(scPagwas_score = Pagwas$scPagwas_score,
scPagwas_p=Pagwas$CellsrankPvalue,
Single_data = scRNAexample,
p_thre = 0.01,
filename = NULL,
FigureType = "tsne",
width = 7,
height = 7,
lowColor = "#FEFBE7", highColor = "#FC4F4F",
size = 1,
title = "scPagwas_score",
do_plot = T)
library("RColorBrewer")
library("ggplot2")
#scPagwas_score <- Pagwas$scPagwas_score[intersect(colnames(scRNAexample),names(Pagwas$scPagwas_score))]
#scRNAexample$scPagwas_score <- scPagwas_score
#thre <- sort(scRNAexample$scPagwas_score, decreasing = T)[ncol(scRNAexample) * 0.1]
#scRNAexample$positiveCells<-rep(0,ncol(scRNAexample))
#scRNAexample$positiveCells[scRNAexample$scPagwas_score>=thre]<-1
scRNAexample$CellsrankPvalue<-Pagwas$CellsrankPvalue[colnames(scRNAexample)]
#thre <- sort(scRNAexample$scPagwas_score, decreasing = T)[ncol(scRNAexample) * 0.1]
scRNAexample$positiveCells<-rep(0,ncol(scRNAexample))
scRNAexample$positiveCells[scRNAexample$CellsrankPvalue <= 0.01]<-1
plot_bar_positie_nagtive(seurat_obj=scRNAexample,
var_ident="positiveCells",
var_group="anno",
vec_group_colors=NULL,
f_color=colorRampPalette(brewer.pal(n=10, name="RdYlBu")),
do_plot = T)
plot_bar_positie_nagtive(seurat_obj=scRNAexample,
var_ident="anno",
var_group="positiveCells",
vec_group_colors=c("#E8D0B3","#7EB5A6"),
do_plot = T)
top5genes<-rownames(Pagwas$gene_heritability_correlation)[order(Pagwas$gene_heritability_correlation,decreasing = T)[1:5]]
plot_vln_Corgenes(seurat_obj=scRNAexample,
assay="RNA", slot="data",
var_group="anno",
vec_features=top5genes,
vec_group_colors= pal_d3(alpha =0.5)(10),
do_plot = T
)
