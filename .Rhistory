" ******* 9th: scGet_gene_heritability_correlation function start! ********",
sep = ""
))
##------ Mon Nov 14 18:45:25 2022 ------##
tt <- Sys.time()
Pagwas <- scGet_gene_heritability_correlation(Pagwas = Pagwas)
scPagwas_topgenes <- names(Pagwas$gene_heritability_correlation[order(Pagwas$gene_heritability_correlation, decreasing = T), ])[1:n_topgenes]
message("done")
message("* Get scGene_rankP for each single cell")
CellScalepValue <- scGene_scaleP(
Single_mat = t(data.matrix(
GetAssayData(Single_data, assay = assay)[scPagwas_topgenes, ]
))
)
head(CellScalepValue)
Pagwas$scPagwas.TRS.Score <- Single_data$scPagwas.TRS.Score1
Single_data <- Seurat::AddModuleScore(Single_data,
assay = assay,
list(scPagwas_topgenes),
name = c("scPagwas.TRS.Score")
)
devtools::load_all(".")
Pagwas_singlecell<-scPagwas_main(Pagwas =NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
output.prefix="Test",
output.dirs="Test",
Pathway_list=Genes_by_pathway_kegg,
assay="RNA",
singlecell=T,
celltype=T,
block_annotation = block_annotation,
chrom_ld = chrom_ld)
##------ Mon Nov 14 18:47:42 2022 ------##
##------ Mon Nov 14 18:47:46 2022 ------##
##------ Mon Nov 14 18:48:03 2022 ------##
##------ Mon Nov 14 18:48:03 2022 ------##
##------ Mon Nov 14 18:48:04 2022 ------##
##------ Mon Nov 14 18:48:05 2022 ------##
##------ Mon Nov 14 18:51:59 2022 ------##
##------ Mon Nov 14 18:52:00 2022 ------##
##------ Mon Nov 14 18:52:04 2022 ------##
rownames(Pagwas$Celltype_anno)
head(CellScalepValue)
devtools::load_all(".")
Pagwas_singlecell<-scPagwas_main(Pagwas =NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
output.prefix="Test",
output.dirs="Test",
Pathway_list=Genes_by_pathway_kegg,
assay="RNA",
singlecell=T,
celltype=T,
block_annotation = block_annotation,
chrom_ld = chrom_ld)
##------ Mon Nov 14 18:55:02 2022 ------##
##------ Mon Nov 14 18:55:06 2022 ------##
##------ Mon Nov 14 18:55:26 2022 ------##
##------ Mon Nov 14 18:55:26 2022 ------##
##------ Mon Nov 14 18:55:26 2022 ------##
##------ Mon Nov 14 18:55:28 2022 ------##
##------ Mon Nov 14 18:59:26 2022 ------##
##------ Mon Nov 14 18:59:27 2022 ------##
##------ Mon Nov 14 18:59:30 2022 ------##
scPagwas_Visualization(Single_data=Pagwas_singlecell,
p_thre = 0.05,
FigureType = "umap",
width = 7,
height = 7,
lowColor = "white",
highColor = "red",
output.dirs="figure",
size = 0.5,
do_plot = T)
plot_bar_positie_nagtive(seurat_obj=Pagwas_singlecell,
var_ident="anno",
var_group="positiveCells",
vec_group_colors=c("#E8D0B3","#7EB5A6"),
do_plot = T)
plot_bar_positie_nagtive(seurat_obj=Pagwas_singlecell,
var_ident="positiveCells",
var_group="anno",
p_thre = 0.01,
vec_group_colors=NULL,
f_color=colorRampPalette(brewer.pal(n=10, name="RdYlBu")),
do_plot = T)
devtools::document()
library(scPagwas)
usethis::use_version()
library(parallel)
single_parallel <- function(func,cores,iterable,...){
#1.加载包
#library(parallel)
#2.计算计算机内核数
#cores <- detectCores(logical = FALSE)
#3.打开并行计算
cl <- makeCluster(cores)
#4.给每个单独内核传递变量，函数等
clusterExport(cl,deparse(substitute(func)))
#5.开始并行计算（用法与sapply类似）
result <- parSapply(cl,iterable,func,...)
#6.关闭并行计算
stopCluster(cl)
return(result)
}
Pagwas =NULL
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas")
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas")
output.prefix="Test"
output.dirs="Test"
Pathway_list=Genes_by_pathway_kegg
library(scPagwas)
Pagwas =NULL
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas")
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas")
output.prefix="Test"
output.dirs="Test"
Pathway_list=Genes_by_pathway_kegg
assay="RNA"
singlecell=T
celltype=F
block_annotation = block_annotation
chrom_ld = chrom_ld
assay = "RNA"
run_split=FALSE
marg = 10000
maf_filter = 0.01
min_clustercells = 10
min.pathway.size = 5
max.pathway.size = 300
iters = 200
n_topgenes = 1000
seurat_return = TRUE
remove_outlier = TRUE
if (!dir.exists(output.dirs)) {
dir.create(output.dirs)
}
## miximal file path lenght;
## Windows OS support max. 259 characters
Sys.setenv(R_LOCAL_CACHE = paste0("./", output.dirs, "/scPagwas_cache"))
tt <- Sys.time()
if (is.null(Pagwas)) {
Pagwas <- list()
} else if (class(Pagwas) == "Seurat" & is.null(Single_data)) {
Single_data <- Pagwas
Pagwas <- list()
Pagwas <- Single_data@misc
if ("scPagwasPaPca" %in% Seurat::Assays(Single_data)) {
Pagwas$pca_scCell_mat <- GetAssayData(Single_data,
assay = "scPagwasPaPca"
)
}
if (assay %in% Seurat::Assays(Single_data)) {
Pagwas$data_mat <- GetAssayData(Single_data, assay = assay)
} else {
stop("Error:assay is not in Pagwas!")
}
if (is.null(Pathway_list)) {
stop("Error:Pathway_list should be input!")
}
SOAR::Store(Single_data)
Pagwas$rawPathway_list <- Pathway_list
} else if (class(Pagwas) == "Seurat" & !is.null(Single_data)) {
message("Warning:Single_data and Pagwas seurat class are redundant!
we will keep the new Single_data and rerun the
Single_data_input and Pathway_pcascore_run function")
Pagwas <- list()
} else if (class(Pagwas) == "list" & is.null(Single_data) & singlecell) {
if("data_mat" %in% names(Pagwas) & run_split){
message("The single cell data are in the preprocessed pagwas list!")
}else{
stop("Error:Single_data should be input!")
}
} else if (class(Pagwas) == "list" & !is.null(Single_data)) {
Pagwas$rawPathway_list <- Pathway_list
} else if (class(Pagwas) != "list") {
stop("Error:The class for Pagwas is wrong! Should be NULL,
list or Seurat class.")
}
#############################
## 1.Single_data_input
#############################
message(paste(utils::timestamp(quiet = T),
" ******* 1st: Single_data_input function start! ********",
sep = ""
))
##------ Tue Nov 15 10:37:07 2022 ------##
tt <- Sys.time()
if (class(Single_data) == "character") {
if (grepl(".rds", Single_data)) {
message("** Start to read the single cell data!")
Single_data <- readRDS(Single_data)
} else {
stop("Error:There is need a data in `.rds` format ")
}
if (!assay %in% Seurat::Assays(Single_data)) {
stop("Error:There is no need assays in your Single_data")
}
} else if (class(Single_data) != "Seurat") {
if(run_split){
message("run_split is TRUE!")
}else{
stop("Error:When the run_split is FALSE! There is need a Seurat class for Single_data")
}
}
if (is.null(Pathway_list)) {
stop("Error:Pathway_list should be input!")
}
if(!("data_mat" %in% names(Pagwas))){
message("** Start to filter single cell data!")
Pagwas <- Single_data_input(
Pagwas = Pagwas,
assay = assay,
# nfeatures =nfeatures,
Single_data = Single_data,
Pathway_list = Pathway_list,
min_clustercells = min_clustercells
)
}
# save the Single_data
if(!run_split){
Single_data <- Single_data[, colnames(Pagwas$data_mat)]
SOAR::Store(Single_data)
}else{
if(!is.null(Single_data)){
Single_data <- Single_data[, colnames(Pagwas$data_mat)]
rm(Single_data)
}
r_n <- colnames(Pagwas$data_mat)
}
message("done!")
#############################
## 2.Pathway_pcascore_run
#############################
if (!("pca_cell_df" %in% names(Pagwas))) {
message(paste(utils::timestamp(quiet = T),
" ******* 2nd: Pathway_pcascore_run function start!! ********",
sep = ""
))
tt <- Sys.time()
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
message("done!")
}
##------ Tue Nov 15 10:37:12 2022 ------##
#############################
## 3.GWAS_summary_input
#############################
message(paste(utils::timestamp(quiet = T),
" ******* 3rd: GWAS_summary_input function start! ********",
sep = ""
))
##------ Tue Nov 15 10:37:29 2022 ------##
if (!is.null(gwas_data)) {
if (class(gwas_data) == "character") {
message("** Start to read the gwas_data!")
suppressMessages(gwas_data <- bigreadr::fread2(gwas_data))
} else {
stop("Error:There is need a filename and address for gwas_data")
}
if (maf_filter >= 1 & maf_filter < 0) {
stop("Error:maf_filter should between 0 and 1")
}
tt <- Sys.time()
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = maf_filter
)
rm(gwas_data)
message("done!")
message(paste(utils::timestamp(quiet = T),
" ******* 4th: SnpToGene start!! ********",
sep = ""
))
tt <- Sys.time()
if (!is.null(block_annotation)) {
Pagwas$snp_gene_df <- SnpToGene(
gwas_data = Pagwas$gwas_data,
block_annotation = block_annotation,
marg = marg
)
} else if (!("snp_gene_df" %in% names(Pagwas))) {
stop("Error: block_annotation should input!")
}
} else if (!("gwas_data" %in% names(Pagwas)) | !("snp_gene_df" %in%
names(Pagwas))) {
stop("Error: gwas_data should be input!")
}
##------ Tue Nov 15 10:37:32 2022 ------##
#############################
## 5.Pathway_annotation_input
#############################
message(paste(utils::timestamp(quiet = T),
" ******* 5th: Pathway_annotation_input function
start! ********",
sep = ""
))
##------ Tue Nov 15 10:37:32 2022 ------##
tt <- Sys.time()
if (!is.null(block_annotation)) {
Pagwas <- Pathway_annotation_input(
Pagwas = Pagwas,
block_annotation = block_annotation
)
} else if (!("snp_gene_df" %in% names(Pagwas))) {
stop("Error: block_annotation should input!")
}
message("done!")
#############################
## 6.Link_pathway_blocks_gwas
#############################
message(paste(utils::timestamp(quiet = T),
" ******* 6th: Link_pathway_blocks_gwas
function start! ********",
sep = ""
))
##------ Tue Nov 15 10:37:34 2022 ------##
options(bigmemory.allow.dimnames = TRUE)
pos <- NULL
Pachrom_block_list <- lapply(
Pagwas$pathway_blocks,
function(pa_blocks) {
split(pa_blocks,
f = as.vector(pa_blocks$chrom)
)
}
)
names(Pachrom_block_list) <- names(Pagwas$pathway_blocks)
Pagwas$pathway_blocks <- NULL
chrom_gwas_list <- lapply(split(Pagwas$gwas_data,
f = Pagwas$gwas_data$chrom
), function(gwas) {
gwas <- data.table::data.table(gwas)
data.table::setkey(gwas, pos)
return(gwas)
})
Pagwas$gwas_data <- NULL
Pathway_sclm_results <- list()
Pathway_ld_gwas_data <- list()
SNP_A <- NULL
message(paste0(
"* Start to link gwas and pathway block annotations for ",
length(Pachrom_block_list), " pathways!"
))
options(bigmemory.allow.dimnames = TRUE)
pb <- txtProgressBar(style = 3)
pathway <-names(Pachrom_block_list)[1]
pathway
Pa_chrom_block <- Pachrom_block_list[[pathway]]
Pa_chrom_data <- lapply(names(Pa_chrom_block), function(chrom) {
chrom_block <- Pa_chrom_block[[chrom]]
ld_data <- chrom_ld[[chrom]]
data.table::setkey(ld_data, SNP_A) # just in case
if (!(chrom %in% names(chrom_gwas_list))) {
warning(paste(chrom, " for gwas is missing, could be a problem!",
sep = ""
))
return(NULL)
}
if (is.null(chrom_gwas_list[[chrom]])) {
warning(paste(chrom, " data missing, could be a problem", sep = ""))
return(NULL)
}
rsids <- Pagwas$snp_gene_df[which(Pagwas$snp_gene_df$label %in%
chrom_block$label), c("rsid", "label")]
c2 <- chrom_gwas_list[[chrom]]
rsids_gwas <- suppressMessages(dplyr::inner_join(rsids, c2))
if (is.null(nrow(rsids_gwas))) {
return(NULL)
}
beta_squared <- rsids_gwas$beta^2
# again, pretty sure this is binarize data table lookup
sub_ld <- ld_data[.(as.vector(rsids_gwas$rsid)), nomatch = 0L]
return(list(rsids_gwas, beta_squared, sub_ld, chrom_block))
})
rm(Pa_chrom_block)
pa_block <- list()
pa_block$block_info <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[4]]
))
pa_block$snps <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[1]]
))
pa_block$y <- unlist(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[2]]
))
pa_block$ld_data <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[3]]
))
rsid_x <- intersect(pa_block$snps$rsid, unique(
unlist(pa_block$ld_data[, 1:2])
))
pa_block$ld_data <- as.data.frame(
pa_block$ld_data[pa_block$ld_data$SNP_A
%in% rsid_x & pa_block$ld_data$SNP_B
%in% rsid_x, ]
)
rm(Pa_chrom_data)
if (nrow(pa_block$ld_data) == 0) {
ld_matrix <- diag(1, nrow = nrow(pa_block$snps))
} else {
ld_matrix <- make_ld_matrix(
all_snps = pa_block$snps$rsid,
ld_data = pa_block$ld_data
)
}
pa_block$n_snps <- nrow(pa_block$snps)
pa_block$ld_matrix_squared <- ld_matrix * ld_matrix
pca_scCell_mat = Pagwas$pca_scCell_mat
data_mat = Pagwas$data_mat
rawPathway_list = Pagwas$rawPathway_list
snp_gene_df = Pagwas$snp_gene_df
pathway <- unique(pa_block$block_info$pathway)
x <- matrix(pca_scCell_mat[pathway, ], nrow = 1)
rownames(x) <- pathway
if (pa_block$n_snps == 0) {
pa_block$include_in_inference <- F
pa_block$x <- NULL # to make sure we totally replace previous stuffs
return(pa_block)
}
mg <- intersect(rawPathway_list[[pathway]], rownames(data_mat))
if (length(mg) == 1) {
x2 <- matrix(data_mat[mg, ], nrow = 1)
x2 <- x2 / (x2 + 0.0001)
rownames(x2) <- mg
} else {
x2 <- biganalytics::apply(data_mat[mg, ], 2, function(ge) {
if (sum(ge) == 0) {
return(rep(0, length(ge)))
} else {
return(ge / sum(ge))
}
})
rownames(x2) <- mg
}
if (pa_block$n_snps > 1) {
x2 <- x2[pa_block$snps$label, ]
pa_block$n_snps <- nrow(pa_block$snps)
x <- x[rep(1, pa_block$n_snps), ]
rownames(x) <- pa_block$snps$rsid
#x <- x * snp_gene_df[pa_block$snps$rsid, "slope"]
x2 <- x2 * x
} else {
x2 <- matrix(x2[pa_block$snps$label, ], nrow = 1)
rownames(x2) <- pa_block$snps$label
pa_block$n_snps <- nrow(pa_block$snps)
x <- matrix(x[rep(1, pa_block$n_snps), ], nrow = 1)
rownames(x) <- pa_block$snps$rsid
#x <- matrix(as.numeric(x) * as.numeric(
#  snp_gene_df[pa_block$snps$rsid, "slope"]
#), nrow = 1)
x2 <- matrix(as.numeric(x2) * as.numeric(x), nrow = 1)
#x2 <- as(x2, "dgCMatrix")
}
pa_block$x <- pa_block$ld_matrix_squared %*% x2 #, "dgCMatrix")
pa_block$include_in_inference <- T
noise_per_snp <- pa_block$snps$se**2
na_elements <- is.na(pa_block$y) | apply(pa_block$x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
Pagwas_x = pa_block$x[!na_elements, ]
Pagwas_y = pa_block$y[!na_elements]
noise_per_snp = noise_per_snp[!na_elements]
?stats::lm
class(Pagwas_x)
Pagwas_x<-as.data.frame(Pagwas_x)
lm_f<-function(x,y){
m<-stats::lm(y ~
offset(noise_per_snp) +
x)
parameters <- as.vector(stats::coef(m)[-1])
return(parameters)
}
single_parallel(lm_f,cores=5,iterable=Pagwas_x,y=Pagwas_y)
lm_f<-function(x,y,noise_per_snp=noise_per_snp){
m<-stats::lm(y ~
offset(noise_per_snp) +
x)
parameters <- as.vector(stats::coef(m)[-1])
return(parameters)
}
parameters_df<-single_parallel(lm_f,cores=5,iterable=Pagwas_x,y=Pagwas_y,noise_per_snp=noise_per_snp)
parameters_df
length(parameters_df)
head(Pagwas_x)
dim(Pagwas_x)
head(parameters_df)
system.time(
parameters_df<-single_parallel(lm_f,cores=10,iterable=Pagwas_x,y=Pagwas_y,noise_per_snp=noise_per_snp)
)
system.time(
parameters_df<-single_parallel(lm_f,cores=5,iterable=Pagwas_x,y=Pagwas_y,noise_per_snp=noise_per_snp)
)
system.time(
parameters_df <- biganalytics::apply(Pagwas_x, 2, function(ge) {
m <- stats::lm(Pagwas_y ~
offset(noise_per_snp) +
ge)
parameters <- as.vector(stats::coef(m)[-1])
return(parameters)
})
)
