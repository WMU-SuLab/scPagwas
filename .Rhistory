if (!is.null(chrom_ld)){
Pagwas <- Link_pathway_blocks_gwas(Pagwas=Pagwas,
chrom_ld=chrom_ld,
split_n=split_n,
singlecell=singlecell,
celltype=celltype,
ncores=ncores)
message('done!')
}
Pagwas$lm_results <- Pagwas_perform_regression(Pathway_ld_gwas_data=Pagwas$Pathway_ld_gwas_data)
Pagwas <- Boot_evaluate(Pagwas,bootstrap_iters = iters, part = 0.5)
Pagwas$bootstrap_results
Single_data
a<-readRDS(system.file("extdata", "scRNAexample.rds", package = "scPagwas"))
Idents(a)<- "1"
Single_data =a
## initialize log-file
cat('##', format(Sys.time()), '\n', file=log.file)
## miximal file path lenght;
## Windows OS support max. 259 characters
max.nchar.file.path <- 259
## arguments
#add_eqtls <- match.arg( add_eqtls)
#assay <- match.arg(assay)
if(param.file){
## save parameters used for ssGSEA
param.str = c(
paste('##', Sys.time()),
paste('input gwas data: ', gwas_data, sep='\t'),
paste('add_eqtls: ', add_eqtls, sep='\t'),
paste('eqtls_files: ', eqtls_files, sep='\t'),
#paste('Single_data: ', Single_data, sep='\t'),
paste('assay: ', assay, sep='\t'),
#paste('nfeatures: ', nfeatures, sep='\t'),
paste('Pathway length: ', length(Pathway_list),collapse = " ", sep='\t'),
paste('split_n: ', split_n, sep='\t'),
paste('marg: ', marg, sep='\t'),
paste('maf_filter: ', maf_filter, sep='\t'),
paste('min_clustercells: ', min_clustercells, sep='\t'),
paste('min.pathway.size: ', min.pathway.size, sep='\t'),
paste('max.pathway.size: ', max.pathway.size, sep='\t'),
paste('remove_outlier: ', remove_outlier, sep='\t'),
paste('iters: ', iters, sep='\t'),
paste('ncores: ', ncores, sep='\t')
)
writeLines(param.str, con=paste(output.prefix, 'parameters.txt', sep='_'))
}
#Sys.setenv(R_LOCAL_CACHE=Store_CACHE)
tt <- Sys.time()
if (is.null(Pagwas)) {
Pagwas <- list();
class(Pagwas) <- 'Pagwas'
}
message(paste(utils::timestamp(quiet = T), ' ******* 1st: Single_data_input function start! ********',sep = ''))
##------ Fri May 13 15:54:37 2022 ------##
if(!is.null(Single_data)){
if(class(Single_data)=="character"){
if(grepl(".rds",Single_data)){
message("** Start to read the single cell data!")
Single_data=readRDS(Single_data)
}else{
stop("There is need a data in `.rds` format ")
}
}
if(!assay %in% Assays(Single_data)){
stop("There is no need assays in your Single_data")
}
Pagwas <- Single_data_input(Pagwas=Pagwas,
assay=assay,
#nfeatures =nfeatures,
Single_data=Single_data,
Pathway_list=Pathway_list,
min_clustercells=min_clustercells)
rm(Single_data)
#message(ncol(Pagwas$Single_data)," cells are remain!" )
message('done!')
}
cat('Single_data import: ',  file=log.file, append=T)
cat(Sys.time()-tt, '\n',  file=log.file, append=T)
#3.calculated pca score
message(paste(utils::timestamp(quiet = T), ' ******* 2nd: Pathway_pcascore_run function start!! ********',sep = ''))
##------ Fri May 13 15:54:44 2022 ------##
tt <- Sys.time()
if (!is.null(Pathway_list)){
Pagwas <- Pathway_pcascore_run(Pagwas=Pagwas,
Pathway_list=Pathway_list,
min.pathway.size=min.pathway.size,
max.pathway.size=max.pathway.size
)
}
message('done!')
cat('Pathway_pcascore_run: ',  file=log.file, append=T)
cat(Sys.time()-tt, '\n',  file=log.file, append=T)
message(paste(utils::timestamp(quiet = T), ' ******* 3rd: GWAS_summary_input function start! ********',sep = ''))
##------ Fri May 13 15:54:52 2022 ------##
tt <- Sys.time()
if(class(gwas_data)=="character"){
message("** Start to read the gwas_data!")
suppressMessages(gwas_data <- bigreadr::fread2(gwas_data))
}else{
stop("There is need a filename and address for gwas_data")
}
Pagwas <- GWAS_summary_input(Pagwas=Pagwas,
gwas_data=gwas_data,
maf_filter=maf_filter)
rm(gwas_data)
message('done!')
cat('GWAS_summary_input: ',  file=log.file, append=T)
cat(Sys.time()-tt, '\n',  file=log.file, append=T)
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas");
message(paste(utils::timestamp(quiet = T), ' ******* 3rd: GWAS_summary_input function start! ********',sep = ''))
##------ Fri May 13 15:55:18 2022 ------##
tt <- Sys.time()
if(class(gwas_data)=="character"){
message("** Start to read the gwas_data!")
suppressMessages(gwas_data <- bigreadr::fread2(gwas_data))
}else{
stop("There is need a filename and address for gwas_data")
}
Pagwas <- GWAS_summary_input(Pagwas=Pagwas,
gwas_data=gwas_data,
maf_filter=maf_filter)
rm(gwas_data)
message('done!')
cat('GWAS_summary_input: ',  file=log.file, append=T)
cat(Sys.time()-tt, '\n',  file=log.file, append=T)
message(paste(utils::timestamp(quiet = T), ' ******* 4th: Snp2Gene start!! ********',sep = ''))
##------ Fri May 13 15:55:23 2022 ------##
tt <- Sys.time()
if(!is.null(block_annotation)){
if(add_eqtls!="OnlyTSS"){
if (!is.null(eqtls_files)){
message("Filter snps for significant eqtls!")
Pagwas<-  Tissue_eqtls_Input(Pagwas=Pagwas,
block_annotation=block_annotation,
add_eqtls=add_eqtls,
eqtls_files=eqtls_files,
eqtl_p=0.05,
eqtls_cols=eqtls_cols,
marg=marg)
}else{
stop("Since the add_eqtls is TURE! No parameter 'eqtls_files' Input!  ")
}
}else{
snp_gene_df<-Snp2Gene(snp=Pagwas$gwas_data,refGene=block_annotation,marg=marg)
snp_gene_df$slope <- rep(1,nrow(snp_gene_df))
Pagwas$snp_gene_df<-snp_gene_df[snp_gene_df$Disstance=="0",]
}
}
message(paste(utils::timestamp(quiet = T), ' ******* 5th: Pathway_annotation_input function start! ********',sep = ''))
##------ Fri May 13 15:55:28 2022 ------##
tt <- Sys.time()
if (!is.null(block_annotation)){
Pagwas <- Pathway_annotation_input(Pagwas=Pagwas,
block_annotation=block_annotation)
}
message('done!')
cat('Pathway_annotation_input: ',  file=log.file, append=T)
cat(Sys.time()-tt, '\n',  file=log.file, append=T)
message(paste(utils::timestamp(quiet = T), ' ******* 6th: Link_pathway_blocks_gwas function start! ********',sep = ''))
##------ Fri May 13 15:55:34 2022 ------##
tt <- Sys.time()
if (!is.null(chrom_ld)){
Pagwas <- Link_pathway_blocks_gwas(Pagwas=Pagwas,
chrom_ld=chrom_ld,
split_n=split_n,
singlecell=singlecell,
celltype=celltype,
ncores=ncores)
message('done!')
}
options(bigmemory.allow.dimnames=TRUE)
Pachrom_block_list <- lapply(Pagwas$pathway_blocks, function(pa_blocks) split(pa_blocks, f = as.vector(pa_blocks$chrom)))
names(Pachrom_block_list) <- names(Pagwas$pathway_blocks)
Pagwas$pathway_blocks<-NULL
chrom_gwas_list <- lapply(split(Pagwas$gwas_data, f = Pagwas$gwas_data$chrom), function(gwas) {
gwas <- data.table::data.table(gwas)
data.table::setkey(gwas, pos)
return(gwas)
}
)
split_n
Pagwas<-Pathway_block_func(Pagwas=Pagwas,
Pachrom_block_list=Pachrom_block_list,
chrom_gwas_list=chrom_gwas_list,
singlecell=singlecell,
celltype=celltype,
ncores = ncores)
Pathway_sclm_results<-list()
Pathway_ld_gwas_data<-list()
pathway<-names(Pachrom_block_list)[1]
pathway
Pa_chrom_block <- Pachrom_block_list[[pathway]]
Pa_chrom_data <- lapply(names(Pa_chrom_block), function(chrom) {
chrom_block <- Pa_chrom_block[[chrom]]
ld_data <- chrom_ld[[chrom]]
data.table::setkey(ld_data, SNP_A) # just in case
if (!(chrom %in% names(chrom_gwas_list))) {
warning(paste(chrom, " for gwas is missing, could be a problem!", sep = ""))
return(NULL)
}
if (is.null(chrom_gwas_list[[chrom]])) {
warning(paste(chrom, " data missing, could be a problem", sep = ""))
return(NULL)
}
rsids <- Pagwas$snp_gene_df[which(Pagwas$snp_gene_df$label %in%
chrom_block$label), c("rsid", "label")]
c2 <- chrom_gwas_list[[chrom]]
rsids_gwas <- suppressMessages(dplyr::inner_join(rsids, c2))
if (is.null(nrow(rsids_gwas))) {
return(NULL)
}
beta_squared <- rsids_gwas$beta^2
# again, pretty sure this is binarize data table lookup
sub_ld <- ld_data[.(as.vector(rsids_gwas$rsid)), nomatch = 0L]
return(list(rsids_gwas, beta_squared, sub_ld, chrom_block))
})
pa_block<-list()
pa_block$block_info<- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[4]]))
pa_block$snps <- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[1]]))
pa_block$y <- unlist(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[2]]))
# message(paste0("snp is ",nrow(snp_data)))
pa_block$ld_data <- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[3]]))
rsid_x <- intersect(pa_block$snps$rsid, unique(unlist(pa_block$ld_data[, 1:2])))
pa_block$ld_data <- as.data.frame(pa_block$ld_data[pa_block$ld_data$SNP_A
%in% rsid_x & pa_block$ld_data$SNP_B
%in% rsid_x, ])
if (nrow(pa_block$ld_data) == 0) {
ld_matrix <- diag(1, nrow = nrow(pa_block$snps))
} else {
ld_matrix <- make_ld_matrix(all_snps = pa_block$snps$rsid,
ld_data = pa_block$ld_data)
}
pa_block$n_snps <- nrow(pa_block$snps)
pa_block$ld_matrix_squared <- ld_matrix * ld_matrix
singlecell
Pathway_sclm_results[[pathway]]<-get_Pathway_sclm(pa_block=pa_block,
pca_scCell_mat=Pagwas$pca_scCell_mat,
data_mat=Pagwas$data_mat,
rawPathway_list=Pagwas$rawPathway_list,
snp_gene_df=Pagwas$snp_gene_df,
ncores=ncores)
link_pwpca_block(pa_block=pa_block,
pca_cell_df=data.matrix(Pagwas$pca_cell_df),
merge_scexpr=Pagwas$merge_scexpr,
snp_gene_df=Pagwas$snp_gene_df,
rawPathway_list=Pagwas$rawPathway_list)
pca_cell_df=data.matrix(Pagwas$pca_cell_df)
merge_scexpr=Pagwas$merge_scexpr
snp_gene_df=Pagwas$snp_gene_df
snp_gene_df=Pagwas$snp_gene_df
rawPathway_list=Pagwas$rawPathway_list
pathway <- unique(pa_block$block_info$pathway)
x <-pca_cell_df[pathway, ]
if(length(pathway)==1){
x <- matrix(x, nrow = 1)
rownames(x)<-pathway
}
x
dim(pca_cell_df)
class(pca_cell_df)
pca_cell_df
x <- matrix(x, nrow = 1)
rownames(x)<-pathway
x
nrow(pa_block$snps)
proper_genes <- rownames(merge_scexpr)
mg <- intersect(rawPathway_list[[pathway]], proper_genes)
mg
x2 <- merge_scexpr[mg, ]
x2
mg
ncol
ncol(merge_scexpr)
data.matrix(x2)
x2<-data.matrix(x2)
apply(x2, 2, function(x) (x - min(x)) / (max(x) - min(x)))
x2<-data.matrix(x2)
x2 <- apply(x2, 2, function(x) (x - min(x)) / (max(x) - min(x)))
pa_block$n_snps
x2[pa_block$snps$label, ]
data.matrix(x2[pa_block$snps$label, ])
x2 <- data.matrix(x2[pa_block$snps$label, ])
pa_block$n_snps <- nrow(pa_block$snps)
rep(1, pa_block$n_snps)
x
data.matrix(x[rep(1, pa_block$n_snps), ])
x <-data.matrix(x[rep(1, pa_block$n_snps), ])
rownames(x) <- pa_block$snps$rsid
snp_gene_df
rownames(snp_gene_df) <- snp_gene_df$rsid
x <- x * snp_gene_df[pa_block$snps$rsid, "slope"]
x3 <- x2 * x
x3
t(pa_block$ld_matrix_squared) %*% x3
colnames(merge_scexpr)
pa_block$x <- t(pa_block$ld_matrix_squared) %*% x3
rownames(pa_block$x) <- pa_block$snps$rsid
colnames(pa_block$x) <- colnames(merge_scexpr)
devtools::load_all(".")
Pagwas<-Pathway_block_func(Pagwas=Pagwas,
Pachrom_block_list=Pachrom_block_list,
chrom_gwas_list=chrom_gwas_list,
singlecell=singlecell,
celltype=celltype,
ncores = ncores)
Pagwas$lm_results <- Pagwas_perform_regression(Pathway_ld_gwas_data=Pagwas$Pathway_ld_gwas_data)
Pagwas <- Boot_evaluate(Pagwas,bootstrap_iters = iters, part = 0.5)
bootstrap_iters = iters
part = 0.5
i<-1
boot_results <- Parameter_regression(
xy2vector(Pagwas$Pathway_ld_gwas_data[
sample(seq_len(length(Pagwas$Pathway_ld_gwas_data)), floor(length(Pagwas$Pathway_ld_gwas_data) * part))
])
)
boot_results <- para_names_adjust(Pagwas, lm_results = boot_results)
para_names_adjust
lm_results = Pagwas$lm_results
if (sum(names(lm_results$parameters) %in% colnames(Pagwas$pca_cell_df)) < ncol(Pagwas$pca_cell_df)) {
# message("There is blank or '+' within cell names!")
names(lm_results$parameters) <- stringr::str_replace_all(names(lm_results$parameters), " ", ".")
names(lm_results$parameters) <- stringr::str_replace_all(names(lm_results$parameters), "\\+", ".")
names(lm_results$parameters) <- stringr::str_replace_all(names(lm_results$parameters), "-", ".")
}
sum(names(lm_results$parameters)
}}
sum(names(lm_results$parameters) %in% colnames(Pagwas$pca_cell_df))
colnames(Pagwas$pca_cell_df)
names(lm_results$parameters)
boot_results
Pagwas$Pathway_ld_gwas_data$hsa00010$x
Pagwas$Pathway_ld_gwas_data$hsa00010$y
Pagwas$Pathway_ld_gwas_data$hsa00010$snps
Parameter_regression(
xy2vector(Pagwas$Pathway_ld_gwas_data[
sample(seq_len(length(Pagwas$Pathway_ld_gwas_data)), floor(length(Pagwas$Pathway_ld_gwas_data) * part))
])
)
boot_parameters = boot_results$parameters,
block_heritability = Get_Pathway_heritability_contributions(
Pagwas$pca_cell_df, boot_results$parameters
boot_results$parameters
boot_results$parameters
Get_Pathway_heritability_contributions(
Pagwas$pca_cell_df, boot_results$parameters
)
Pagwas$pca_cell_df
boot_results$parameters
names(boot_results$parameters
)
colnames(Pagwas$pca_cell_df)
names(boot_results$parameters)<-c("Intercept",colnames(Pagwas$pca_cell_df))
Boot_resultlist <-
lapply(1:bootstrap_iters, function(i) {
boot_results <- Parameter_regression(
xy2vector(Pagwas$Pathway_ld_gwas_data[
sample(seq_len(length(Pagwas$Pathway_ld_gwas_data)), floor(length(Pagwas$Pathway_ld_gwas_data) * part))
])
)
#boot_results <- para_names_adjust(Pagwas, lm_results = boot_results)
names(boot_results$parameters)<-c("Intercept",colnames(Pagwas$pca_cell_df))
setTxtProgressBar(pb, i / bootstrap_iters)
# return the important bits
return(
list(
boot_parameters = boot_results$parameters,
block_heritability = Get_Pathway_heritability_contributions(
Pagwas$pca_cell_df, boot_results$parameters
)
)
)
})
pb <- txtProgressBar(style = 3)
Boot_resultlist <-
lapply(1:bootstrap_iters, function(i) {
boot_results <- Parameter_regression(
xy2vector(Pagwas$Pathway_ld_gwas_data[
sample(seq_len(length(Pagwas$Pathway_ld_gwas_data)), floor(length(Pagwas$Pathway_ld_gwas_data) * part))
])
)
#boot_results <- para_names_adjust(Pagwas, lm_results = boot_results)
names(boot_results$parameters)<-c("Intercept",colnames(Pagwas$pca_cell_df))
setTxtProgressBar(pb, i / bootstrap_iters)
# return the important bits
return(
list(
boot_parameters = boot_results$parameters,
block_heritability = Get_Pathway_heritability_contributions(
Pagwas$pca_cell_df, boot_results$parameters
)
)
)
})
close(pb)
Pagwas$bootstrap_results <- Get_bootresults_df(
sapply(Boot_resultlist, function(boot) {
boot$boot_parameters
}),
names(Pagwas$lm_results$parameters),
Pagwas$lm_results$parameters
)
devtools::load_all(".")
Pagwas$lm_results <- Pagwas_perform_regression(Pathway_ld_gwas_data=Pagwas$Pathway_ld_gwas_data)
Pagwas <- Boot_evaluate(Pagwas,bootstrap_iters = iters, part = 0.5)
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
Single_data =a,
output.prefix="test",
add_eqtls="OnlyTSS",
block_annotation = block_annotation,
assay="RNA",
singlecell=T,
celltype=T,
Single_data =a,
split_n=3,
#nfeatures =19000,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
SimpleResult=T)
devtools::load_all(".")
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
Single_data =a,
output.prefix="test",
add_eqtls="OnlyTSS",
block_annotation = block_annotation,
assay="RNA",
singlecell=T,
celltype=T,
Single_data =a,
split_n=3,
#nfeatures =19000,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
SimpleResult=T)
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
Single_data =a,
output.prefix="test",
add_eqtls="OnlyTSS",
block_annotation = block_annotation,
assay="RNA",
singlecell=T,
celltype=T,
split_n=3,
#nfeatures =19000,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
SimpleResult=T)
##------ Fri May 13 16:17:44 2022 ------##
##------ Fri May 13 16:17:45 2022 ------##
##------ Fri May 13 16:17:58 2022 ------##
##------ Fri May 13 16:17:58 2022 ------##
##------ Fri May 13 16:17:59 2022 ------##
##------ Fri May 13 16:18:00 2022 ------##
##------ Fri May 13 16:18:26 2022 ------##
##------ Fri May 13 16:18:27 2022 ------##
##------ Fri May 13 16:18:32 2022 ------##
usethis::use_version()
devtools::document()
head(Pagwas)
names(Pagwas)
Pagwas$CellsrankPvalue
head(Pagwas$gene_heritability_correlation)
Pagwas$gene_heritability_correlation[di.nan(Pagwas$gene_heritability_correlation)]<-0
Pagwas$gene_heritability_correlation[is.nan(Pagwas$gene_heritability_correlation)]<-0
Pagwas$gene_heritability_correlation
head(Pagwas$gene_heritability_correlation)
devtools::load_all(".")
library(scPagwas)
library(scPagwas)
library(ggplot2)
suppressMessages(library(Seurat))
suppressMessages(library("dplyr"))
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#gene annotation files.
data(block_annotation)
#LD data
data(chrom_ld)
a<-readRDS(system.file("extdata", "scRNAexample.rds", package = "scPagwas"))
Idents(a)<- "1"
# saveRDS(a,file = "E:/OneDrive/GWAS_Multiomics/test.rds")
#1.start to run the wrapper functions for preprogress.
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
Single_data =a,
output.prefix="test",
add_eqtls="OnlyTSS",
block_annotation = block_annotation,
assay="RNA",
singlecell=T,
celltype=T,
split_n=3,
#nfeatures =19000,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
SimpleResult=T)
##------ Fri May 13 16:41:48 2022 ------##
##------ Fri May 13 16:41:49 2022 ------##
##------ Fri May 13 16:41:54 2022 ------##
##------ Fri May 13 16:41:54 2022 ------##
##------ Fri May 13 16:41:55 2022 ------##
##------ Fri May 13 16:41:57 2022 ------##
##------ Fri May 13 16:42:30 2022 ------##
##------ Fri May 13 16:42:31 2022 ------##
##------ Fri May 13 16:42:36 2022 ------##
