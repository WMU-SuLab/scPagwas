X = x_df,
y.train = Pagwas_y,
covar.train = bigstatsr::covar_from_df(data.frame(offset(noise_per_snp))),
ncores = n.cores
)
return(liear_m$estim)
}
#' scPagwas_score_filter
#' @description filter the cPagwas_score for outliers.
#' @param scPagwas_score (data.frame)
#'
#' @return
scPagwas_score_filter <- function(scPagwas_score) {
#scPagwas_score <- scPagwas_score$scPagwas_score
# remove the NAN!
if(sum(is.nan(scPagwas_score))>0){
scPagwas_score[is.nan(scPagwas_score)]<-0
}
# remove the inf values!
if (Inf %in% scPagwas_score) {
scPagwas_score[which(scPagwas_score == Inf)] <- max(scPagwas_score[-which(scPagwas_score == Inf)],na.rm=TRUE)
}
if (-Inf %in% scPagwas_score) {
scPagwas_score[which(scPagwas_score == -Inf)] <- min(scPagwas_score[-which(scPagwas_score == -Inf)],na.rm=TRUE)
}
lower_bound <- quantile(scPagwas_score, 0.01,na.rm=TRUE)
upper_bound <- quantile(scPagwas_score, 0.99,na.rm=TRUE)
lower_ind <- which(scPagwas_score < lower_bound)
upper_ind <- which(scPagwas_score > upper_bound)
scPagwas_score[lower_ind] <- lower_bound
scPagwas_score[upper_ind] <- upper_bound
return(scPagwas_score)
}
#' scGet_gene_heritability_contributions
#'
#' @param scPagwas_score result of scPagwas
#' @param data_mat the data matrix from single cell data
#'
#' @return
#' @examples
#' Single_data<-readRDS("E:/RPakage/scPagwas/inst/extdata/scRNAexample.rds")
#' Pagwas$sparse_cor<-scGet_gene_heritability_contributions(
#' scPagwas_score=Pagwas$scPagwas_score,
#' data_mat=Seurat::GetAssayData(object = Single_data[,names(Pagwas$scPagwas_score)], slot = "data"))
scGet_gene_heritability_correlation <- function(scPagwas_score,data_mat){
if(all(names(scPagwas_score)==colnames(data_mat))){
scPagwas_score<-data.matrix(scPagwas_score)
sparse_cor<-corSparse(X=t(data_mat), Y=scPagwas_score)
}else{
data_mat<-data_mat[,names(scPagwas_score)]
scPagwas_score<-data.matrix(scPagwas_score)
sparse_cor<-corSparse(X=t(data_mat), Y=scPagwas_score)
}
return(sparse_cor)
}
Pagwas <- scPagwas_perform_score(Pagwas)
Pathway_block$x
na_elements <- is.na(Pathway_block$y) | apply(x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
#x <- Pathway_block$x
rownames(x) <- Pathway_block$snps$rsid
x
dim(x)
class(x)
results <- scParameter_regression(Pagwas_x = x[!na_elements, ], Pagwas_y = Pathway_block$y[!na_elements], noise_per_snp = noise_per_snp[!na_elements], n.cores = n.cores)
results
results[is.na(results)] <- 0
results
Pathway_block$x
Pathway_sclm_results <- lapply(Pathway_names, function(Pathway) {
Pathway_block <- Pagwas$Pathway_ld_gwas_data[[Pathway]]
noise_per_snp <- Pathway_block$snps$se**2
x <- Pathway_block$x[1:nrow(Pathway_block$x),]
if (!is.null(Pathway_block$x)) {
if (nrow(Pathway_block$x) > 2) {
na_elements <- is.na(Pathway_block$y) | apply(x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
#x <- Pathway_block$x
rownames(x) <- Pathway_block$snps$rsid
}
results <- scParameter_regression(Pagwas_x = x[!na_elements, ], Pagwas_y = Pathway_block$y[!na_elements], noise_per_snp = noise_per_snp[!na_elements], n.cores = n.cores)
results[is.na(results)] <- 0
setTxtProgressBar(pb, which(Pathway_names == Pathway) / length(Pathway_names))
return(results)
} else {
return(NULL)
}
})
close(pb)
Pathway_sclm_results <- lapply(Pathway_names, function(Pathway) {
message(Pathway)
Pathway_block <- Pagwas$Pathway_ld_gwas_data[[Pathway]]
noise_per_snp <- Pathway_block$snps$se**2
x <- Pathway_block$x[1:nrow(Pathway_block$x),]
if (!is.null(Pathway_block$x)) {
if (nrow(Pathway_block$x) > 2) {
na_elements <- is.na(Pathway_block$y) | apply(x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
#x <- Pathway_block$x
rownames(x) <- Pathway_block$snps$rsid
}
results <- scParameter_regression(Pagwas_x = x[!na_elements, ], Pagwas_y = Pathway_block$y[!na_elements], noise_per_snp = noise_per_snp[!na_elements], n.cores = n.cores)
results[is.na(results)] <- 0
setTxtProgressBar(pb, which(Pathway_names == Pathway) / length(Pathway_names))
return(results)
} else {
return(NULL)
}
})
close(pb)
Pathway<-"hsa00062"
Pathway_block <- Pagwas$Pathway_ld_gwas_data[[Pathway]]
noise_per_snp <- Pathway_block$snps$se**2
x <- Pathway_block$x[1:nrow(Pathway_block$x),]
x
x<-data.matrix(x)
x
results <- scParameter_regression(Pagwas_x = x[!na_elements, ], Pagwas_y = Pathway_block$y[!na_elements], noise_per_snp = noise_per_snp[!na_elements], n.cores = n.cores)
Pathway_sclm_results <- lapply(Pathway_names, function(Pathway) {
message(Pathway)
Pathway_block <- Pagwas$Pathway_ld_gwas_data[[Pathway]]
noise_per_snp <- Pathway_block$snps$se**2
x <- Pathway_block$x[1:nrow(Pathway_block$x),]
if (!is.null(Pathway_block$x)) {
if (nrow(Pathway_block$x) > 2) {
na_elements <- is.na(Pathway_block$y) | apply(x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
#x <- Pathway_block$x
rownames(x) <- Pathway_block$snps$rsid
results <- scParameter_regression(Pagwas_x = x[!na_elements, ], Pagwas_y = Pathway_block$y[!na_elements], noise_per_snp = noise_per_snp[!na_elements], n.cores = n.cores)
}else{
results <- scParameter_regression(Pagwas_x= x[!na_elements,],Pagwas_y=Pathway_block$y[!na_elements],noise_per_snp=noise_per_snp[!na_elements],n.cores=n.cores)
}
results[is.na(results)] <- 0
setTxtProgressBar(pb, which(Pathway_names == Pathway) / length(Pathway_names))
return(results)
} else {
return(NULL)
}
})
close(pb)
Pathway_sclm_results <- lapply(Pathway_names, function(Pathway) {
message(Pathway)
Pathway_block <- Pagwas$Pathway_ld_gwas_data[[Pathway]]
noise_per_snp <- Pathway_block$snps$se**2
x <- Pathway_block$x#[1:nrow(Pathway_block$x),]
if (!is.null(Pathway_block$x)) {
if (nrow(Pathway_block$x) > 2) {
na_elements <- is.na(Pathway_block$y) | apply(x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
#x <- Pathway_block$x
rownames(x) <- Pathway_block$snps$rsid
results <- scParameter_regression(Pagwas_x = x[!na_elements, ], Pagwas_y = Pathway_block$y[!na_elements], noise_per_snp = noise_per_snp[!na_elements], n.cores = n.cores)
}else{
results <- scParameter_regression(Pagwas_x= x[!na_elements,],Pagwas_y=Pathway_block$y[!na_elements],noise_per_snp=noise_per_snp[!na_elements],n.cores=n.cores)
}
results[is.na(results)] <- 0
setTxtProgressBar(pb, which(Pathway_names == Pathway) / length(Pathway_names))
return(results)
} else {
return(NULL)
}
})
close(pb)
Pathway<-Pathway_names[[1]]
message(Pathway)
Pathway_block <- Pagwas$Pathway_ld_gwas_data[[Pathway]]
noise_per_snp <- Pathway_block$snps$se**2
x <- Pathway_block$x
x
na_elements <- is.na(Pathway_block$y) | apply(x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
x <- Pathway_block$x[1:nrow(Pathway_block$x),]
na_elements <- is.na(Pathway_block$y) | apply(x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
#x <- Pathway_block$x
rownames(x) <- Pathway_block$snps$rsid
results <- scParameter_regression(Pagwas_x = x[!na_elements, ], Pagwas_y = Pathway_block$y[!na_elements], noise_per_snp = noise_per_snp[!na_elements], n.cores = n.cores)
Pathway<-Pathway_names[[5]]
Pathway
message(Pathway)
Pathway_block <- Pagwas$Pathway_ld_gwas_data[[Pathway]]
noise_per_snp <- Pathway_block$snps$se**2
!is.null(Pathway_block$x)
nrow(Pathway_block$x) > 2
nrow(Pathway_block$x)
Pathway<-"hsa00062"
message(Pathway)
Pathway_block <- Pagwas$Pathway_ld_gwas_data[[Pathway]]
noise_per_snp <- Pathway_block$snps$se**2
nrow(Pathway_block$x)
results <- scParameter_regression(Pagwas_x= x[!na_elements,],Pagwas_y=Pathway_block$y[!na_elements],noise_per_snp=noise_per_snp[!na_elements],n.cores=n.cores)
!na_elements
Pathway_sclm_results <- lapply(Pathway_names, function(Pathway) {
Pathway_block <- Pagwas$Pathway_ld_gwas_data[[Pathway]]
noise_per_snp <- Pathway_block$snps$se**2
if (!is.null(Pathway_block$x)) {
if (nrow(Pathway_block$x) > 2) {
x <- Pathway_block$x[1:nrow(Pathway_block$x),]
na_elements <- is.na(Pathway_block$y) | apply(x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
#x <- Pathway_block$x
rownames(x) <- Pathway_block$snps$rsid
results <- scParameter_regression(Pagwas_x = x[!na_elements, ], Pagwas_y = Pathway_block$y[!na_elements], noise_per_snp = noise_per_snp[!na_elements], n.cores = n.cores)
results[is.na(results)] <- 0
}else{
return(NULL)
}
setTxtProgressBar(pb, which(Pathway_names == Pathway) / length(Pathway_names))
return(results)
} else {
return(NULL)
}
})
close(pb)
#' scPagwas_perform_score
#' @description Get the scPagwas score for each cells
#' @param Pagwas Pagwas data list
#' @param n.cores cores
#' @param remove_outlier Whether to remove the outlier for scPagwas score.
#' @return
#' @export
#'
#' @examples
#' library(scPagwas)
#' scPagwas_perform_score(Pagwas)
scPagwas_perform_score <- function(Pagwas,
n.cores = 1,
remove_outlier=TRUE) {
if (is.null(Pagwas$Pathway_ld_gwas_data)) {
stop("data has not been precomputed, returning without results")
# return(Pagwas)
}
# fit model
Pathway_names <- names(Pagwas$Pathway_ld_gwas_data)
message("Run regression for ", length(Pathway_names), " pathways")
pb <- txtProgressBar(style = 3)
Pathway_sclm_results <- lapply(Pathway_names, function(Pathway) {
Pathway_block <- Pagwas$Pathway_ld_gwas_data[[Pathway]]
noise_per_snp <- Pathway_block$snps$se**2
if (!is.null(Pathway_block$x)) {
if (nrow(Pathway_block$x) > 2) {
x <- Pathway_block$x[1:nrow(Pathway_block$x),]
na_elements <- is.na(Pathway_block$y) | apply(x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
#x <- Pathway_block$x
rownames(x) <- Pathway_block$snps$rsid
results <- scParameter_regression(Pagwas_x = x[!na_elements, ], Pagwas_y = Pathway_block$y[!na_elements], noise_per_snp = noise_per_snp[!na_elements], n.cores = n.cores)
results[is.na(results)] <- 0
}else{
return(NULL)
}
setTxtProgressBar(pb, which(Pathway_names == Pathway) / length(Pathway_names))
return(results)
} else {
return(NULL)
}
})
close(pb)
names(Pathway_sclm_results) <- Pathway_names
Pathway_sclm_results <- Pathway_sclm_results[!sapply(Pathway_sclm_results, is.null)]
Pathway_names <- names(Pathway_sclm_results)
Pathway_sclm_results <- as.data.frame(Pathway_sclm_results)
Pathway_sclm_results<-as(data.matrix(Pathway_sclm_results), "dgCMatrix")
pca_scCell_mat<-as(Pagwas$ff.pca_scCell_mat[Pathway_names, ],"dgCMatrix")
data_mat<-as(Pagwas$ff.data_mat[1:nrow(Pagwas$ff.data_mat),1:ncol(Pagwas$ff.data_mat)],"dgCMatrix")
pathway_expr <- lapply(Pathway_names, function(pa) {
a <- intersect(Pagwas$Pathway_list[[pa]], rownames(data_mat))
if (length(a) == 0) {
return(rep(0, ncol(data_mat)))
} else if (length(a) == 1) {
return(data_mat[intersect(a, rownames(data_mat)), ])
} else {
b <- apply(data_mat[intersect(a, rownames(data_mat)), ], 2, mean)
return(b)
}
})
rm(data_mat)
pathway_expr <- as.data.frame(pathway_expr)
colnames(pathway_expr) <- Pathway_names
pathway_expr <- as(data.matrix(pathway_expr[colnames(pca_scCell_mat), rownames(pca_scCell_mat)]), "dgCMatrix")
pa_exp_mat <- as(t(Pagwas$ff.pca_scCell_mat[Pathway_names, ]), "dgCMatrix") * pathway_expr
scPagwas_mat <- Pathway_sclm_results * pa_exp_mat
rm(pa_exp_mat)
rm(pathway_expr)
scs <- rowSums(scPagwas_mat)
rm(scPagwas_mat)
SOAR::Store(Pathway_sclm_results)
scs <- sign(scs) * log10(abs(scs) + 0.0001)
df <- data.frame(cellid = colnames(pca_scCell_mat), scPagwas_score = scs)
rownames(df) <- df$cellid
rm(scs)
rm(pca_scCell_mat)
if (remove_outlier) {
Pagwas$scPagwas_score <- scPagwas_score_filter(scPagwas_score = df$scPagwas_score)
}
names(Pagwas$scPagwas_score)<-df$cellid
Pagwas$gene_heritability_correlation<-scGet_gene_heritability_correlation(
scPagwas_score=Pagwas$scPagwas_score,
data_mat=Pagwas$ff.raw_data_mat[1:nrow(Pagwas$ff.raw_data_mat),names(Pagwas$scPagwas_score)])
rm(df)
gc()
return(Pagwas)
}
#' scParameter_regression
#' @description Find parameter estimates for the data.
#' @param Pagwas_x x parameter for lm
#' @param Pagwas_y y parameter for lm
#' @param noise_per_snp noise
#' @param n.cores cores
#'
#' @return
scParameter_regression <- function(Pagwas_x, Pagwas_y, noise_per_snp, n.cores = 1) {
x_df <- bigstatsr::as_FBM(Pagwas_x, type = "double")
liear_m <- bigstatsr::big_univLinReg(
X = x_df,
y.train = Pagwas_y,
covar.train = bigstatsr::covar_from_df(data.frame(offset(noise_per_snp))),
ncores = n.cores
)
return(liear_m$estim)
}
#' scPagwas_score_filter
#' @description filter the cPagwas_score for outliers.
#' @param scPagwas_score (data.frame)
#'
#' @return
scPagwas_score_filter <- function(scPagwas_score) {
#scPagwas_score <- scPagwas_score$scPagwas_score
# remove the NAN!
if(sum(is.nan(scPagwas_score))>0){
scPagwas_score[is.nan(scPagwas_score)]<-0
}
# remove the inf values!
if (Inf %in% scPagwas_score) {
scPagwas_score[which(scPagwas_score == Inf)] <- max(scPagwas_score[-which(scPagwas_score == Inf)],na.rm=TRUE)
}
if (-Inf %in% scPagwas_score) {
scPagwas_score[which(scPagwas_score == -Inf)] <- min(scPagwas_score[-which(scPagwas_score == -Inf)],na.rm=TRUE)
}
lower_bound <- quantile(scPagwas_score, 0.01,na.rm=TRUE)
upper_bound <- quantile(scPagwas_score, 0.99,na.rm=TRUE)
lower_ind <- which(scPagwas_score < lower_bound)
upper_ind <- which(scPagwas_score > upper_bound)
scPagwas_score[lower_ind] <- lower_bound
scPagwas_score[upper_ind] <- upper_bound
return(scPagwas_score)
}
#' scGet_gene_heritability_contributions
#'
#' @param scPagwas_score result of scPagwas
#' @param data_mat the data matrix from single cell data
#'
#' @return
#' @examples
#' Single_data<-readRDS("E:/RPakage/scPagwas/inst/extdata/scRNAexample.rds")
#' Pagwas$sparse_cor<-scGet_gene_heritability_contributions(
#' scPagwas_score=Pagwas$scPagwas_score,
#' data_mat=Seurat::GetAssayData(object = Single_data[,names(Pagwas$scPagwas_score)], slot = "data"))
scGet_gene_heritability_correlation <- function(scPagwas_score,data_mat){
if(all(names(scPagwas_score)==colnames(data_mat))){
scPagwas_score<-data.matrix(scPagwas_score)
sparse_cor<-corSparse(X=t(data_mat), Y=scPagwas_score)
}else{
data_mat<-data_mat[,names(scPagwas_score)]
scPagwas_score<-data.matrix(scPagwas_score)
sparse_cor<-corSparse(X=t(data_mat), Y=scPagwas_score)
}
return(sparse_cor)
}
Pagwas <- scPagwas_perform_score(Pagwas)
usethis::use_version()
library(scPagwas)
suppressMessages(library(Seurat))
suppressWarnings(library(SOAR))
suppressMessages(library("dplyr"))
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#gene annotation files.
data(block_annotation)
#LD data
data(chrom_ld)
#1.start to run the wrapper functions for preprogress.
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
add_eqtls="OnlyTSS",
block_annotation = block_annotation,
Single_data = system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
scPagwasSession="scPagwasSession")
##------ Wed Mar 23 18:43:17 2022 ------##
##------ Wed Mar 23 18:43:22 2022 ------##
##------ Wed Mar 23 18:44:15 2022 ------##
##------ Wed Mar 23 18:44:15 2022 ------##
##------ Wed Mar 23 18:44:16 2022 ------##
##------ Wed Mar 23 18:44:17 2022 ------##
Objects()
# 7th: link_pwpca_block function start!!
Pagwas <- link_pwpca_block(Pagwas)
#8th: Pagwas_perform_regression function start!!
Pagwas <- Pagwas_perform_regression(Pagwas, iters = 200,n.cores=1)
Objects()
Bootstrap_P_Barplot(Pagwas=Pagwas,
figurenames = NULL,
width = 5,
height = 7,
do_plot=T,
title = "Test scPagwas")
Objects()
Bootstrap_estimate_Plot(Pagwas=Pagwas,
figurenames = NULL,
width = 9,
height = 7,
do_plot=T)
suppressMessages(require("WGCNA"))
suppressMessages(require("patchwork"))
suppressMessages(require("tidygraph"))
suppressMessages(require("ggraph"))
suppressMessages(require("igraph"))
#check the objects
Objects()
plot_pathway_contribution_network(
mat_datExpr=pca_cell_df,
vec_pathwaycontribution=Pagwas$Pathway_block_heritability,
vec_pathways_highlight=names(sort(Pagwas$Pathway_block_heritability,decreasing = T)[1:5]),
n_max_pathways=20,
igraph_algorithm = "drl",
fontface_labels="bold.italic",
color_edge = "#9D9D9D",
fontSize_label_lg=4,
fontSize_legend_lg=4,
fontSize_legend_xlg=4,
edge_thickness = 1,
do_plot=T
)
#check the objects
Objects()
Pagwas <- link_scCell_pwpca_block(Pagwas)
Pagwas <- scPagwas_perform_score(Pagwas)
#check the objects in Pagwas,if you don't need rerun, remove some objects
names(Pagwas)
Pagwas$
}}}
library(scPagwas)
suppressMessages(library(Seurat))
suppressWarnings(library(SOAR))
suppressMessages(library("dplyr"))
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#gene annotation files.
data(block_annotation)
#LD data
data(chrom_ld)
#1.start to run the wrapper functions for preprogress.
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
add_eqtls="OnlyTSS",
block_annotation = block_annotation,
Single_data = system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
FilterSingleCell=F,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
scPagwasSession="scPagwasSession")
##------ Wed Mar 23 19:10:15 2022 ------##
##------ Wed Mar 23 19:10:16 2022 ------##
##------ Wed Mar 23 19:11:11 2022 ------##
##------ Wed Mar 23 19:11:11 2022 ------##
##------ Wed Mar 23 19:11:11 2022 ------##
##------ Wed Mar 23 19:11:12 2022 ------##
Pagwas <- Single_data_input(Pagwas=NULL,
#nfeatures =nfeatures,
Single_data=severe_all,
#FilterSingleCell=FilterSingleCell,
Pathway_list=Genes_by_pathway_kegg
#min.lib.size = min.lib.size,
#min.reads =min.reads,
)
Objects()
# 7th: link_pwpca_block function start!!
Pagwas <- link_pwpca_block(Pagwas)
#8th: Pagwas_perform_regression function start!!
Pagwas <- Pagwas_perform_regression(Pagwas, iters = 200,n.cores=1)
Objects()
Bootstrap_P_Barplot(Pagwas=Pagwas,
figurenames = NULL,
width = 5,
height = 7,
do_plot=T,
title = "Test scPagwas")
#check the objects
Objects()
Pagwas <- link_scCell_pwpca_block(Pagwas)
Pagwas <- scPagwas_perform_score(Pagwas)
#check the objects in Pagwas,if you don't need rerun, remove some objects
names(Pagwas)
#Pagwas$
?big_copy()
?write_table
??write_table
gc()
devtools::install_github("dengchunyu/scPagwas")
