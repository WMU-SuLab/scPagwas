))
pa_block$snps <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[1]]
))
pa_block$y <- unlist(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[2]]
))
pa_block$ld_data <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[3]]
))
rsid_x <- intersect(pa_block$snps$rsid, unique(
unlist(pa_block$ld_data[, 1:2])
))
pa_block$ld_data <- as.data.frame(
pa_block$ld_data[pa_block$ld_data$SNP_A
%in% rsid_x & pa_block$ld_data$SNP_B
%in% rsid_x, ]
)
rm(Pa_chrom_data)
if (nrow(pa_block$ld_data) == 0) {
ld_matrix <- diag(1, nrow = nrow(pa_block$snps))
} else {
ld_matrix <- make_ld_matrix(
all_snps = pa_block$snps$rsid,
ld_data = pa_block$ld_data
)
}
pa_block$n_snps <- nrow(pa_block$snps)
pa_block$ld_matrix_squared <- ld_matrix * ld_matrix
pca_scCell_mat = Pagwas$pca_scCell_mat
rawPathway_list = Pagwas$rawPathway_list
snp_gene_df = Pagwas$snp_gene_df
pathway <- unique(pa_block$block_info$pathway)
x <- matrix(pca_scCell_mat[pathway, ], nrow = 1)
rownames(x) <- pathway
if (pa_block$n_snps == 0) {
pa_block$include_in_inference <- F
pa_block$x <- NULL # to make sure we totally replace previous stuffs
return(pa_block)
}
mg <- intersect(rawPathway_list[[pathway]], rownames(data_mat))
if (length(mg) == 1) {
x2 <- matrix(data_mat[mg, ], nrow = 1)
x2 <- x2 / (x2 + 0.0001)
rownames(x2) <- mg
} else {
x2 <- biganalytics::apply(data_mat[mg, ], 2, function(ge) {
if (sum(ge) == 0) {
return(rep(0, length(ge)))
} else {
return(ge / sum(ge))
}
})
rownames(x2) <- mg
}
if (pa_block$n_snps > 1) {
x2 <- x2[pa_block$snps$label, ]
pa_block$n_snps <- nrow(pa_block$snps)
x <- x[rep(1, pa_block$n_snps), ]
rownames(x) <- pa_block$snps$rsid
#x <- x * snp_gene_df[pa_block$snps$rsid, "slope"]
x2 <- x2 * x
} else {
x2 <- matrix(x2[pa_block$snps$label, ], nrow = 1)
rownames(x2) <- pa_block$snps$label
pa_block$n_snps <- nrow(pa_block$snps)
x <- matrix(x[rep(1, pa_block$n_snps), ], nrow = 1)
rownames(x) <- pa_block$snps$rsid
#x <- matrix(as.numeric(x) * as.numeric(
#  snp_gene_df[pa_block$snps$rsid, "slope"]
#), nrow = 1)
x2 <- matrix(as.numeric(x2) * as.numeric(x), nrow = 1)
#x2 <- as(x2, "dgCMatrix")
}
pathway <- unique(pa_block$block_info$pathway)
x <- matrix(pca_scCell_mat[pathway, ], nrow = 1)
rownames(x) <- pathway
if (pa_block$n_snps == 0) {
pa_block$include_in_inference <- F
pa_block$x <- NULL # to make sure we totally replace previous stuffs
return(pa_block)
}
mg <- intersect(rawPathway_list[[pathway]], rownames(data_mat))
ca_scCell_mat = Pagwas$pca_scCell_mat
rawPathway_list = Pagwas$rawPathway_list
snp_gene_df = Pagwas$snp_gene_df
data_mat = Pagwas$data_mat
pathway <- unique(pa_block$block_info$pathway)
x <- matrix(pca_scCell_mat[pathway, ], nrow = 1)
rownames(x) <- pathway
pa_block$n_snps
mg <- intersect(rawPathway_list[[pathway]], rownames(data_mat))
if (length(mg) == 1) {
x2 <- matrix(data_mat[mg, ], nrow = 1)
x2 <- x2 / (x2 + 0.0001)
rownames(x2) <- mg
} else {
x2 <- biganalytics::apply(data_mat[mg, ], 2, function(ge) {
if (sum(ge) == 0) {
return(rep(0, length(ge)))
} else {
return(ge / sum(ge))
}
})
rownames(x2) <- mg
}
#x2 <- as(x2, "dgCMatrix")
if (pa_block$n_snps > 1) {
x2 <- x2[pa_block$snps$label, ]
pa_block$n_snps <- nrow(pa_block$snps)
x <- x[rep(1, pa_block$n_snps), ]
rownames(x) <- pa_block$snps$rsid
#x <- x * snp_gene_df[pa_block$snps$rsid, "slope"]
x2 <- x2 * x
} else {
x2 <- matrix(x2[pa_block$snps$label, ], nrow = 1)
rownames(x2) <- pa_block$snps$label
pa_block$n_snps <- nrow(pa_block$snps)
x <- matrix(x[rep(1, pa_block$n_snps), ], nrow = 1)
rownames(x) <- pa_block$snps$rsid
#x <- matrix(as.numeric(x) * as.numeric(
#  snp_gene_df[pa_block$snps$rsid, "slope"]
#), nrow = 1)
x2 <- matrix(as.numeric(x2) * as.numeric(x), nrow = 1)
#x2 <- as(x2, "dgCMatrix")
}
pa_block$x <- pa_block$ld_matrix_squared %*% x2 #, "dgCMatrix")
pa_block$include_in_inference <- T
noise_per_snp <- pa_block$snps$se**2
pa_block$n_snps
na_elements <- is.na(pa_block$y) | apply(pa_block$x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
Pagwas_x = pa_block$x[!na_elements, ]
Pagwas_y = pa_block$y[!na_elements]
noise_per_snp = noise_per_snp[!na_elements]
Pagwas_y
ge
Pagwas_x
require(bigmemory)
parameters_df<-biganalytics::apply(Pagwas_x, 2, function(ge) {
m <- biglm.big.matrix(Pagwas_y ~
offset(noise_per_snp) +
ge)
parameters <- as.vector(stats::coef(m)[-1])
return(parameters)
})
?biglm.big.matrix
library(biganalytics)
parameters_df<-biganalytics::apply(Pagwas_x, 2, function(ge) {
m <- biglm.big.matrix(Pagwas_y ~
offset(noise_per_snp) +
ge)
parameters <- as.vector(stats::coef(m)[-1])
return(parameters)
})
noise_per_snp
a<-Pagwas_x
a$Pagwas_y<-Pagwas_y
a$noise_per_snp<-noise_per_snp
Pagwas_y
mode(Pagwas_x)
typeof(Pagwas_x)
dim(Pagwas_x)
a<-as.data.frame(Pagwas_x)
a$Pagwas_y<-Pagwas_y
a$noise_per_snp<-noise_per_snp
a<-as.big.matrix(a)
a
parameters_df<-biganalytics::apply(Pagwas_x, 2, function(ge) {
m <- biglm.big.matrix(Pagwas_y ~
offset(noise_per_snp) +
ge, a)
parameters <- as.vector(stats::coef(m)[-1])
return(parameters)
})
library(purrr)
?map
lm_x<-function(ge){
m <- stats::lm(Pagwas_y ~
offset(noise_per_snp) +
ge)
parameters <- as.vector(stats::coef(m)[-1])
return(parameters)
}
map(Pagwas_x,lm_x)
map(as.data.frame(Pagwas_x),lm_x)
parameters<-map_lgl(as.data.frame(Pagwas_x),lm_x)
parameters<-map(as.data.frame(Pagwas_x),lm_x)
head(parameters)
unlist(parameters)[1:5]
parameters_df<-biganalytics::apply(Pagwas_x, 2, function(ge) {
m <- stats::lm(Pagwas_y ~
offset(noise_per_snp) +
ge)
parameters <- as.vector(stats::coef(m)[-1])
return(parameters)
})
parameters_df<-biganalytics::apply(Pagwas_x, 2, function(ge) {
m <- stats::lm(Pagwas_y ~
offset(noise_per_snp) +
ge)
parameters <- as.vector(stats::coef(m)[-1])
return(parameters)
})
parameters_df[15]
parameters_df[1:5]
devtools::load_all(".")
Sys.time (
Pagwas <- Pathway_block_func(
Pagwas = Pagwas,
Pachrom_block_list = Pachrom_block_list,
chrom_ld = chrom_ld,
chrom_gwas_list = chrom_gwas_list,
singlecell = singlecell,
celltype = celltype,
n.cores=n.cores
)
)
Sys.time (
Pagwas <- Pathway_block_func(
Pagwas = Pagwas,
Pachrom_block_list = Pachrom_block_list,
chrom_ld = chrom_ld,
chrom_gwas_list = chrom_gwas_list,
singlecell = singlecell,
celltype = celltype
)
)
Pagwas <- Pathway_block_func(
Pagwas = Pagwas,
Pachrom_block_list = Pachrom_block_list,
chrom_ld = chrom_ld,
chrom_gwas_list = chrom_gwas_list,
singlecell = singlecell,
celltype = celltype
)
library(purrr)
Pagwas <- Pathway_block_func(
Pagwas = Pagwas,
Pachrom_block_list = Pachrom_block_list,
chrom_ld = chrom_ld,
chrom_gwas_list = chrom_gwas_list,
singlecell = singlecell,
celltype = celltype
)
devtools::load_all(".")
Pagwas <- Pathway_block_func(
Pagwas = Pagwas,
Pachrom_block_list = Pachrom_block_list,
chrom_ld = chrom_ld,
chrom_gwas_list = chrom_gwas_list,
singlecell = singlecell,
celltype = celltype
)
devtools::load_all(".")
Sys.time(
Pagwas <- Pathway_block_func(
Pagwas = Pagwas,
Pachrom_block_list = Pachrom_block_list,
chrom_ld = chrom_ld,
chrom_gwas_list = chrom_gwas_list,
singlecell = singlecell,
celltype = celltype
)
)
Pagwas <- Pathway_block_func(
Pagwas = Pagwas,
Pachrom_block_list = Pachrom_block_list,
chrom_ld = chrom_ld,
chrom_gwas_list = chrom_gwas_list,
singlecell = singlecell,
celltype = celltype
)
system.time(
Pagwas <- Pathway_block_func(
Pagwas = Pagwas,
Pachrom_block_list = Pachrom_block_list,
chrom_ld = chrom_ld,
chrom_gwas_list = chrom_gwas_list,
singlecell = singlecell,
celltype = celltype
)
)
n.cores=1) {
Pathway_sclm_results <- list()
Pathway_ld_gwas_data <- list()
SNP_A <- NULL
message(paste0(
"* Start to link gwas and pathway block annotations for ",
length(Pachrom_block_list), " pathways!"
))
options(bigmemory.allow.dimnames = TRUE)
pb <- txtProgressBar(style = 3)
pathway
Pa_chrom_block <- Pachrom_block_list[[pathway]]
Pa_chrom_data <- lapply(names(Pa_chrom_block), function(chrom) {
chrom_block <- Pa_chrom_block[[chrom]]
ld_data <- chrom_ld[[chrom]]
data.table::setkey(ld_data, SNP_A) # just in case
if (!(chrom %in% names(chrom_gwas_list))) {
warning(paste(chrom, " for gwas is missing, could be a problem!",
sep = ""
))
return(NULL)
}
if (is.null(chrom_gwas_list[[chrom]])) {
warning(paste(chrom, " data missing, could be a problem", sep = ""))
return(NULL)
}
rsids <- Pagwas$snp_gene_df[which(Pagwas$snp_gene_df$label %in%
chrom_block$label), c("rsid", "label")]
c2 <- chrom_gwas_list[[chrom]]
rsids_gwas <- suppressMessages(dplyr::inner_join(rsids, c2))
if (is.null(nrow(rsids_gwas))) {
return(NULL)
}
beta_squared <- rsids_gwas$beta^2
# again, pretty sure this is binarize data table lookup
sub_ld <- ld_data[.(as.vector(rsids_gwas$rsid)), nomatch = 0L]
return(list(rsids_gwas, beta_squared, sub_ld, chrom_block))
})
# cbind_df代替 rbind_df(list_df)
rm(Pa_chrom_block)
pa_block <- list()
pa_block$block_info <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[4]]
))
pa_block$snps <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[1]]
))
pa_block$y <- unlist(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[2]]
))
pa_block$ld_data <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[3]]
))
rsid_x <- intersect(pa_block$snps$rsid, unique(
unlist(pa_block$ld_data[, 1:2])
))
pa_block$ld_data <- as.data.frame(
pa_block$ld_data[pa_block$ld_data$SNP_A
%in% rsid_x & pa_block$ld_data$SNP_B
%in% rsid_x, ]
)
rm(Pa_chrom_data)
if (nrow(pa_block$ld_data) == 0) {
ld_matrix <- diag(1, nrow = nrow(pa_block$snps))
} else {
ld_matrix <- make_ld_matrix(
all_snps = pa_block$snps$rsid,
ld_data = pa_block$ld_data
)
}
pa_block$n_snps <- nrow(pa_block$snps)
pa_block$ld_matrix_squared <- ld_matrix * ld_matrix
get_Pathway_sclm(
pa_block = pa_block,
pca_scCell_mat = Pagwas$pca_scCell_mat,
data_mat = Pagwas$data_mat,
rawPathway_list = Pagwas$rawPathway_list,
snp_gene_df = Pagwas$snp_gene_df
)
devtools::load_all(".")
get_Pathway_sclm(
pa_block = pa_block,
pca_scCell_mat = Pagwas$pca_scCell_mat,
data_mat = Pagwas$data_mat,
rawPathway_list = Pagwas$rawPathway_list,
snp_gene_df = Pagwas$snp_gene_df
)
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype
)
devtools::load_all(".")
system.time(
Pagwas_singlecell<-scPagwas_main(Pagwas =NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
output.prefix="Test",
output.dirs="Test",
Pathway_list=Genes_by_pathway_kegg,
assay="RNA",
singlecell=T,
celltype=T,
block_annotation = block_annotation,
chrom_ld = chrom_ld)
)
devtools::load_all(".")
system.time(
Pagwas_singlecell<-scPagwas_main(Pagwas =NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
output.prefix="Test",
output.dirs="Test",
Pathway_list=Genes_by_pathway_kegg,
assay="RNA",
singlecell=T,
celltype=T,
block_annotation = block_annotation,
chrom_ld = chrom_ld)
)
##------ Fri Nov 18 14:09:09 2022 ------##
##------ Fri Nov 18 14:09:13 2022 ------##
##------ Fri Nov 18 14:09:31 2022 ------##
##------ Fri Nov 18 14:09:31 2022 ------##
##------ Fri Nov 18 14:09:31 2022 ------##
##------ Fri Nov 18 14:09:33 2022 ------##
##------ Fri Nov 18 14:13:04 2022 ------##
##------ Fri Nov 18 14:13:05 2022 ------##
##------ Fri Nov 18 14:13:10 2022 ------##
devtools::load_all(".")
Rcpp::sourceCpp(code='
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
IntegerMatrix asMatrix(NumericVector rp,
NumericVector cp,
NumericVector z,
int nrows,
int ncols){
int k = z.size() ;
IntegerMatrix  mat(nrows, ncols);
for (int i = 0; i < k; i++){
mat(rp[i],cp[i]) = z[i];
}
return mat;
}
' )
Rcpp::sourceCpp(code='
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
IntegerMatrix asMatrix(NumericVector rp,
NumericVector cp,
NumericVector z,
int nrows,
int ncols){
int k = z.size() ;
IntegerMatrix  mat(nrows, ncols);
for (int i = 0; i < k; i++){
mat(rp[i],cp[i]) = z[i];
}
return mat;
}
' )
library(Rcpp)
as_matrix <- function(mat){
row_pos <- mat@i
col_pos <- findInterval(seq(mat@x)-1,mat@p[-1])
tmp <- asMatrix(rp = row_pos, cp = col_pos, z = mat@x,
nrows =  mat@Dim[1], ncols = mat@Dim[2])
row.names(tmp) <- mat@Dimnames[[1]]
colnames(tmp) <- mat@Dimnames[[2]]
return(tmp)
}
devtools::load_all(".")
system()
?sourceCpp
Rcpp::sourceCpp(code='
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export]]
IntegerMatrix asMatrix(NumericVector rp,
NumericVector cp,
NumericVector z,
int nrows,
int ncols){
int k = z.size() ;
IntegerMatrix  mat(nrows, ncols);
for (int i = 0; i < k; i++){
mat(rp[i],cp[i]) = z[i];
}
return mat;
}
'
)
Rcpp::sourceCpp(code='
#include <Rcpp.h>
using namespace Rcpp;
'
)
renv::init(bioconductor = TRUE)
?renv::init
renv::init(bioconductor = 3.16)
BiocManager::install(version = "3.16")
?filebacked.big.matrix
Pagwas =NULL
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas")
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas")
output.prefix="Test"
output.dirs="Test"
Pathway_list=Genes_by_pathway_kegg
library(scPagwas)
install.packages("rlang")
library(scPagwas)
devtools::load_all(".")
devtools::document()
renv::snapshot()
devtools::load_all(".")
library(rlang\)
library(rlang)
