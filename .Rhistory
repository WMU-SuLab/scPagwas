Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = maf_filter
)
snp_gene_df <- Snp2Gene(snp = Pagwas$gwas_data, refGene = block_annotation, marg = marg)
snp_gene_df$slope <- rep(1, nrow(snp_gene_df))
Pagwas$snp_gene_df <- snp_gene_df[snp_gene_df$Disstance == "0", ]
Pagwas <- Pathway_annotation_input(
Pagwas = Pagwas,
block_annotation = block_annotation
)
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
split_n = split_n,
singlecell = singlecell,
celltype = celltype,
ncores = ncores
)
options(bigmemory.allow.dimnames = TRUE)
Pachrom_block_list <- lapply(Pagwas$pathway_blocks, function(pa_blocks) split(pa_blocks, f = as.vector(pa_blocks$chrom)))
names(Pachrom_block_list) <- names(Pagwas$pathway_blocks)
if (pa_block$n_snps == 0) {
pa_block$include_in_inference <- F
pa_block$x <- NULL # to make sure we totally replace previous stuffs
return(pa_block)
}
options(bigmemory.allow.dimnames = TRUE)
Pachrom_block_list <- lapply(Pagwas$pathway_blocks, function(pa_blocks) split(pa_blocks, f = as.vector(pa_blocks$chrom)))
names(Pachrom_block_list) <- names(Pagwas$pathway_blocks)
chrom_gwas_list <- lapply(split(Pagwas$gwas_data, f = Pagwas$gwas_data$chrom), function(gwas) {
gwas <- data.table::data.table(gwas)
data.table::setkey(gwas, pos)
return(gwas)
})
split_n
Pagwas <- Pathway_block_func(
Pagwas = Pagwas,
Pachrom_block_list = Pachrom_block_list,
chrom_gwas_list = chrom_gwas_list,
singlecell = singlecell,
celltype = celltype,
ncores = ncores
)
Pathway_sclm_results <- list()
Pathway_ld_gwas_data <- list()
message(paste0(
"* Start to link gwas and pathway block annotations for ",
length(Pachrom_block_list), " pathways!"
))
options(bigmemory.allow.dimnames = TRUE)
pb <- txtProgressBar(style = 3)
for (pathway in names(Pachrom_block_list)) {
Pa_chrom_block <- Pachrom_block_list[[pathway]]
Pa_chrom_data <- lapply(names(Pa_chrom_block), function(chrom) {
chrom_block <- Pa_chrom_block[[chrom]]
ld_data <- chrom_ld[[chrom]]
data.table::setkey(ld_data, SNP_A) # just in case
if (!(chrom %in% names(chrom_gwas_list))) {
warning(paste(chrom, " for gwas is missing, could be a problem!", sep = ""))
return(NULL)
}
if (is.null(chrom_gwas_list[[chrom]])) {
warning(paste(chrom, " data missing, could be a problem", sep = ""))
return(NULL)
}
rsids <- Pagwas$snp_gene_df[which(Pagwas$snp_gene_df$label %in%
chrom_block$label), c("rsid", "label")]
c2 <- chrom_gwas_list[[chrom]]
rsids_gwas <- suppressMessages(dplyr::inner_join(rsids, c2))
if (is.null(nrow(rsids_gwas))) {
return(NULL)
}
beta_squared <- rsids_gwas$beta^2
# again, pretty sure this is binarize data table lookup
sub_ld <- ld_data[.(as.vector(rsids_gwas$rsid)), nomatch = 0L]
return(list(rsids_gwas, beta_squared, sub_ld, chrom_block))
})
# cbind_df代替 rbind_df(list_df)
rm(Pa_chrom_block)
pa_block <- list()
pa_block$block_info <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[4]]
))
pa_block$snps <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[1]]
))
pa_block$y <- unlist(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[2]]
))
# message(paste0("snp is ",nrow(snp_data)))
pa_block$ld_data <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[3]]
))
rsid_x <- intersect(pa_block$snps$rsid, unique(unlist(pa_block$ld_data[, 1:2])))
pa_block$ld_data <- as.data.frame(pa_block$ld_data[pa_block$ld_data$SNP_A
%in% rsid_x & pa_block$ld_data$SNP_B
%in% rsid_x, ])
rm(Pa_chrom_data)
# message(paste0("ld is ",nrow(sub_ld)))
if (nrow(pa_block$ld_data) == 0) {
ld_matrix <- diag(1, nrow = nrow(pa_block$snps))
} else {
ld_matrix <- make_ld_matrix(
all_snps = pa_block$snps$rsid,
ld_data = pa_block$ld_data
)
}
pa_block$n_snps <- nrow(pa_block$snps)
pa_block$ld_matrix_squared <- ld_matrix * ld_matrix
## compute the single cell result
if (singlecell) {
Pathway_sclm_results[[pathway]] <- get_Pathway_sclm(
pa_block = pa_block,
pca_scCell_mat = Pagwas$pca_scCell_mat,
data_mat = Pagwas$data_mat,
rawPathway_list = Pagwas$rawPathway_list,
snp_gene_df = Pagwas$snp_gene_df,
ncores = ncores
)
}
if (celltype) {
pa_block <- link_pwpca_block(
pa_block = pa_block,
pca_cell_df = data.matrix(Pagwas$pca_cell_df),
merge_scexpr = Pagwas$merge_scexpr,
snp_gene_df = Pagwas$snp_gene_df,
rawPathway_list = Pagwas$rawPathway_list
)
# Pathway_lm_results[[pathway]]<- Pa_Pagwas_perform_regression(pa_block=pa_block)
Pathway_ld_gwas_data[[pathway]] <- pa_block
}
setTxtProgressBar(pb, which(names(Pachrom_block_list) == pathway) / length(names(Pachrom_block_list)))
}
close(pb)
pathway
devtools::load_all(".")
Pagwas <- Pathway_block_func(
Pagwas = Pagwas,
Pachrom_block_list = Pachrom_block_list,
chrom_gwas_list = chrom_gwas_list,
singlecell = singlecell,
celltype = celltype,
ncores = ncores
)
Pathway_sclm_results <- list()
Pathway_ld_gwas_data <- list()
message(paste0(
"* Start to link gwas and pathway block annotations for ",
length(Pachrom_block_list), " pathways!"
))
options(bigmemory.allow.dimnames = TRUE)
pb <- txtProgressBar(style = 3)
names(Pachrom_block_list)
for (pathway in names(Pachrom_block_list)) {
print(pathway)
Pa_chrom_block <- Pachrom_block_list[[pathway]]
Pa_chrom_data <- lapply(names(Pa_chrom_block), function(chrom) {
chrom_block <- Pa_chrom_block[[chrom]]
ld_data <- chrom_ld[[chrom]]
data.table::setkey(ld_data, SNP_A) # just in case
if (!(chrom %in% names(chrom_gwas_list))) {
warning(paste(chrom, " for gwas is missing, could be a problem!", sep = ""))
return(NULL)
}
if (is.null(chrom_gwas_list[[chrom]])) {
warning(paste(chrom, " data missing, could be a problem", sep = ""))
return(NULL)
}
rsids <- Pagwas$snp_gene_df[which(Pagwas$snp_gene_df$label %in%
chrom_block$label), c("rsid", "label")]
c2 <- chrom_gwas_list[[chrom]]
rsids_gwas <- suppressMessages(dplyr::inner_join(rsids, c2))
if (is.null(nrow(rsids_gwas))) {
return(NULL)
}
beta_squared <- rsids_gwas$beta^2
# again, pretty sure this is binarize data table lookup
sub_ld <- ld_data[.(as.vector(rsids_gwas$rsid)), nomatch = 0L]
return(list(rsids_gwas, beta_squared, sub_ld, chrom_block))
})
# cbind_df代替 rbind_df(list_df)
rm(Pa_chrom_block)
pa_block <- list()
pa_block$block_info <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[4]]
))
pa_block$snps <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[1]]
))
pa_block$y <- unlist(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[2]]
))
# message(paste0("snp is ",nrow(snp_data)))
pa_block$ld_data <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[3]]
))
rsid_x <- intersect(pa_block$snps$rsid, unique(unlist(pa_block$ld_data[, 1:2])))
pa_block$ld_data <- as.data.frame(pa_block$ld_data[pa_block$ld_data$SNP_A
%in% rsid_x & pa_block$ld_data$SNP_B
%in% rsid_x, ])
rm(Pa_chrom_data)
# message(paste0("ld is ",nrow(sub_ld)))
if (nrow(pa_block$ld_data) == 0) {
ld_matrix <- diag(1, nrow = nrow(pa_block$snps))
} else {
ld_matrix <- make_ld_matrix(
all_snps = pa_block$snps$rsid,
ld_data = pa_block$ld_data
)
}
pa_block$n_snps <- nrow(pa_block$snps)
pa_block$ld_matrix_squared <- ld_matrix * ld_matrix
## compute the single cell result
if (singlecell) {
Pathway_sclm_results[[pathway]] <- get_Pathway_sclm(
pa_block = pa_block,
pca_scCell_mat = Pagwas$pca_scCell_mat,
data_mat = Pagwas$data_mat,
rawPathway_list = Pagwas$rawPathway_list,
snp_gene_df = Pagwas$snp_gene_df,
ncores = ncores
)
}
if (celltype) {
pa_block <- link_pwpca_block(
pa_block = pa_block,
pca_cell_df = data.matrix(Pagwas$pca_cell_df),
merge_scexpr = Pagwas$merge_scexpr,
snp_gene_df = Pagwas$snp_gene_df,
rawPathway_list = Pagwas$rawPathway_list
)
# Pathway_lm_results[[pathway]]<- Pa_Pagwas_perform_regression(pa_block=pa_block)
Pathway_ld_gwas_data[[pathway]] <- pa_block
}
setTxtProgressBar(pb, which(names(Pachrom_block_list) == pathway) / length(names(Pachrom_block_list)))
}
close(pb)
pathway
Pa_chrom_block <- Pachrom_block_list[[pathway]]
Pa_chrom_data <- lapply(names(Pa_chrom_block), function(chrom) {
chrom_block <- Pa_chrom_block[[chrom]]
ld_data <- chrom_ld[[chrom]]
data.table::setkey(ld_data, SNP_A) # just in case
if (!(chrom %in% names(chrom_gwas_list))) {
warning(paste(chrom, " for gwas is missing, could be a problem!", sep = ""))
return(NULL)
}
if (is.null(chrom_gwas_list[[chrom]])) {
warning(paste(chrom, " data missing, could be a problem", sep = ""))
return(NULL)
}
rsids <- Pagwas$snp_gene_df[which(Pagwas$snp_gene_df$label %in%
chrom_block$label), c("rsid", "label")]
c2 <- chrom_gwas_list[[chrom]]
rsids_gwas <- suppressMessages(dplyr::inner_join(rsids, c2))
if (is.null(nrow(rsids_gwas))) {
return(NULL)
}
beta_squared <- rsids_gwas$beta^2
# again, pretty sure this is binarize data table lookup
sub_ld <- ld_data[.(as.vector(rsids_gwas$rsid)), nomatch = 0L]
return(list(rsids_gwas, beta_squared, sub_ld, chrom_block))
})
Pa_chrom_data
pa_block <- list()
pa_block$block_info <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[4]]
))
pa_block$snps <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[1]]
))
pa_block$y <- unlist(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[2]]
))
pa_block$ld_data <- bigreadr::rbind_df(lapply(
seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[3]]
))
rsid_x <- intersect(pa_block$snps$rsid, unique(unlist(pa_block$ld_data[, 1:2])))
pa_block$ld_data <- as.data.frame(pa_block$ld_data[pa_block$ld_data$SNP_A
%in% rsid_x & pa_block$ld_data$SNP_B
%in% rsid_x, ])
rm(Pa_chrom_data)
nrow(pa_block$ld_data)
ld_matrix <- diag(1, nrow = nrow(pa_block$snps))
pa_block$n_snps <- nrow(pa_block$snps)
pa_block$ld_matrix_squared <- ld_matrix * ld_matrix
get_Pathway_sclm(
pa_block = pa_block,
pca_scCell_mat = Pagwas$pca_scCell_mat,
data_mat = Pagwas$data_mat,
rawPathway_list = Pagwas$rawPathway_list,
snp_gene_df = Pagwas$snp_gene_df,
ncores = ncores
)
pca_scCell_mat = Pagwas$pca_scCell_mat
data_mat = Pagwas$data_mat
rawPathway_list = Pagwas$rawPathway_list
snp_gene_df = Pagwas$snp_gene_df
pathway_snp <- unique(pa_block$block_info$pathway)
pathway_snp
pa_block$n_snps
mg <- intersect(rawPathway_list[[pathway]], rownames(data_mat))
mg
x2 <- biganalytics::apply(data_mat[mg, ], 2, function(ge) {
if (sum(ge) == 0) {
return(rep(0, length(ge)))
} else {
return(ge / sum(ge))
}
})
rownames(x2) <- mg
x2
x2 <- as(x2, "dgCMatrix")
x2 <- x2[pa_block$snps$label, ]
pa_block$n_snps <- nrow(pa_block$snps)
rownames(snp_gene_df) <- snp_gene_df$rsid
pa_block$x <- as(pa_block$ld_matrix_squared %*% x2, "dgCMatrix")
pa_block$include_in_inference <- T
noise_per_snp <- pa_block$snps$se**2
if (!is.null(pa_block$x)) {
if (pa_block$n_snps > 2) {
na_elements <- is.na(pa_block$y) | apply(pa_block$x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
results <- scParameter_regression(
Pagwas_x = pa_block$x[!na_elements, ],
Pagwas_y = pa_block$y[!na_elements],
noise_per_snp = noise_per_snp[!na_elements],
ncores = ncores
)
results[is.na(results)] <- 0
names(results) <- colnames(data_mat)
# Pathway_cell_regression<-results
} else {
results <- NULL
}
} else {
results <- NULL
}
devtools::load_all(".")
get_Pathway_sclm(
pathway=pathway,
pa_block = pa_block,
pca_scCell_mat = Pagwas$pca_scCell_mat,
data_mat = Pagwas$data_mat,
rawPathway_list = Pagwas$rawPathway_list,
snp_gene_df = Pagwas$snp_gene_df,
ncores = ncores
)
get_Pathway_sclm
pathway
get_Pathway_sclm(
pathway=pathway,
pa_block = pa_block,
pca_scCell_mat = Pagwas$pca_scCell_mat,
data_mat = Pagwas$data_mat,
rawPathway_list = Pagwas$rawPathway_list,
snp_gene_df = Pagwas$snp_gene_df,
ncores = ncores
)
pa_block
devtools::load_all(".")
get_Pathway_sclm(
pathway=pathway,
path_block = pa_block,
pca_scCell_mat = Pagwas$pca_scCell_mat,
data_mat = Pagwas$data_mat,
rawPathway_list = Pagwas$rawPathway_list,
snp_gene_df = Pagwas$snp_gene_df,
ncores = ncores
)
devtools::document()
devtools::load_all(".")
get_Pathway_sclm(
pathway=pathway,
path_block = pa_block,
pca_scCell_mat = Pagwas$pca_scCell_mat,
data_mat = Pagwas$data_mat,
rawPathway_list = Pagwas$rawPathway_list,
snp_gene_df = Pagwas$snp_gene_df,
ncores = ncores
)
pa_block
path_block = pa_block
path_block$n_snps
library(scPagwas)
devtools::load_all(".")
suppressMessages(library(Seurat))
suppressMessages(library("dplyr"))
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#gene annotation files.
data(block_annotation)
#LD data
data(chrom_ld)
Pagwas = NULL;
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas");
output.prefix="test";
output.dirs="scPagwastest_output";
add_eqtls="OnlyTSS";
eqtls_files=NULL;
eqtls_cols=c("rs_id_dbSNP151_GRCh38p7","variant_pos","tss_distance","gene_chr", "gene_start", "gene_end","gene_name","pval_beta");
block_annotation = block_annotation;
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas");
assay="RNA";
Pathway_list=Genes_by_pathway_kegg;
chrom_ld=chrom_ld;
split_n=1;
marg=10000;
singlecell=T;
celltype=T;
n_topgenes=1000;
maf_filter = 0.01;
min_clustercells=10;
min.pathway.size=5;
max.pathway.size=300;
iters=200;
param.file=T;
remove_outlier=T;
log.file='scPagwas.run.log';
ncores=1;
Pagwas <- list()
Single_data <- readRDS(Single_data)
Pagwas <- Single_data_input(
Pagwas = Pagwas,
assay = assay,
# nfeatures =nfeatures,
Single_data = Single_data,
Pathway_list = Pathway_list,
min_clustercells = min_clustercells
)
Single_data <- Single_data[, colnames(Pagwas$data_mat)]
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
suppressMessages(gwas_data <- bigreadr::fread2(gwas_data))
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = maf_filter
)
snp_gene_df <- Snp2Gene(snp = Pagwas$gwas_data, refGene = block_annotation, marg = marg)
snp_gene_df$slope <- rep(1, nrow(snp_gene_df))
Pagwas$snp_gene_df <- snp_gene_df[snp_gene_df$Disstance == "0", ]
Pagwas <- Pathway_annotation_input(
Pagwas = Pagwas,
block_annotation = block_annotation
)
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
split_n = split_n,
singlecell = singlecell,
celltype = celltype,
ncores = ncores
)
devtools::load_all(".")
ncores
split_n
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
split_n = split_n,
singlecell = singlecell,
celltype = celltype,
ncores = ncores
)
path_block$n_snps
library(ggplot2)
suppressMessages(library(Seurat))
suppressMessages(library("dplyr"))
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#gene annotation files.
data(block_annotation)
#LD data
data(chrom_ld)
#
#1.start to run the wrapper functions for preprogress.
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
output.prefix="test",
output.dirs="scPagwastest_output",
block_annotation = block_annotation,
assay="RNA",
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
singlecell=T,
seruat_return=T,
celltype=T,
ncores = 2,
split_n=1)
##------ Tue May 31 11:04:01 2022 ------##
##------ Tue May 31 11:04:06 2022 ------##
##------ Tue May 31 11:04:20 2022 ------##
