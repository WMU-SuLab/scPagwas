pcs$v <- NULL
pcs$scores <- as.matrix(t(scCounts[, lab] %*% pcs$rotation) - as.numeric((cm[lab] %*% pcs$rotation)))
cs <- unlist(lapply(seq_len(nrow(pcs$scores)), function(i) sign(cor(pcs$scores[i, ], colMeans(t(scCounts[, lab, drop = FALSE]) * abs(pcs$rotation[, i]))))))
pcs$scores <- pcs$scores * cs
pcs$rotation <- pcs$rotation * cs
rownames(pcs$rotation) <- colnames(scCounts)[lab]
return(list(xp = pcs))
}, n.cores = n.cores)
vdf <- data.frame(do.call(merge,all = TRUE, lapply(seq_along(papca), function(i) {
result <- tryCatch(
{
vars <- as.numeric((papca[[i]]$xp$d))
cbind(i = i, var = vars, n = papca[[i]]$n, npc = seq(seq_len(ncol(papca[[i]]$xp$rotation))))
},
error = function(e) {
return(NULL)
}
)
})))
vscore <- data.frame(do.call(merge,all = TRUE, lapply(seq_along(papca), function(i) {
papca[[i]]$xp$scores
})))
n.cells <- nrow(scCounts)
vdf$exp <- RMTstat::qWishartMax(0.5, n.cells, vdf$n, var = 1, lower.tail = FALSE)
vdf$var <- (vdf$var) / (vdf$exp)
df <- data.frame(name = names(papca)[vdf$i], score = vdf$var, stringsAsFactors = FALSE)
rownames(vscore) <- names(papca)[vdf$i]
colnames(vscore) <- rownames(scCounts)
return(list(df, vscore))
}
n.cores<-1
scPCAscore <- PathwayPCAtest(
Pathway_list = Pagwas$Pathway_list,
scCounts = GetAssayData(object = Single_data[, Idents(Single_data) %in% celltype], slot = "data"),
n.cores = n.cores
)
papply <- function(..., n.cores = detectCores()) {
if (n.cores > 1) {
parallel::mclapply(..., mc.cores = n.cores)
} else {
lapply(...)
}
}
scPCAscore <- PathwayPCAtest(
Pathway_list = Pagwas$Pathway_list,
scCounts = GetAssayData(object = Single_data[, Idents(Single_data) %in% celltype], slot = "data"),
n.cores = n.cores
)
PathwayPCAtest <- function(Pathway_list,
scCounts,
n.cores = 1) {
if (any(duplicated(rownames(scCounts)))) {
stop("Duplicate gene names are not allowed - please reduce")
}
if (any(duplicated(colnames(scCounts)))) {
stop("Duplicate cell names are not allowed - please reduce")
}
if (any(is.na(rownames(scCounts)))) {
stop("NA gene names are not allowed - please fix")
}
if (any(is.na(colnames(scCounts)))) {
stop("NA cell names are not allowed - please fix")
}
## filter pathway
nPcs <- 1
scCounts <- t(as.matrix(scCounts))
cm <- Matrix::colMeans(scCounts)
proper.gene.names <- colnames(scCounts)
###### calculate the pca for each pathway terms.
papca <- papply(Pathway_list, function(Pa_id) {
lab <- proper.gene.names %in% intersect(proper.gene.names, Pa_id)
pcs <- irlba::irlba(scCounts[, lab], nv = nPcs, nu = 0, center = cm[lab])
pcs$d <- pcs$d / sqrt(nrow(scCounts))
pcs$rotation <- pcs$v
pcs$v <- NULL
pcs$scores <- as.matrix(t(scCounts[, lab] %*% pcs$rotation) - as.numeric((cm[lab] %*% pcs$rotation)))
cs <- unlist(lapply(seq_len(nrow(pcs$scores)), function(i) sign(cor(pcs$scores[i, ], colMeans(t(scCounts[, lab, drop = FALSE]) * abs(pcs$rotation[, i]))))))
pcs$scores <- pcs$scores * cs
pcs$rotation <- pcs$rotation * cs
rownames(pcs$rotation) <- colnames(scCounts)[lab]
return(list(xp = pcs))
}, n.cores = n.cores)
vdf <- data.frame(do.call(reshape::merge_all, lapply(seq_along(papca), function(i) {
result <- tryCatch(
{
vars <- as.numeric((papca[[i]]$xp$d))
cbind(i = i, var = vars, n = papca[[i]]$n, npc = seq(seq_len(ncol(papca[[i]]$xp$rotation))))
},
error = function(e) {
return(NULL)
}
)
})))
vscore <- data.frame(do.call(reshape::merge_all, lapply(seq_along(papca), function(i) {
papca[[i]]$xp$scores
})))
n.cells <- nrow(scCounts)
vdf$exp <- RMTstat::qWishartMax(0.5, n.cells, vdf$n, var = 1, lower.tail = FALSE)
vdf$var <- (vdf$var) / (vdf$exp)
df <- data.frame(name = names(papca)[vdf$i], score = vdf$var, stringsAsFactors = FALSE)
rownames(vscore) <- names(papca)[vdf$i]
colnames(vscore) <- rownames(scCounts)
return(list(df, vscore))
}
scPCAscore <- PathwayPCAtest(
Pathway_list = Pagwas$Pathway_list,
scCounts = GetAssayData(object = Single_data[, Idents(Single_data) %in% celltype], slot = "data"),
n.cores = n.cores
)
PathwayPCAtest <- function(Pathway_list,
scCounts,
n.cores = 1) {
if (any(duplicated(rownames(scCounts)))) {
stop("Duplicate gene names are not allowed - please reduce")
}
if (any(duplicated(colnames(scCounts)))) {
stop("Duplicate cell names are not allowed - please reduce")
}
if (any(is.na(rownames(scCounts)))) {
stop("NA gene names are not allowed - please fix")
}
if (any(is.na(colnames(scCounts)))) {
stop("NA cell names are not allowed - please fix")
}
## filter pathway
nPcs <- 1
scCounts <- t(as.matrix(scCounts))
cm <- Matrix::colMeans(scCounts)
proper.gene.names <- colnames(scCounts)
###### calculate the pca for each pathway terms.
papca <- papply(Pathway_list, function(Pa_id) {
lab <- proper.gene.names %in% intersect(proper.gene.names, Pa_id)
pcs <- irlba::irlba(scCounts[, lab], nv = nPcs, nu = 0, center = cm[lab])
pcs$d <- pcs$d / sqrt(nrow(scCounts))
pcs$rotation <- pcs$v
pcs$v <- NULL
pcs$scores <- as.matrix(t(scCounts[, lab] %*% pcs$rotation) - as.numeric((cm[lab] %*% pcs$rotation)))
cs <- unlist(lapply(seq_len(nrow(pcs$scores)), function(i) sign(cor(pcs$scores[i, ], colMeans(t(scCounts[, lab, drop = FALSE]) * abs(pcs$rotation[, i]))))))
pcs$scores <- pcs$scores * cs
pcs$rotation <- pcs$rotation * cs
rownames(pcs$rotation) <- colnames(scCounts)[lab]
return(list(xp = pcs))
}, n.cores = n.cores)
vdf <- data.frame(do.call(rbind, lapply(seq_along(papca), function(i) {
result <- tryCatch(
{
vars <- as.numeric((papca[[i]]$xp$d))
cbind(i = i, var = vars, n = papca[[i]]$n, npc = seq(seq_len(ncol(papca[[i]]$xp$rotation))))
},
error = function(e) {
return(NULL)
}
)
})))
vscore <- data.frame(do.call(rbind, lapply(seq_along(papca), function(i) {
papca[[i]]$xp$scores
})))
n.cells <- nrow(scCounts)
vdf$exp <- RMTstat::qWishartMax(0.5, n.cells, vdf$n, var = 1, lower.tail = FALSE)
vdf$var <- (vdf$var) / (vdf$exp)
df <- data.frame(name = names(papca)[vdf$i], score = vdf$var, stringsAsFactors = FALSE)
rownames(vscore) <- names(papca)[vdf$i]
colnames(vscore) <- rownames(scCounts)
return(list(df, vscore))
}
devtools::document()
devtools::document()
library(Seurat)
library(scPagwas)
library(SOAR)
## basic example code
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#Input GWAS summry data(data.frame).
data(GWAS_summ_example)
#gene annotation files.
data(gtf_df)
#Single cell example data.
data(scRNAexample)
#LD data
data(chrom_ld)
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
scPagwasSession="scPagwasSession")
##------ Wed Mar 16 20:20:56 2022 ------##
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
scPagwasSession="scPagwasSession")
##------ Wed Mar 16 20:22:06 2022 ------##
data(Genes_by_pathway_kegg)
#Input GWAS summry data(data.frame).
data(GWAS_summ_example)
#gene annotation files.
data(gtf_df)
#Single cell example data.
data(scRNAexample)
#LD data
data(chrom_ld)
gwas_data = GWAS_summ_example
Pagwas <- GWAS_summary_input(Pagwas=NULL,
gwas_data=gwas_data)
head
head(gwas_data)
class(gwas_data)[1] != "data.frame"
necessary_cols <- c("chrom", "pos", "rsid", "beta", "se", "maf")
# try to control for maf
class(gwas_data$pos)[1]
maf_filter = 0.01
gwas_z_filter = -1
gwas_data$chrom <- paste0("chr", gwas_data$chrom)
!grepl("chr", gwas_data$chrom[1])
gwas_data$chrom[1]
library(Seurat)
library(scPagwas)
library(SOAR)
## basic example code
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#Input GWAS summry data(data.frame).
data(GWAS_summ_example)
#gene annotation files.
data(gtf_df)
#Single cell example data.
data(scRNAexample)
#LD data
data(chrom_ld)
##create a session for internal storage
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
scPagwasSession="scPagwasSession")
##------ Wed Mar 16 20:28:18 2022 ------##
gwas_data$chrom
paste0("chr", gwas_data$chrom)
gwas_data$chrom <- paste0("chr", gwas_data$chrom)
devtools::document()
library(scPagwas)
library(Seurat)
library(scPagwas)
library(SOAR)
library("dplyr")
## basic example code
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#Input GWAS summry data(data.frame).
data(GWAS_summ_example)
#gene annotation files.
data(gtf_df)
#Single cell example data.
data(scRNAexample)
#LD data
data(chrom_ld)
##create a session for internal storage
# Sys.setenv(R_LOCAL_CACHE="scPagwasSession")
#1.start to run the wrapper functions for preprogress.
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
scPagwasSession="scPagwasSession")
##------ Wed Mar 16 21:33:15 2022 ------##
##------ Wed Mar 16 21:33:16 2022 ------##
##------ Wed Mar 16 21:33:23 2022 ------##
##------ Wed Mar 16 21:33:41 2022 ------##
##------ Wed Mar 16 21:33:42 2022 ------##
##------ Wed Mar 16 21:33:43 2022 ------##
message(paste(utils::timestamp(quiet = T), ' ******* 7th: link_pwpca_block function start!! ********',sep = ''))
##------ Wed Mar 16 21:34:16 2022 ------##
#timestart<-Sys.time()
Pagwas <- link_pwpca_block(Pagwas)
message(paste(utils::timestamp(quiet = T), ' ******* 8th: Pagwas_perform_regression function start!! ********',sep = ''))
##------ Wed Mar 16 21:34:20 2022 ------##
Pagwas <- Pagwas_perform_regression(Pagwas, iters = 200,n.cores=1)
Bootstrap_P_Barplot(Pagwas=Pagwas,title = "Test scPagwas")
message(paste(utils::timestamp(quiet = T), ' ******* 7th: link_scCell_pwpca_block function start!! ********',sep = ''))
##------ Wed Mar 16 21:34:27 2022 ------##
Pagwas <- link_scCell_pwpca_block(Pagwas)
message(paste(utils::timestamp(quiet = T), ' ******* 7th: link_scCell_pwpca_block function start!! ********',sep = ''))
##------ Wed Mar 16 21:39:21 2022 ------##
Pagwas <- link_scCell_pwpca_block(Pagwas)
message(paste(utils::timestamp(quiet = T), ' ******* 8th: scPagwas_perform_score function start!! ********',sep = ''))
##------ Wed Mar 16 21:39:33 2022 ------##
Pagwas <- scPagwas_perform_score(Pagwas)
scPagwas_Visualization(scPagwas_score = Pagwas$scPagwas_score,
Single_data = scRNAexample,
Reduction = TRUE,
assay = "SCT",
cellpercent = 0.1,
filename = "scPagwas_testFigure",
FigureType = "tsne",
width = 7,
height = 7,
lowColor = "#FFBC80", highColor = "#FC4F4F",
size = 1,
title = "scPagwas_score")
message(paste(utils::timestamp(quiet = T), ' ******* 9th:scPagwas_perform_regression function start!! ********',sep = ''))
##------ Wed Mar 16 21:40:16 2022 ------##
Pagwas <- scPagwas_perform_regression(Pagwas)
devtools::document()
library(scPagwas)
library(Seurat)
library(scPagwas)
library(SOAR)
library("dplyr")
## basic example code
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#Input GWAS summry data(data.frame).
data(GWAS_summ_example)
#gene annotation files.
data(gtf_df)
#Single cell example data.
data(scRNAexample)
#LD data
data(chrom_ld)
##create a session for internal storage
# Sys.setenv(R_LOCAL_CACHE="scPagwasSession")
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
scPagwasSession="scPagwasSession")
##------ Thu Mar 17 10:05:12 2022 ------##
##------ Thu Mar 17 10:05:13 2022 ------##
##------ Thu Mar 17 10:05:22 2022 ------##
##------ Thu Mar 17 10:05:41 2022 ------##
##------ Thu Mar 17 10:05:41 2022 ------##
##------ Thu Mar 17 10:05:43 2022 ------##
Pathway_ld_gwas_data[[1]]
Pagwas <- link_pwpca_block(Pagwas)
Pathway_ld_gwas_data[[1]]
class(Pathway_ld_gwas_data[[1]]$x)
class(Pathway_ld_gwas_data[[1]]$y\)
class(Pathway_ld_gwas_data[[1]]$y)
class(Pathway_ld_gwas_data[[1]]$ld_matrix_squared)
Pagwas <- link_scCell_pwpca_block(Pagwas)
class(Pathway_ld_gwas_data[[1]]$x)
return(Pagwas)
devtools::document()
library(Seurat)
library(scPagwas)
library(SOAR)
library("dplyr")
## basic example code
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#Input GWAS summry data(data.frame).
data(GWAS_summ_example)
#gene annotation files.
data(gtf_df)
#Single cell example data.
data(scRNAexample)
#LD data
data(chrom_ld)
##create a session for internal storage
# Sys.setenv(R_LOCAL_CACHE="scPagwasSession")
#1.start to run the wrapper functions for preprogress.
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
scPagwasSession="scPagwasSession")
##------ Thu Mar 17 10:26:02 2022 ------##
##------ Thu Mar 17 10:26:05 2022 ------##
##------ Thu Mar 17 10:26:12 2022 ------##
##------ Thu Mar 17 10:26:28 2022 ------##
##------ Thu Mar 17 10:26:29 2022 ------##
##------ Thu Mar 17 10:26:30 2022 ------##
Pagwas <- link_pwpca_block(Pagwas)
Pagwas <- Pagwas_perform_regression(Pagwas, iters = 200,n.cores=1)
message(paste(utils::timestamp(quiet = T), ' ******* 7th: link_scCell_pwpca_block function start!! ********',sep = ''))
##------ Thu Mar 17 10:28:02 2022 ------##
Pagwas <- link_scCell_pwpca_block(Pagwas)
message(paste(utils::timestamp(quiet = T), ' ******* 8th: scPagwas_perform_score function start!! ********',sep = ''))
##------ Thu Mar 17 10:28:11 2022 ------##
Pagwas <- scPagwas_perform_score(Pagwas)
scPagwas_Visualization(scPagwas_score = Pagwas$scPagwas_score,
Single_data = scRNAexample,
Reduction = TRUE,
assay = "SCT",
cellpercent = 0.1,
filename = "scPagwas_testFigure",
FigureType = "tsne",
width = 7,
height = 7,
lowColor = "#FFBC80", highColor = "#FC4F4F",
size = 1,
title = "scPagwas_score")
Bootstrap_estimate_Plot(Pagwas=Pagwas,figurenames = NULL)
Bootstrap_P_Barplot(Pagwas=Pagwas,title = "Test scPagwas")
rowSums
library(Seurat)
library(scPagwas)
library(SOAR)
library("dplyr")
## basic example code
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#Input GWAS summry data(data.frame).
data(GWAS_summ_example)
#gene annotation files.
data(gtf_df)
#Single cell example data.
data(scRNAexample)
#LD data
data(chrom_ld)
##create a session for internal storage
# Sys.setenv(R_LOCAL_CACHE="scPagwasSession")
#1.start to run the wrapper functions for preprogress.
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
scPagwasSession="scPagwasSession")
##------ Thu Mar 17 13:09:24 2022 ------##
##------ Thu Mar 17 13:09:26 2022 ------##
##------ Thu Mar 17 13:09:33 2022 ------##
##------ Thu Mar 17 13:09:48 2022 ------##
##------ Thu Mar 17 13:09:49 2022 ------##
##------ Thu Mar 17 13:09:50 2022 ------##
message(paste(utils::timestamp(quiet = T), ' ******* 7th: link_pwpca_block function start!! ********',sep = ''))
##------ Thu Mar 17 13:10:17 2022 ------##
#timestart<-Sys.time()
Pagwas <- link_pwpca_block(Pagwas)
message(paste(utils::timestamp(quiet = T), ' ******* 8th: Pagwas_perform_regression function start!! ********',sep = ''))
##------ Thu Mar 17 13:10:19 2022 ------##
Pagwas <- Pagwas_perform_regression(Pagwas, iters = 200,n.cores=1)
Bootstrap_P_Barplot(Pagwas=Pagwas,title = "Test scPagwas")
Bootstrap_estimate_Plot(Pagwas=Pagwas,figurenames = NULL)
message(paste(utils::timestamp(quiet = T), ' ******* 7th: link_scCell_pwpca_block function start!! ********',sep = ''))
##------ Thu Mar 17 13:10:30 2022 ------##
Pagwas <- link_scCell_pwpca_block(Pagwas)
message(paste(utils::timestamp(quiet = T), ' ******* 8th: scPagwas_perform_score function start!! ********',sep = ''))
##------ Thu Mar 17 13:10:39 2022 ------##
Pagwas <- scPagwas_perform_score(Pagwas)
library(Seurat)
library(scPagwas)
library(SOAR)
library("dplyr")
## basic example code
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#Input GWAS summry data(data.frame).
data(GWAS_summ_example)
#gene annotation files.
data(gtf_df)
#Single cell example data.
data(scRNAexample)
#LD data
data(chrom_ld)
##create a session for internal storage
# Sys.setenv(R_LOCAL_CACHE="scPagwasSession")
#1.start to run the wrapper functions for preprogress.
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
scPagwasSession="scPagwasSession")
##------ Thu Mar 17 14:39:35 2022 ------##
##------ Thu Mar 17 14:39:37 2022 ------##
##------ Thu Mar 17 14:39:43 2022 ------##
##------ Thu Mar 17 14:39:56 2022 ------##
##------ Thu Mar 17 14:39:57 2022 ------##
##------ Thu Mar 17 14:39:58 2022 ------##
Pagwas <- link_pwpca_block(Pagwas)
function start!! ********',sep = ''))
Pagwas <- Pagwas_perform_regression(Pagwas, iters = 200,n.cores=1)
Pagwas <- link_scCell_pwpca_block(Pagwas)
names(Pagwas)
library(WGCNA)
install.packages(WGCNA)
install.packages("WGCNA")
BiocManager::install("WGCNA")
library("tidygraph")
library(ggraph)
