#   }
# message(paste(' - starting blocks on pathway: ', pa, sep = ''))
Pa_chrom_block <- Pachrom_block_list[[pathway]]
Pa_chrom_data <- lapply(names(Pa_chrom_block), function(chrom) {
chrom_block <- Pa_chrom_block[[chrom]]
ld_data <- chrom_ld[[chrom]]
data.table::setkey(ld_data, SNP_A) # just in case
if (!(chrom %in% names(chrom_gwas_list))) {
warning(paste(chrom, " for gwas is missing, could be a problem!", sep = ""))
return(NULL)
}
if (is.null(chrom_gwas_list[[chrom]])) {
warning(paste(chrom, " data missing, could be a problem", sep = ""))
return(NULL)
}
rsids <- Pagwas$snp_gene_df[which(Pagwas$snp_gene_df$label %in%
chrom_block$label), c("rsid", "label")]
c2 <- chrom_gwas_list[[chrom]]
rsids_gwas <- suppressMessages(dplyr::inner_join(rsids, c2))
if (is.null(nrow(rsids_gwas))) {
return(NULL)
}
beta_squared <- rsids_gwas$beta^2
# again, pretty sure this is binarize data table lookup
sub_ld <- ld_data[.(as.vector(rsids_gwas$rsid)), nomatch = 0L]
return(list(rsids_gwas, beta_squared, sub_ld, chrom_block))
})
#cbind_df代替 rbind_df(list_df)
snp_data <- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[1]]))
# message(paste0("snp is ",nrow(snp_data)))
sub_ld <- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[3]]))
rsid_x <- intersect(snp_data$rsid, unique(unlist(sub_ld[, 1:2])))
sub_ld <- as.data.frame(sub_ld[sub_ld$SNP_A
%in% rsid_x & sub_ld$SNP_B
%in% rsid_x, ])
# message(paste0("ld is ",nrow(sub_ld)))
if (nrow(sub_ld) == 0) {
ld_matrix <- diag(1, nrow = nrow(snp_data))
} else {
ld_matrix <- make_ld_matrix(all_snps = snp_data$rsid, ld_data = sub_ld)
}
block_info<- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[4]]))
pa_block<-list(
block_info = block_info,
snps = snp_data,
ld_data = sub_ld,
n_snps = nrow(snp_data),
ld_matrix_squared = ld_matrix * ld_matrix,
y = unlist(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[2]]))
)
##compute the single cell result
if(!is.null(split_n) & split_n>1 & class(split_n)== "numeric"){
a<-ncol(Pagwas$pca_scCell_mat)
for (ai in 1:10) {
#print(ai)
if(a%%split_n==0) break;
split_n <- split_n+1
}
la<-gl(split_n,a/split_n,length=a)
Pathway_sclm_part<-list()
for(i in 1:split_n){
Pathway_sclm_part[[i]] <- get_Pathway_sclm(pa_block=pa_block,
pca_scCell_mat=Pagwas$pca_scCell_mat[,which(la==i)],
data_mat=Pagwas$data_mat[,which(la==i)],
rawPathway_list=Pagwas$rawPathway_list,
snp_gene_df=Pagwas$snp_gene_df,
n.cores=n.cores )
}
Pathway_sclm_results[[pathway]] <-Reduce(function(dtf1, dtf2) rbind(dtf1, dtf2),Pathway_sclm_part)
}else{
Pathway_sclm_results[[pathway]]<-get_Pathway_sclm(pa_block=pa_block,
pca_scCell_mat=Pagwas$pca_scCell_mat,
data_mat=Pagwas$data_mat,
rawPathway_list=Pagwas$rawPathway_list,
snp_gene_df=Pagwas$snp_gene_df)
}
setTxtProgressBar(pb, which(names(Pachrom_block_list) == pathway) / length(names(Pachrom_block_list)))
#return(Pathway_sclm_results)
# }, n.cores = n.cores)
}
Pathway_sclm_results <- Pathway_sclm_results[!sapply(Pathway_sclm_results, is.null)]
Pathway_sclm_results <- data.matrix(as.data.frame(Pathway_sclm_results))
rownames(Pathway_sclm_results)<-colnames(Pagwas$pca_scCell_mat)
rownames(Pathway_sclm_results)
Pathway_sclm_results<-list()
#Pathway_ld_gwas_data <- papply(names(Pachrom_block_list), function(pathway) {
for (pathway in names(Pachrom_block_list)) {
#   }
# message(paste(' - starting blocks on pathway: ', pa, sep = ''))
Pa_chrom_block <- Pachrom_block_list[[pathway]]
Pa_chrom_data <- lapply(names(Pa_chrom_block), function(chrom) {
chrom_block <- Pa_chrom_block[[chrom]]
ld_data <- chrom_ld[[chrom]]
data.table::setkey(ld_data, SNP_A) # just in case
if (!(chrom %in% names(chrom_gwas_list))) {
warning(paste(chrom, " for gwas is missing, could be a problem!", sep = ""))
return(NULL)
}
if (is.null(chrom_gwas_list[[chrom]])) {
warning(paste(chrom, " data missing, could be a problem", sep = ""))
return(NULL)
}
rsids <- Pagwas$snp_gene_df[which(Pagwas$snp_gene_df$label %in%
chrom_block$label), c("rsid", "label")]
c2 <- chrom_gwas_list[[chrom]]
rsids_gwas <- suppressMessages(dplyr::inner_join(rsids, c2))
if (is.null(nrow(rsids_gwas))) {
return(NULL)
}
beta_squared <- rsids_gwas$beta^2
# again, pretty sure this is binarize data table lookup
sub_ld <- ld_data[.(as.vector(rsids_gwas$rsid)), nomatch = 0L]
return(list(rsids_gwas, beta_squared, sub_ld, chrom_block))
})
#cbind_df代替 rbind_df(list_df)
snp_data <- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[1]]))
# message(paste0("snp is ",nrow(snp_data)))
sub_ld <- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[3]]))
rsid_x <- intersect(snp_data$rsid, unique(unlist(sub_ld[, 1:2])))
sub_ld <- as.data.frame(sub_ld[sub_ld$SNP_A
%in% rsid_x & sub_ld$SNP_B
%in% rsid_x, ])
# message(paste0("ld is ",nrow(sub_ld)))
if (nrow(sub_ld) == 0) {
ld_matrix <- diag(1, nrow = nrow(snp_data))
} else {
ld_matrix <- make_ld_matrix(all_snps = snp_data$rsid, ld_data = sub_ld)
}
block_info<- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[4]]))
pa_block<-list(
block_info = block_info,
snps = snp_data,
ld_data = sub_ld,
n_snps = nrow(snp_data),
ld_matrix_squared = ld_matrix * ld_matrix,
y = unlist(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[2]]))
)
##compute the single cell result
if(!is.null(split_n) & split_n>1 & class(split_n)== "numeric"){
a<-ncol(Pagwas$pca_scCell_mat)
for (ai in 1:10) {
#print(ai)
if(a%%split_n==0) break;
split_n <- split_n+1
}
la<-gl(split_n,a/split_n,length=a)
Pathway_sclm_part<-list()
for(i in 1:split_n){
Pathway_sclm_part[[i]] <- get_Pathway_sclm(pa_block=pa_block,
pca_scCell_mat=Pagwas$pca_scCell_mat[,which(la==i)],
data_mat=Pagwas$data_mat[,which(la==i)],
rawPathway_list=Pagwas$rawPathway_list,
snp_gene_df=Pagwas$snp_gene_df,
n.cores=n.cores )
}
Pathway_sclm_results[[pathway]] <- Reduce(function(dtf1, dtf2) rbind(dtf1, dtf2),Pathway_sclm_part)
}else{
Pathway_sclm_results[[pathway]]<-get_Pathway_sclm(pa_block=pa_block,
pca_scCell_mat=Pagwas$pca_scCell_mat,
data_mat=Pagwas$data_mat,
rawPathway_list=Pagwas$rawPathway_list,
snp_gene_df=Pagwas$snp_gene_df)
}
setTxtProgressBar(pb, which(names(Pachrom_block_list) == pathway) / length(names(Pachrom_block_list)))
#return(Pathway_sclm_results)
# }, n.cores = n.cores)
}
length(Pathway_sclm_results)
class(Pathway_sclm_results[[1]])
Pathway_sclm_results[[1]]
pathway<-names(Pachrom_block_list)[1]
pathway
Pa_chrom_block <- Pachrom_block_list[[pathway]]
Pa_chrom_data <- lapply(names(Pa_chrom_block), function(chrom) {
chrom_block <- Pa_chrom_block[[chrom]]
ld_data <- chrom_ld[[chrom]]
data.table::setkey(ld_data, SNP_A) # just in case
if (!(chrom %in% names(chrom_gwas_list))) {
warning(paste(chrom, " for gwas is missing, could be a problem!", sep = ""))
return(NULL)
}
if (is.null(chrom_gwas_list[[chrom]])) {
warning(paste(chrom, " data missing, could be a problem", sep = ""))
return(NULL)
}
rsids <- Pagwas$snp_gene_df[which(Pagwas$snp_gene_df$label %in%
chrom_block$label), c("rsid", "label")]
c2 <- chrom_gwas_list[[chrom]]
rsids_gwas <- suppressMessages(dplyr::inner_join(rsids, c2))
if (is.null(nrow(rsids_gwas))) {
return(NULL)
}
beta_squared <- rsids_gwas$beta^2
# again, pretty sure this is binarize data table lookup
sub_ld <- ld_data[.(as.vector(rsids_gwas$rsid)), nomatch = 0L]
return(list(rsids_gwas, beta_squared, sub_ld, chrom_block))
})
#cbind_df代替 rbind_df(list_df)
snp_data <- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[1]]))
# message(paste0("snp is ",nrow(snp_data)))
sub_ld <- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[3]]))
rsid_x <- intersect(snp_data$rsid, unique(unlist(sub_ld[, 1:2])))
sub_ld <- as.data.frame(sub_ld[sub_ld$SNP_A
%in% rsid_x & sub_ld$SNP_B
%in% rsid_x, ])
# message(paste0("ld is ",nrow(sub_ld)))
if (nrow(sub_ld) == 0) {
ld_matrix <- diag(1, nrow = nrow(snp_data))
} else {
ld_matrix <- make_ld_matrix(all_snps = snp_data$rsid, ld_data = sub_ld)
}
block_info<- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[4]]))
pa_block<-list(
block_info = block_info,
snps = snp_data,
ld_data = sub_ld,
n_snps = nrow(snp_data),
ld_matrix_squared = ld_matrix * ld_matrix,
y = unlist(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[2]]))
)
pa_block
split_n
a<-ncol(Pagwas$pca_scCell_mat)
for (ai in 1:10) {
#print(ai)
if(a%%split_n==0) break;
split_n <- split_n+1
}
split_n
la<-gl(split_n,a/split_n,length=a)
Pathway_sclm_part<-list()
for(i in 1:split_n){
Pathway_sclm_part[[i]] <- get_Pathway_sclm(pa_block=pa_block,
pca_scCell_mat=Pagwas$pca_scCell_mat[,which(la==i)],
data_mat=Pagwas$data_mat[,which(la==i)],
rawPathway_list=Pagwas$rawPathway_list,
snp_gene_df=Pagwas$snp_gene_df,
n.cores=n.cores )
}
Pathway_sclm_part
get_Pathway_sclm<-function(pa_block,
pca_scCell_mat,
data_mat,
rawPathway_list,
snp_gene_df,
n.cores=1 ){
#pb <- txtProgressBar(style = 3)
#paths<-names(Pathway_ld_gwas_data)
#for (pa_block in Pathway_ld_gwas_data) {
# }
#Pathway_sclm_results <- papply(Pathway_ld_gwas_data, function(pa_block) {
pathway <- unique(pa_block$block_info$pathway)
x <- matrix(pca_scCell_mat[pathway, ],nrow = 1)
rownames(x)<-pathway
if (pa_block$n_snps == 0) {
pa_block$include_in_inference <- F
pa_block$x <- NULL # to make sure we totally replace previous stuffs
return(pa_block)
}
mg <- intersect(rawPathway_list[[pathway]],rownames(data_mat))
if (length(mg) == 1) {
x2<-matrix(data_mat[mg, ],nrow=1)
x2<- x2/(x2+0.0001)
rownames(x2)<-mg
}else{
x2 <-  biganalytics::apply(data_mat[mg, ],2,function(ge){
if (sum(ge) == 0) {
return(rep(0,length(ge)))
}else{
return(ge / sum(ge))
}
})
rownames(x2)<-mg
}
x2 <- as(x2,"dgCMatrix")
if (pa_block$n_snps > 1) {
x2 <-x2[pa_block$snps$label, ]
pa_block$n_snps <- nrow(pa_block$snps)
x <- x[rep(1, pa_block$n_snps), ]
rownames(x) <- pa_block$snps$rsid
rownames(snp_gene_df) <- snp_gene_df$rsid
x <- x * snp_gene_df[pa_block$snps$rsid, "slope"]
x2 <- x2 * x
} else {
x2 <- matrix(x2[pa_block$snps$label, ], nrow = 1)
rownames(x2) <- pa_block$snps$label
pa_block$n_snps <- nrow(pa_block$snps)
x <- matrix(x[rep(1, pa_block$n_snps), ], nrow = 1)
rownames(x) <- pa_block$snps$rsid
rownames(snp_gene_df) <- snp_gene_df$rsid
x <- matrix(as.numeric(x) * as.numeric(snp_gene_df[pa_block$snps$rsid, "slope"]), nrow = 1)
x2 <- matrix(as.numeric(x2) * as.numeric(x), nrow = 1)
x2 <- as(x2,"dgCMatrix")
}
pa_block$x<- as(pa_block$ld_matrix_squared %*% x2,"dgCMatrix")
pa_block$include_in_inference <- T
noise_per_snp <- pa_block$snps$se**2
if (!is.null(pa_block$x)) {
if (pa_block$n_snps > 2) {
na_elements <- is.na(pa_block$y) | apply(pa_block$x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
results <- scParameter_regression(Pagwas_x = pa_block$x[!na_elements,],
Pagwas_y = pa_block$y[!na_elements],
noise_per_snp = noise_per_snp[!na_elements],
n.cores = n.cores
)
results[is.na(results)] <- 0
names(results)<-colnames(data_mat)
#Pathway_cell_regression<-results
}else{
results<-NULL
}
} else {
results<-NULL
}
#setTxtProgressBar(pb, which(paths == pathway) / length(paths))
#return(results)
#}, n.cores = n.cores)
#close(pb)
# names(Pathway_sclm_results) <- paths
# Pathway_sclm_results <- Pathway_sclm_results[!sapply(Pathway_sclm_results, is.null)]
# Pathway_sclm_results <- data.matrix(as.data.frame(Pathway_sclm_results))
# rownames(Pathway_sclm_results)<-colnames(pca_scCell_mat)
return(results)
}
source("E:/RPakage/scPagwas/R/Link_pathway_blocks_gwas.R", encoding = 'UTF-8', echo=TRUE)
la<-gl(split_n,a/split_n,length=a)
Pathway_sclm_part<-list()
for(i in 1:split_n){
Pathway_sclm_part[[i]] <- get_Pathway_sclm(pa_block=pa_block,
pca_scCell_mat=Pagwas$pca_scCell_mat[,which(la==i)],
data_mat=Pagwas$data_mat[,which(la==i)],
rawPathway_list=Pagwas$rawPathway_list,
snp_gene_df=Pagwas$snp_gene_df,
n.cores=n.cores )
}
Pathway_sclm_part
unlist(Pathway_sclm_part)
length(unlist(Pathway_sclm_part))
colnames(Pagwas$pca_scCell_mat)
unlist(Pathway_sclm_part)[colnames(Pagwas$pca_scCell_mat)]
Pathway_sclm_results<-list()
#Pathway_ld_gwas_data <- papply(names(Pachrom_block_list), function(pathway) {
for (pathway in names(Pachrom_block_list)) {
#   }
# message(paste(' - starting blocks on pathway: ', pa, sep = ''))
Pa_chrom_block <- Pachrom_block_list[[pathway]]
Pa_chrom_data <- lapply(names(Pa_chrom_block), function(chrom) {
chrom_block <- Pa_chrom_block[[chrom]]
ld_data <- chrom_ld[[chrom]]
data.table::setkey(ld_data, SNP_A) # just in case
if (!(chrom %in% names(chrom_gwas_list))) {
warning(paste(chrom, " for gwas is missing, could be a problem!", sep = ""))
return(NULL)
}
if (is.null(chrom_gwas_list[[chrom]])) {
warning(paste(chrom, " data missing, could be a problem", sep = ""))
return(NULL)
}
rsids <- Pagwas$snp_gene_df[which(Pagwas$snp_gene_df$label %in%
chrom_block$label), c("rsid", "label")]
c2 <- chrom_gwas_list[[chrom]]
rsids_gwas <- suppressMessages(dplyr::inner_join(rsids, c2))
if (is.null(nrow(rsids_gwas))) {
return(NULL)
}
beta_squared <- rsids_gwas$beta^2
# again, pretty sure this is binarize data table lookup
sub_ld <- ld_data[.(as.vector(rsids_gwas$rsid)), nomatch = 0L]
return(list(rsids_gwas, beta_squared, sub_ld, chrom_block))
})
#cbind_df代替 rbind_df(list_df)
snp_data <- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[1]]))
# message(paste0("snp is ",nrow(snp_data)))
sub_ld <- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[3]]))
rsid_x <- intersect(snp_data$rsid, unique(unlist(sub_ld[, 1:2])))
sub_ld <- as.data.frame(sub_ld[sub_ld$SNP_A
%in% rsid_x & sub_ld$SNP_B
%in% rsid_x, ])
# message(paste0("ld is ",nrow(sub_ld)))
if (nrow(sub_ld) == 0) {
ld_matrix <- diag(1, nrow = nrow(snp_data))
} else {
ld_matrix <- make_ld_matrix(all_snps = snp_data$rsid, ld_data = sub_ld)
}
block_info<- bigreadr::rbind_df(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[4]]))
pa_block<-list(
block_info = block_info,
snps = snp_data,
ld_data = sub_ld,
n_snps = nrow(snp_data),
ld_matrix_squared = ld_matrix * ld_matrix,
y = unlist(lapply(seq_len(length(Pa_chrom_data)),
function(i) Pa_chrom_data[[i]][[2]]))
)
##compute the single cell result
if(!is.null(split_n) & split_n>1 & class(split_n)== "numeric"){
a<-ncol(Pagwas$pca_scCell_mat)
for (ai in 1:10) {
#print(ai)
if(a%%split_n==0) break;
split_n <- split_n+1
}
la<-gl(split_n,a/split_n,length=a)
Pathway_sclm_part<-list()
for(i in 1:split_n){
Pathway_sclm_part[[i]] <- get_Pathway_sclm(pa_block=pa_block,
pca_scCell_mat=Pagwas$pca_scCell_mat[,which(la==i)],
data_mat=Pagwas$data_mat[,which(la==i)],
rawPathway_list=Pagwas$rawPathway_list,
snp_gene_df=Pagwas$snp_gene_df,
n.cores=n.cores )
}
Pathway_sclm_results[[pathway]] <- unlist(Pathway_sclm_part)[colnames(Pagwas$pca_scCell_mat)]
}else{
Pathway_sclm_results[[pathway]]<-get_Pathway_sclm(pa_block=pa_block,
pca_scCell_mat=Pagwas$pca_scCell_mat,
data_mat=Pagwas$data_mat,
rawPathway_list=Pagwas$rawPathway_list,
snp_gene_df=Pagwas$snp_gene_df)
}
setTxtProgressBar(pb, which(names(Pachrom_block_list) == pathway) / length(names(Pachrom_block_list)))
#return(Pathway_sclm_results)
# }, n.cores = n.cores)
}
rm(chrom_gwas_list)
rm(chrom_ld)
Pathway_sclm_results <- Pathway_sclm_results[!sapply(Pathway_sclm_results, is.null)]
Pathway_sclm_results <- data.matrix(as.data.frame(Pathway_sclm_results))
dim(Pathway_sclm_results)
head(Pathway_sclm_results)
table(rownames(Pathway_sclm_results)== colnames(Pagwas$pca_scCell_mat))
library(scPagwas)
library(ggplot2)
suppressMessages(library(Seurat))
suppressMessages(library("dplyr"))
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#gene annotation files.
data(block_annotation)
#LD data
data(chrom_ld)
#1.start to run the wrapper functions for preprogress.
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
output.prefix="test",
add_eqtls="OnlyTSS",
block_annotation = block_annotation,
assay="RNA",
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
split_n=3,
nfeatures =NULL,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
SimpleResult=T)
##------ Fri Apr 29 09:52:18 2022 ------##
##------ Fri Apr 29 09:52:19 2022 ------##
##------ Fri Apr 29 09:52:27 2022 ------##
##------ Fri Apr 29 09:52:27 2022 ------##
##------ Fri Apr 29 09:52:27 2022 ------##
##------ Fri Apr 29 09:52:29 2022 ------##
##------ Fri Apr 29 09:53:14 2022 ------##
##------ Fri Apr 29 09:53:16 2022 ------##
library(scPagwas)
library(ggplot2)
suppressMessages(library(Seurat))
suppressMessages(library("dplyr"))
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#gene annotation files.
data(block_annotation)
#LD data
data(chrom_ld)
#1.start to run the wrapper functions for preprogress.
Pagwas<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"),
output.prefix="test",
add_eqtls="OnlyTSS",
block_annotation = block_annotation,
assay="RNA",
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),
split_n=3,
nfeatures =NULL,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld,
SimpleResult=T)
##------ Fri Apr 29 14:45:08 2022 ------##
##------ Fri Apr 29 14:45:09 2022 ------##
##------ Fri Apr 29 14:45:18 2022 ------##
##------ Fri Apr 29 14:45:19 2022 ------##
##------ Fri Apr 29 14:45:19 2022 ------##
##------ Fri Apr 29 14:45:20 2022 ------##
##------ Fri Apr 29 14:46:00 2022 ------##
##------ Fri Apr 29 14:46:02 2022 ------##
devtools::document()
library(scPagwas)
