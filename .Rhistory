devtools::load_all("D:/OneDrive/RPakage/scPagwas")
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Tue Mar 21 13:34:10 2023 ------##
##------ Tue Mar 21 13:34:14 2023 ------##
##------ Tue Mar 21 13:34:25 2023 ------##
##------ Tue Mar 21 13:34:25 2023 ------##
##------ Tue Mar 21 13:34:25 2023 ------##
##------ Tue Mar 21 13:34:26 2023 ------##
##------ Tue Mar 21 13:35:24 2023 ------##
##------ Tue Mar 21 13:35:25 2023 ------##
##------ Tue Mar 21 13:35:31 2023 ------##
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data ="D:/tempdata/gwas_file_IEU/bbj-a-107_prune.txt", # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=5,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Tue Mar 21 13:37:18 2023 ------##
##------ Tue Mar 21 13:37:22 2023 ------##
##------ Tue Mar 21 13:37:32 2023 ------##
##------ Tue Mar 21 13:37:44 2023 ------##
##------ Tue Mar 21 13:37:47 2023 ------##
##------ Tue Mar 21 13:37:49 2023 ------##
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data ="D:/tempdata/gwas_file_IEU/bbj-a-117_prune.txt", # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Tue Mar 21 13:41:42 2023 ------##
##------ Tue Mar 21 13:41:45 2023 ------##
##------ Tue Mar 21 13:41:56 2023 ------##
##------ Tue Mar 21 13:41:58 2023 ------##
##------ Tue Mar 21 13:41:58 2023 ------##
##------ Tue Mar 21 13:41:59 2023 ------##
getwd()
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data ="D:/tempdata/gwas_file_IEU/bbj-a-117_prune.txt", # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Tue Mar 21 13:43:33 2023 ------##
##------ Tue Mar 21 13:43:36 2023 ------##
##------ Tue Mar 21 13:43:46 2023 ------##
##------ Tue Mar 21 13:43:48 2023 ------##
##------ Tue Mar 21 13:43:48 2023 ------##
##------ Tue Mar 21 13:43:49 2023 ------##
##------ Tue Mar 21 13:44:40 2023 ------##
##------ Tue Mar 21 13:44:49 2023 ------##
##------ Tue Mar 21 13:44:55 2023 ------##
Pagwas =NULL
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas")
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas")
output.prefix="Test"
output.dirs="Test"
Pathway_list=Genes_by_pathway_kegg
assay="RNA"
singlecell=T
celltype=F
block_annotation = block_annotation
chrom_ld = chrom_ld
assay = "RNA"
run_split=FALSE
n.cores=1
marg = 10000
maf_filter = 0.01
min_clustercells = 10
min.pathway.size = 5
max.pathway.size = 300
iters = 200
n_topgenes = 1000
seurat_return = TRUE
remove_outlier = TRUE
if (!dir.exists(output.dirs)) {
dir.create(output.dirs)
}
if (!dir.exists(output.dirs)) {
dir.create(paste0("./", output.dirs, "/temp"))
}
## miximal file path lenght;
## Windows OS support max. 259 characters
Sys.setenv(R_LOCAL_CACHE = paste0("./", output.dirs, "/scPagwas_cache"))
tt <- Sys.time()
if (is.null(Pagwas)) {
Pagwas <- list()
} else if (class(Pagwas) == "Seurat" & is.null(Single_data)) {
Single_data <- Pagwas
Pagwas <- list()
Pagwas <- Single_data@misc
if ("scPagwasPaPca" %in% Seurat::Assays(Single_data)) {
Pagwas$pca_scCell_mat <- GetAssayData(Single_data,
assay = "scPagwasPaPca"
)
}
if (assay %in% Seurat::Assays(Single_data)) {
Pagwas$data_mat <- GetAssayData(Single_data, assay = assay)
} else {
stop("Error:assay is not in Pagwas!")
}
if (is.null(Pathway_list)) {
stop("Error:Pathway_list should be input!")
}
SOAR::Store(Single_data)
Pagwas$rawPathway_list <- Pathway_list
} else if (class(Pagwas) == "Seurat" & !is.null(Single_data)) {
message("Warning:Single_data and Pagwas seurat class are redundant!
we will keep the new Single_data and rerun the
Single_data_input and Pathway_pcascore_run function")
Pagwas <- list()
} else if (class(Pagwas) == "list" & is.null(Single_data) & singlecell) {
if("data_mat" %in% names(Pagwas) & run_split){
message("The single cell data are in the preprocessed pagwas list!")
}else{
stop("Error:Single_data should be input!")
}
} else if (class(Pagwas) == "list" & !is.null(Single_data)) {
Pagwas$rawPathway_list <- Pathway_list
} else if (class(Pagwas) != "list") {
stop("Error:The class for Pagwas is wrong! Should be NULL,
list or Seurat class.")
}
#############################
## 1.Single_data_input
#############################
message(paste(utils::timestamp(quiet = T),
" ******* 1st: Single_data_input function start! ********",
sep = ""
))
##------ Tue Mar 21 13:45:51 2023 ------##
tt <- Sys.time()
if (class(Single_data) == "character") {
if (grepl(".rds", Single_data)) {
message("** Start to read the single cell data!")
Single_data <- readRDS(Single_data)
} else {
stop("Error:There is need a data in `.rds` format ")
}
if (!assay %in% Seurat::Assays(Single_data)) {
stop("Error:There is no need assays in your Single_data")
}
} else if (class(Single_data) != "Seurat") {
if(run_split){
message("run_split is TRUE!")
}else{
stop("Error:When the run_split is FALSE! There is need a Seurat class for Single_data")
}
}
if (is.null(Pathway_list)) {
stop("Error:Pathway_list should be input!")
}
if(!("data_mat" %in% names(Pagwas))){
message("** Start to filter single cell data!")
Pagwas <- Single_data_input(
Pagwas = Pagwas,
assay = assay,
# nfeatures =nfeatures,
Single_data = Single_data,
Pathway_list = Pathway_list,
min_clustercells = min_clustercells
)
}
# save the Single_data
if(!run_split){
Single_data <- Single_data[, colnames(Pagwas$data_mat)]
SOAR::Store(Single_data)
}else{
if(!is.null(Single_data)){
#Single_data <- Single_data[, colnames(Pagwas$data_mat)]
rm(Single_data)
}
r_n <- colnames(Pagwas$data_mat)
}
message("done!")
if (!("pca_cell_df" %in% names(Pagwas))) {
message(paste(utils::timestamp(quiet = T),
" ******* 2nd: Pathway_pcascore_run function start!! ********",
sep = ""
))
tt <- Sys.time()
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
message("done!")
}
##------ Tue Mar 21 13:46:01 2023 ------##
#############################
## 3.GWAS_summary_input
#############################
message(paste(utils::timestamp(quiet = T),
" ******* 3rd: GWAS_summary_input function start! ********",
sep = ""
))
##------ Tue Mar 21 13:46:10 2023 ------##
if (!is.null(gwas_data)) {
if (class(gwas_data) == "character") {
message("** Start to read the gwas_data!")
suppressMessages(gwas_data <- bigreadr::fread2(gwas_data))
} else {
stop("Error:There is need a filename and address for gwas_data")
}
if (maf_filter >= 1 & maf_filter < 0) {
stop("Error:maf_filter should between 0 and 1")
}
tt <- Sys.time()
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = maf_filter
)
rm(gwas_data)
message("done!")
#############################
## 4.SnpToGene
#############################
message(paste(utils::timestamp(quiet = T),
" ******* 4th: SnpToGene start!! ********",
sep = ""
))
tt <- Sys.time()
if (!is.null(block_annotation)) {
Pagwas$snp_gene_df <- SnpToGene(
gwas_data = Pagwas$gwas_data,
block_annotation = block_annotation,
marg = marg
)
} else if (!("snp_gene_df" %in% names(Pagwas))) {
stop("Error: block_annotation should input!")
}
} else if (!("gwas_data" %in% names(Pagwas)) | !("snp_gene_df" %in%
names(Pagwas))) {
stop("Error: gwas_data should be input!")
}
##------ Tue Mar 21 13:46:10 2023 ------##
message(paste(utils::timestamp(quiet = T),
" ******* 5th: Pathway_annotation_input function
start! ********",
sep = ""
))
##------ Tue Mar 21 13:46:13 2023 ------##
tt <- Sys.time()
if (!is.null(block_annotation)) {
Pagwas <- Pathway_annotation_input(
Pagwas = Pagwas,
block_annotation = block_annotation
)
} else if (!("snp_gene_df" %in% names(Pagwas))) {
stop("Error: block_annotation should input!")
}
message("done!")
#############################
## 6.Link_pathway_blocks_gwas
#############################
message(paste(utils::timestamp(quiet = T),
" ******* 6th: Link_pathway_blocks_gwas
function start! ********",
sep = ""
))
##------ Tue Mar 21 13:46:17 2023 ------##
tt <- Sys.time()
if (!is.null(chrom_ld)) {
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=n.cores
)
message("done!")
if (file.exists(paste0("./", output.dirs, "/temp"))) {
unlink(paste0("./", output.dirs, "/temp"),recursive = TRUE)
cat("bk files has been deleted")
}
} else if (!("Pathway_sclm_results" %in% names(Pagwas))) {
stop("Error: chrom_ld should input!")
}
message(paste(utils::timestamp(quiet = T),
" ******* 7th: Celltype_heritability_contributions
function start! ********",
sep = ""
))
##------ Tue Mar 21 13:47:24 2023 ------##
Pagwas$lm_results <- Pagwas_perform_regression(
Pathway_ld_gwas_data = Pagwas$Pathway_ld_gwas_data
)
Pagwas$lm_results <- Pagwas_perform_regression(
Pathway_ld_gwas_data = Pagwas$Pathway_ld_gwas_data
)
Pagwas$Pathway_ld_gwas_data
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=n.cores
)
devtools::load_all("D:/OneDrive/RPakage/scPagwas")
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1
chrom_ld = chrom_ld,# The LD data is provided by package.
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
##------ Tue Mar 21 13:51:04 2023 ------##
##------ Tue Mar 21 13:51:08 2023 ------##
##------ Tue Mar 21 13:51:18 2023 ------##
##------ Tue Mar 21 13:51:18 2023 ------##
##------ Tue Mar 21 13:51:18 2023 ------##
##------ Tue Mar 21 13:51:19 2023 ------##
##------ Tue Mar 21 13:52:19 2023 ------##
##------ Tue Mar 21 13:52:20 2023 ------##
##------ Tue Mar 21 13:52:26 2023 ------##
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=5,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
##------ Tue Mar 21 13:52:41 2023 ------##
##------ Tue Mar 21 13:52:45 2023 ------##
##------ Tue Mar 21 13:52:54 2023 ------##
##------ Tue Mar 21 13:52:54 2023 ------##
##------ Tue Mar 21 13:52:54 2023 ------##
##------ Tue Mar 21 13:52:55 2023 ------##
##------ Tue Mar 21 13:53:53 2023 ------##
##------ Tue Mar 21 13:53:55 2023 ------##
##------ Tue Mar 21 13:54:00 2023 ------##
Pagwas =NULL
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas")
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas")
output.prefix="Test"
output.dirs="Test"
Pathway_list=Genes_by_pathway_kegg
devtools::load_all(".")
Pagwas =NULL
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas")
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas")
output.prefix="Test"
output.dirs="Test"
Pathway_list=Genes_by_pathway_kegg
assay="RNA"
singlecell=T
celltype=F
block_annotation = block_annotation
chrom_ld = chrom_ld
assay = "RNA"
run_split=FALSE
n.cores=1
marg = 10000
maf_filter = 0.01
min_clustercells = 10
min.pathway.size = 5
max.pathway.size = 300
iters = 200
n_topgenes = 1000
seurat_return = TRUE
remove_outlier = TRUE
Single_data <- readRDS(Single_data)
Pagwas <- Single_data_input(
Pagwas = Pagwas,
assay = assay,
# nfeatures =nfeatures,
Single_data = Single_data,
Pathway_list = Pathway_list,
min_clustercells = min_clustercells
)
Single_data <- Single_data[, colnames(Pagwas$data_mat)]
Pa.len <- unlist(lapply(Pathway_list, function(Pa) length(Pa)))
Pathway_list <- Pathway_list[names(Pathway_list)[Pa.len >= min.pathway.size &
Pa.len <= max.pathway.size]]
pa_gene <- unique(unlist(Pathway_list))
pana <- names(Pathway_list)[which(
unlist(lapply(
Pathway_list,
function(Pa) {
length(intersect(
Pa,
Pagwas$VariableFeatures
))
}
)) > 2
)]
Pathway_list <- Pathway_list[pana]
# keep the raw pathway
Pagwas$rawPathway_list <- Pathway_list
# filter the gene for no expression in single cells in pathway
celltypes <- as.vector(unique(Pagwas$Celltype_anno$annotation))
pana_list <- lapply(celltypes, function(celltype) {
scCounts <- Pagwas$data_mat[
,
Pagwas$Celltype_anno$cellnames[
Pagwas$Celltype_anno$annotation == celltype
]
]
scCounts <- as_matrix(scCounts)
scCounts <- scCounts[rowSums(scCounts) != 0, ]
proper.gene.names <- rownames(scCounts)
pana <- names(Pathway_list)[which(
unlist(lapply(
Pathway_list,
function(Pa) {
length(intersect(
Pa, proper.gene.names
))
}
)) > 2
)]
return(pana)
})
Pagwas$Pathway_list <- Pathway_list[Reduce(intersect, pana_list)]
Pagwas$rawPathway_list <- Pathway_list[Reduce(intersect, pana_list)]
rm(pana_list)
rm(Pathway_list)
length(Pagwas$Pathway_list)
g1_genes<-Pagwas$Pathway_list[[1]]
g1_genes
Pagwas$Celltype_anno$annotation
celltype=Pagwas$Celltype_anno$annotation
gene_matrix=as_matrix(Pagwas$data_mat)
Nmfscore <- PathwayNmf(
gene_matrix=as_matrix(Pagwas$data_mat),
g1_genes=g1_genes,
celltype=Pagwas$Celltype_anno$annotation
)
dim(gene_matrix)
pana_list
Pagwas$Pathway_list
rownames(Pagwas$data_mat)
g1_expr<-gene_matrix[g1_genes,]
gene_matrix
gene_matrix[g1_genes,]
g1_genes<-intersect(g1_genes,rownames(Pagwas$data_mat))
Nmfscore <- PathwayNmf(
gene_matrix=as_matrix(Pagwas$data_mat),
g1_genes=g1_genes,
celltype=Pagwas$Celltype_anno$annotation
)
library(NMF)
installed.packages("NMF")
