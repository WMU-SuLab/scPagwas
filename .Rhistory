}
## miximal file path lenght;
## Windows OS support max. 259 characters
Sys.setenv(R_LOCAL_CACHE = paste0("./", output.dirs, "/scPagwas_cache"))
tt <- Sys.time()
if (is.null(Pagwas)) {
Pagwas <- list()
} else if (class(Pagwas) == "Seurat" & is.null(Single_data)) {
Single_data <- Pagwas
Pagwas <- list()
Pagwas <- Single_data@misc
if ("scPagwasPaPca" %in% Seurat::Assays(Single_data)) {
Pagwas$pca_scCell_mat <- GetAssayData(Single_data,
assay = "scPagwasPaPca"
)
}
if (assay %in% Seurat::Assays(Single_data)) {
Pagwas$data_mat <- Seurat::GetAssayData(Single_data, assay = assay)
} else {
stop("Error:assay is not in Pagwas!")
}
if (is.null(Pathway_list)) {
stop("Error:Pathway_list should be input!")
}
SOAR::Store(Single_data)
Pagwas$rawPathway_list <- Pathway_list
} else if (class(Pagwas) == "Seurat" & !is.null(Single_data)) {
message("Warning:Single_data and Pagwas seurat class are redundant!
we will keep the new Single_data and rerun the
Single_data_input and Pathway_pcascore_run function")
Pagwas <- list()
} else if (class(Pagwas) == "list" & is.null(Single_data) & singlecell) {
if("data_mat" %in% names(Pagwas) & run_split){
message("The single cell data are in the preprocessed pagwas list!")
}else{
stop("Error:Single_data should be input!")
}
} else if (class(Pagwas) == "list" & !is.null(Single_data)) {
Pagwas$rawPathway_list <- Pathway_list
} else if (class(Pagwas) != "list") {
stop("Error:The class for Pagwas is wrong! Should be NULL,
list or Seurat class.")
}
message(paste(utils::timestamp(quiet = T),
" ******* 1st: Single_data_input function start! ********",
sep = ""
))
##------ Sat Apr 15 14:47:25 2023 ------##
tt <- Sys.time()
if (class(Single_data) == "character") {
if (grepl(".rds", Single_data)) {
message("** Start to read the single cell data!")
Single_data <- readRDS(Single_data)
} else {
stop("Error:There is need a data in `.rds` format ")
}
if (!assay %in% Seurat::Assays(Single_data)) {
stop("Error:There is no need assays in your Single_data")
}
} else if (class(Single_data) != "Seurat") {
if(run_split){
message("run_split is TRUE!")
}else{
stop("Error:When the run_split is FALSE! There is need a Seurat class for Single_data")
}
}
if (is.null(Pathway_list)) {
stop("Error:Pathway_list should be input!")
}
if(!("data_mat" %in% names(Pagwas))){
message("** Start to filter single cell data!")
Pagwas <- Single_data_input(
Pagwas = Pagwas,
assay = assay,
# nfeatures =nfeatures,
Single_data = Single_data,
Pathway_list = Pathway_list,
min_clustercells = min_clustercells
)
}
# save the Single_data
if(!run_split){
Single_data <- Single_data[, colnames(Pagwas$data_mat)]
SOAR::Store(Single_data)
}else{
if(!is.null(Single_data)){
#Single_data <- Single_data[, colnames(Pagwas$data_mat)]
rm(Single_data)
}
r_n <- colnames(Pagwas$data_mat)
}
message("done!")
#############################
## 2.Pathway_pcascore_run
#############################
if (!("pca_cell_df" %in% names(Pagwas))) {
message(paste(utils::timestamp(quiet = T),
" ******* 2nd: Pathway_pcascore_run function start!! ********",
sep = ""
))
tt <- Sys.time()
if(pa_method == "SVD"){
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
}else if(pa_method == "NMF"){
Pagwas <- Pathway_nmf_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
}else{
stop("The pa_method parameter only choose from SVD and NMF!")
}
message("done!")
}
##------ Sat Apr 15 14:47:41 2023 ------##
pa_method = "SVD"
if (!("pca_cell_df" %in% names(Pagwas))) {
message(paste(utils::timestamp(quiet = T),
" ******* 2nd: Pathway_pcascore_run function start!! ********",
sep = ""
))
tt <- Sys.time()
if(pa_method == "SVD"){
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
}else if(pa_method == "NMF"){
Pagwas <- Pathway_nmf_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
}else{
stop("The pa_method parameter only choose from SVD and NMF!")
}
message("done!")
}
##------ Sat Apr 15 14:48:28 2023 ------##
message(paste(utils::timestamp(quiet = T),
" ******* 3rd: GWAS_summary_input function start! ********",
sep = ""
))
##------ Sat Apr 15 14:51:55 2023 ------##
if (!is.null(gwas_data)) {
if (class(gwas_data) == "character") {
message("** Start to read the gwas_data!")
suppressMessages(gwas_data <- bigreadr::fread2(gwas_data))
} else {
stop("Error:There is need a filename and address for gwas_data")
}
if (maf_filter >= 1 & maf_filter < 0) {
stop("Error:maf_filter should between 0 and 1")
}
tt <- Sys.time()
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = maf_filter
)
rm(gwas_data)
message("done!")
#############################
## 4.SnpToGene
#############################
message(paste(utils::timestamp(quiet = T),
" ******* 4th: SnpToGene start!! ********",
sep = ""
))
tt <- Sys.time()
if (!is.null(block_annotation)) {
Pagwas$snp_gene_df <- SnpToGene(
gwas_data = Pagwas$gwas_data,
block_annotation = block_annotation,
marg = marg
)
} else if (!("snp_gene_df" %in% names(Pagwas))) {
stop("Error: block_annotation should input!")
}
} else if (!("gwas_data" %in% names(Pagwas)) | !("snp_gene_df" %in%
names(Pagwas))) {
stop("Error: gwas_data should be input!")
}
##------ Sat Apr 15 14:52:06 2023 ------##
#############################
## 5.Pathway_annotation_input
message(paste(utils::timestamp(quiet = T),
" ******* 5th: Pathway_annotation_input function
start! ********",
sep = ""
))
##------ Sat Apr 15 14:52:15 2023 ------##
tt <- Sys.time()
if (!is.null(block_annotation)) {
Pagwas <- Pathway_annotation_input(
Pagwas = Pagwas,
block_annotation = block_annotation
)
} else if (!("snp_gene_df" %in% names(Pagwas))) {
stop("Error: block_annotation should input!")
}
message("done!")
message(paste(utils::timestamp(quiet = T),
" ******* 6th: Link_pathway_blocks_gwas
function start! ********",
sep = ""
))
##------ Sat Apr 15 14:52:31 2023 ------##
tt <- Sys.time()
if (!is.null(chrom_ld)) {
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=n.cores
)
message("done!")
if (file.exists(paste0("./", output.dirs, "/temp"))) {
unlink(paste0("./", output.dirs, "/temp"),recursive = TRUE)
cat("bk files has been deleted")
}
} else if (!("Pathway_sclm_results" %in% names(Pagwas))) {
stop("Error: chrom_ld should input!")
}
message(paste(utils::timestamp(quiet = T),
" ******* 6th: Link_pathway_blocks_gwas
function start! ********",
sep = ""
))
##------ Sat Apr 15 15:04:14 2023 ------##
tt <- Sys.time()
if (!is.null(chrom_ld)) {
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype,
backingpath=paste0("./", output.dirs, "/temp1"),
n.cores=n.cores
)
message("done!")
if (file.exists(paste0("./", output.dirs, "/temp"))) {
unlink(paste0("./", output.dirs, "/temp"),recursive = TRUE)
cat("bk files has been deleted")
}
} else if (!("Pathway_sclm_results" %in% names(Pagwas))) {
stop("Error: chrom_ld should input!")
}
celltype
if (singlecell) {
message(paste(utils::timestamp(quiet = T),
" ******* 8th: scPagwas_perform_score function start! ********",
sep = ""
))
Pagwas$Pathway_ld_gwas_data <- NULL
Pagwas <- scPagwas_perform_score(
Pagwas = Pagwas,
remove_outlier = TRUE
)
message("done!")
#############################
## 9.scGet_gene_heritability_correlation
#############################
if(!run_split){
message(paste(utils::timestamp(quiet = T),
" ******* 9th: scGet_gene_heritability_correlation function start! ********",
sep = ""
))
tt <- Sys.time()
Pagwas$gene_heritability_correlation <- scGet_gene_heritability_correlation(scPagwas.gPAS.score=Pagwas$scPagwas.gPAS.score,
data_mat=Pagwas$data_mat)
scPagwas_topgenes <- names(Pagwas$gene_heritability_correlation[order(Pagwas$gene_heritability_correlation, decreasing = T), ])[1:n_topgenes]
message("done")
}
}
##------ Sat Apr 15 15:17:41 2023 ------##
##------ Sat Apr 15 15:18:07 2023 ------##
scPagwas_topgenes
Single_data <- Seurat::AddModuleScore(Single_data,
assay = assay,
list(scPagwas_topgenes),
name = c("scPagwas.TRS.Score")
)
message("* Get scaled P for each single cell")
CellScalepValue <- scGene_scaleP(
Single_mat = t(data.matrix(
Seurat::GetAssayData(Single_data, assay = assay)[scPagwas_topgenes, ]
))
)
Correct_BG_p
message("* Get Random Correct background pvalue for each single cell!")
correct_pdf<-Get_CorrectBg_p(singledata=Single_data,
v_raw_score=Single_data$scPagwas.TRS.Score1,
n_iters=iters_singlecell,
n_genes=n_topgenes,
gene_list=scPagwas_topgenes
)
v_raw_score=Single_data$scPagwas.TRS.Score1
n_iters=iters_singlecell
n_genes=n_topgenes
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1
gene_matrix <- GetAssayData(singledata, slot = "data", assay = 'RNA')
gene_matrix <- GetAssayData(Single_data, slot = "data", assay = 'RNA')
mat_ctrl_raw_score <- matrix(0, nrow =ncol(gene_matrix), ncol = iters_singlecell)
dic_ctrl_list <- list()
for (i in 1:iters_singlecell) {
#随机抽取基因集
print(i)
set.seed(i)
dic_ctrl_list[[i]] <- sample(rownames(Single_data), n_topgenes)
#计算每个样本的control分数
Single_data<-Seurat::AddModuleScore(Single_data,
assay = 'RNA',
list(dic_ctrl_list[[i]]),
name = c("contr_genes")
)
#将每个样本的control分数放入矩阵中
mat_ctrl_raw_score[, i] <-Single_data$contr_genes1
Single_data$contr_genes1<-NULL
}
df_gene <- data.frame(
gene = rownames(Single_data),
var = apply(gene_matrix,1,var)
)
rownames(Single_data)
dim(gene_matrix)
Single_data
Single_data
gene_matrix <- GetAssayData(Single_data, slot = "data", assay = 'RNA')
dim(gene_matrix)
rownames(gene_matrix)
genes<-intersect(rownames(Single_data),rownames(gene_matrix))
df_gene <- data.frame(
gene = genes,
var = apply(gene_matrix[genes,],1,var)
)
gene_matrix<-gene_matrix[genes,]
rownames(df_gene) <- df_gene$gene
v_var_ratio_c2t <- rep(1, iters_singlecell)
for (i_ctrl in 1:iters_singlecell) {
v_var_ratio_c2t[i_ctrl] <- sum(df_gene[dic_ctrl_list[[i_ctrl]], "var"])
}
devtools::load_all(".")
correct_pdf<-Get_CorrectBg_p(Single_data=Single_data,
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1,
iters_singlecell=iters_singlecell,
n_topgenes=n_topgenes,
scPagwas_topgenes=scPagwas_topgenes
)
Pagwas$Random_Correct_BG_pdf <- correct_pdf
Pagwas$Merged_celltype_pvalue<-Merge_celltype_p(single_p=correct_pdf$adj_p,celltype=Pagwas$Celltype_anno$annotation)
correct_pdf$adj_p
correct_pdf
Single_data
gene_matrix <- GetAssayData(Single_data, slot = "data", assay = 'RNA')
mat_ctrl_raw_score <- matrix(0, nrow =ncol(gene_matrix), ncol = iters_singlecell)
mat_ctrl_raw_score
dic_ctrl_list <- list()
for (i in 1:iters_singlecell) {
#随机抽取基因集
print(i)
set.seed(i)
dic_ctrl_list[[i]] <- sample(rownames(Single_data), n_topgenes)
#计算每个样本的control分数
Single_data<-Seurat::AddModuleScore(Single_data,
assay = 'RNA',
list(dic_ctrl_list[[i]]),
name = c("contr_genes")
)
#将每个样本的control分数放入矩阵中
mat_ctrl_raw_score[, i] <-Single_data$contr_genes1
Single_data$contr_genes1<-NULL
}
dic_ctrl_list
genes<-intersect(rownames(Single_data),rownames(gene_matrix))
gene_matrix<-gene_matrix[genes,]
df_gene <- data.frame(
gene = genes,
var = apply(gene_matrix,1,var)
)
head(df_gene)
rownames(df_gene) <- df_gene$gene
v_var_ratio_c2t <- rep(1, iters_singlecell)
for (i_ctrl in 1:iters_singlecell) {
v_var_ratio_c2t[i_ctrl] <- sum(df_gene[dic_ctrl_list[[i_ctrl]], "var"])
}
v_var_ratio_c2t <- v_var_ratio_c2t / sum(df_gene[scPagwas_topgenes, "var"])
v_var_ratio_c2t
scPagwas_topgenes
df_gene
sum(df_gene[scPagwas_topgenes, "var"]
)
head(df_gene)
scPagwas_topgenes
length(intersect(scPagwas_topgenes,genes))
CellScalepValue <- scGene_scaleP(
Single_mat = Pagwas$data_mat[scPagwas_topgenes, ]
)
dim(Pagwas$data_mat)
genes<-intersect(rownames(Single_data),rownames(gene_matrix))
scPagwas_topgenes<-intersect(scPagwas_topgenes,genes)
gene_matrix<-gene_matrix[genes,]
df_gene <- data.frame(
gene = genes,
var = apply(gene_matrix,1,var)
)
rownames(df_gene) <- df_gene$gene
v_var_ratio_c2t <- rep(1, iters_singlecell)
for (i_ctrl in 1:iters_singlecell) {
v_var_ratio_c2t[i_ctrl] <- sum(df_gene[dic_ctrl_list[[i_ctrl]], "var"])
}
v_var_ratio_c2t <- v_var_ratio_c2t / sum(df_gene[scPagwas_topgenes, "var"])
v_var_ratio_c2t
correct_pdf<-correct_background(
scPagwas.TRS.Score,
mat_ctrl_raw_score,
v_var_ratio_c2t
)
head(correct_pdf)
devtools::load_all(".")
if(Correct_BG_p){
message("* Get Random Correct background pvalue for each single cell!")
correct_pdf<-Get_CorrectBg_p(Single_data=Single_data,
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1,
iters_singlecell=iters_singlecell,
n_topgenes=n_topgenes,
scPagwas_topgenes=scPagwas_topgenes
)
Pagwas$Random_Correct_BG_pdf <- correct_pdf
Pagwas$Merged_celltype_pvalue<-Merge_celltype_p(single_p=correct_pdf$pooled_p,celltype=Pagwas$Celltype_anno$annotation)
}
devtools::load_all(".")
correct_pdf<-Get_CorrectBg_p(Single_data=Single_data,
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1,
iters_singlecell=iters_singlecell,
n_topgenes=n_topgenes,
scPagwas_topgenes=scPagwas_topgenes
)
devtools::load_all(".")
correct_pdf<-Get_CorrectBg_p(Single_data=Single_data,
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1,
iters_singlecell=iters_singlecell,
n_topgenes=n_topgenes,
scPagwas_topgenes=scPagwas_topgenes
)
library(scPagwas)
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
pa_method='SVD',
iters_singlecell = 100,
Correct_BG_p=TRUE,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Sat Apr 15 16:19:12 2023 ------##
##------ Sat Apr 15 16:19:16 2023 ------##
##------ Sat Apr 15 16:19:28 2023 ------##
##------ Sat Apr 15 16:19:29 2023 ------##
##------ Sat Apr 15 16:19:29 2023 ------##
##------ Sat Apr 15 16:19:30 2023 ------##
##------ Sat Apr 15 16:21:18 2023 ------##
##------ Sat Apr 15 16:21:19 2023 ------##
##------ Sat Apr 15 16:21:24 2023 ------##
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation,# gene position in chromosome is provided by package.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
pa_method='NMF',
iters_singlecell = 100,
Correct_BG_p=TRUE,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Sat Apr 15 16:25:32 2023 ------##
##------ Sat Apr 15 16:25:36 2023 ------##
devtools::document()
usethis::use_version()
usethis::use_pkgdown()
library(scPagwas)
devtools::document()
library(scPagwas)
