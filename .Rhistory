getwd()
oriDir <-"D:/OneDrive/GWAS_Multiomics/Pagwas/test/splice_scPagwas"
list.files(oriDir, pattern="*_singlecell_scPagwas.gPAS.score.Result.csv")
getwd()
oriDir
file<-files[1]
files <- list.files(oriDir, pattern="*_singlecell_scPagwas.gPAS.score.Result.csv")
file<-files[1]
gPas<-read.csv(file=paste0(oriDir,"/",file))
gPas
head(gPas)
scPagwas.gPAS.score<-unlist(lapply( files,function(file){
gs<-read.csv(file=paste0(oriDir,"/",file))
ga <- gs$scPagwas.gPAS.score
names(ga) <- gs$cellnames
return(ga)
}))
scPagwas.gPAS.score
colnames(Single_data)
Single_cell = readRDS(system.file("extdata", "scRNAexample.rds", package = "scPagwas"))
colnames(Single_cell)
r_n
r_n<-names(Pagwas$scPagwas.gPAS.score)
r_n
Pagwas$scPagwas.gPAS.score
Pagwas
set.seed(1234)
sample(1:100,10)
sample(1:100,10)
sample(1:100,10)
sample(1:100,10)
sample(1:100,10)
sample(1:100,10)
sample(1:100,10)
sample(1:100,10)
sample(1:100,10)
sample(1:100,10)
sample(1:100,10)
sample(1:100,10)
random_times
random_times=10
proportion=0.3
seed=1234
set.seed(seed)
sparse_cor_list<-list()
for (j in 1:random_times) {
index<-sample(1:ncol(Single_data),ceiling(ncol(Single_data)*proportion))
Single_data[,index]
scPagwas.gPAS.score <- data.matrix(Single_data$scPagwas.gPAS.score[index])
sparse_cor <- corSparse(
X = t(as_matrix(GetAssayData(Single_data[,index], slot = "data", assay = "RNA"))),
Y = scPagwas.gPAS.score
)
rownames(sparse_cor) <- colnames(Single_data)[index]
colnames(sparse_cor) <- "gene_heritability_correlation"
sparse_cor[is.nan(sparse_cor)] <- 0
sparse_cor_list[j]<-sparse_cor
}
Single_data
Single_data = readRDS(system.file("extdata", "scRNAexample.rds", package = "scPagwas"))
set.seed(seed)
sparse_cor_list<-list()
for (j in 1:random_times) {
index<-sample(1:ncol(Single_data),ceiling(ncol(Single_data)*proportion))
Single_data[,index]
scPagwas.gPAS.score <- data.matrix(Single_data$scPagwas.gPAS.score[index])
sparse_cor <- corSparse(
X = t(as_matrix(GetAssayData(Single_data[,index], slot = "data", assay = "RNA"))),
Y = scPagwas.gPAS.score
)
rownames(sparse_cor) <- colnames(Single_data)[index]
colnames(sparse_cor) <- "gene_heritability_correlation"
sparse_cor[is.nan(sparse_cor)] <- 0
sparse_cor_list[j]<-sparse_cor
}
scPagwas.gPAS.score
Single_data <- Single_data[,names(scPagwas.gPAS.score)]
Single_data$scPagwas.gPAS.score<-scPagwas.gPAS.score
set.seed(seed)
sparse_cor_list<-list()
for (j in 1:random_times) {
index<-sample(1:ncol(Single_data),ceiling(ncol(Single_data)*proportion))
Single_data[,index]
scPagwas.gPAS.score <- data.matrix(Single_data$scPagwas.gPAS.score[index])
sparse_cor <- corSparse(
X = t(as_matrix(GetAssayData(Single_data[,index], slot = "data", assay = "RNA"))),
Y = scPagwas.gPAS.score
)
rownames(sparse_cor) <- colnames(Single_data)[index]
colnames(sparse_cor) <- "gene_heritability_correlation"
sparse_cor[is.nan(sparse_cor)] <- 0
sparse_cor_list[j]<-sparse_cor
}
set.seed(seed)
sparse_cor_list<-list()
print("Randome Times: ",j)
j
print("Randome Times: ",j)
print(paste0("Randome Times: ",j))
index<-sample(1:ncol(Single_data),ceiling(ncol(Single_data)*proportion))
index
scPagwas.gPAS.score <- data.matrix(Single_data$scPagwas.gPAS.score[index])
sparse_cor <- corSparse(
X = t(as_matrix(GetAssayData(Single_data[,index], slot = "data", assay = "RNA"))),
Y = scPagwas.gPAS.score
)
sparse_cor
colnames(sparse_cor) <- "gene_heritability_correlation"
sparse_cor[is.nan(sparse_cor)] <- 0
sparse_cor_list<-list()
for (j in 1:random_times) {
print(paste0("Randome Times: ",j))
index<-sample(1:ncol(Single_data),ceiling(ncol(Single_data)*proportion))
#Single_data[,index]
scPagwas.gPAS.score <- data.matrix(Single_data$scPagwas.gPAS.score[index])
sparse_cor <- corSparse(
X = t(as_matrix(GetAssayData(Single_data[,index], slot = "data", assay = "RNA"))),
Y = scPagwas.gPAS.score
)
#rownames(sparse_cor) <- colnames(Single_data)[index]
colnames(sparse_cor) <- "gene_heritability_correlation"
sparse_cor[is.nan(sparse_cor)] <- 0
sparse_cor_list[j]<-sparse_cor
}
sparse_cor
unlist(sparse_cor)
unlist(sparse_cor[,1])
sparse_cor_list<-list()
for (j in 1:random_times) {
print(paste0("Randome Times: ",j))
index<-sample(1:ncol(Single_data),ceiling(ncol(Single_data)*proportion))
#Single_data[,index]
scPagwas.gPAS.score <- data.matrix(Single_data$scPagwas.gPAS.score[index])
sparse_cor <- corSparse(
X = t(as_matrix(GetAssayData(Single_data[,index], slot = "data", assay = "RNA"))),
Y = scPagwas.gPAS.score
)
#rownames(sparse_cor) <- colnames(Single_data)[index]
colnames(sparse_cor) <- "gene_heritability_correlation"
sparse_cor[is.nan(sparse_cor)] <- 0
sparse_cor_list[j]<-unlist(sparse_cor[,1])
}
unlist(sparse_cor[,1])
sparse_cor_list[j]<-unlist(sparse_cor[,1])
sparse_cor_list<-list()
for (j in 1:random_times) {
print(paste0("Randome Times: ",j))
index<-sample(1:ncol(Single_data),ceiling(ncol(Single_data)*proportion))
#Single_data[,index]
scPagwas.gPAS.score <- data.matrix(Single_data$scPagwas.gPAS.score[index])
sparse_cor <- corSparse(
X = t(as_matrix(GetAssayData(Single_data[,index], slot = "data", assay = "RNA"))),
Y = scPagwas.gPAS.score
)
#rownames(sparse_cor) <- colnames(Single_data)[index]
colnames(sparse_cor) <- "gene_heritability_correlation"
sparse_cor[is.nan(sparse_cor)] <- 0
sparse_cor_list[[j]]<-unlist(sparse_cor[,1])
}
sparse_cor_list
as.data.frame(sparse_cor_list)
sparse_cor_df<-as.data.frame(sparse_cor_list)
head(sparse_cor_df)
dim(sparse_cor_df)
paste0("ramdom",1:random_times)
sparse_cor
head(sparse_cor)
sparse_cor_list<-as.data.frame(sparse_cor_list)
colnames(sparse_cor_list)<-paste0("Cor_coefficient.ramdom",1:random_times)
head(sparse_cor_list)
apply(sparse_cor_list,1,mean)
sparse_cor<- apply(sparse_cor_list,1,mean)
names(sparse_cor[order(sparse_cor, decreasing = T), ])[1:n_topgenes]
data.frame(apply(sparse_cor_list,1,mean))
head(Single_data@misc$gene_heritability_correlation)
sparse_cor<- data.frame(gene_heritability_correlation=apply(sparse_cor_list,1,mean))
names(sparse_cor[order(sparse_cor, decreasing = T), ])[1:n_topgenes]
n_topgenes=1000
names(sparse_cor[order(sparse_cor, decreasing = T), ])[1:n_topgenes]
sparse_cor[order(sparse_cor, decreasing = T), ]
sparse_cor
rownamesnames(sparse_cor[order(sparse_cor$gene_heritability_correlation, decreasing = T), ])[1:n_topgenes]
rownames(sparse_cor[order(sparse_cor$gene_heritability_correlation, decreasing = T), ])[1:n_topgenes]
order(sparse_cor$gene_heritability_correlation, decreasing = T)
sparse_cor[order(sparse_cor$gene_heritability_correlation, decreasing = T), ]
sparse_cor<- apply(sparse_cor_list,1,mean)
order(sparse_cor, decreasing = T)
sparse_cor[order(sparse_cor, decreasing = T)]
scPagwas_topgenes <- names(sparse_cor[order(sparse_cor, decreasing = T)])[1:n_topgenes]
scPagwas_topgenes
scPagwas.gPAS.score <- data.matrix(Single_data$scPagwas.gPAS.score)
sparse_cor <- corSparse(
X = t(as_matrix(GetAssayData(Single_data, slot = "data", assay = "RNA"))),
Y = scPagwas.gPAS.score
)
sparse_cor
rownames(Single_data)
rownames(sparse_cor) <- rownames(Single_data)
rownames(sparse_cor)
class(sparse_cor)
sparse_cor<- apply(sparse_cor_list,1,mean)
sparse_cor
data.matrix(gene_heritability_correlation=sparse_cor)
data.matrix(sparse_cor)
colnames(Single_data@misc$gene_heritability_correlation)<-"gene_heritability_correlation"
Single_data@misc$gene_heritability_correlation <- data.matrix(sparse_cor)
colnames(Single_data@misc$gene_heritability_correlation)<-"gene_heritability_correlation"
head(Single_data@misc$gene_heritability_correlation)
i<-1
j<-1
j
index<-sample(1:ncol(Single_data),ceiling(ncol(Single_data)*proportion))
CellScalepValue <- rankPvalue(
datS = t(data.matrix(
GetAssayData(Single_data[,index], assay = "RNA")[scPagwas_topgenes, ]
)),
pValueMethod = "scale"
)
CellScalepValue
head(pv)
head(CellScalepValue)
CellScalepValue[, "pValueHighScale"]
pv<-list()
qv<-list()
for (j in 1:random_times) {
print(paste0("Randome Times: ",j))
index<-sample(1:ncol(Single_data),ceiling(ncol(Single_data)*proportion))
CellScalepValue <- rankPvalue(
datS = t(data.matrix(
GetAssayData(Single_data[,index], assay = "RNA")[scPagwas_topgenes, ]
)),
pValueMethod = "scale"
)
a<-CellScalepValue[, "pValueHighScale"]
names(a)<-rownames(CellScalepValue)
pv[[j]]<-a
a<-CellScalepValue[, "qValueHighScale"]
names(a)<-rownames(CellScalepValue)
qv[[j]]<-a
}
unlist(pv)
Single_data$CellScalepValue <- unlist(pv)[colnames(Single_data)]
Single_data$CellScaleqValue <- unlist(qv)[colnames(Single_data)]
devtools::load_all(".")
library(Seurat)
scRNAexample <-readRDS(system.file("extdata", "scRNAexample.rds", package = "scPagwas"))
#set the output.dirs for any directory.
set.dirs="D:/OneDrive/GWAS_Multiomics/Pagwas/test/"
#set the number of split time, it depend on the size of your single cell data.
#There have two form of spliting the data:
#########
###1.By Random
#Create the random index number.
n_split=2
Split_index <- rep(1:n_split, time = ceiling(ncol(scRNAexample)/n_split), length = ncol(scRNAexample))
for (i in 1:n_split) {
Example_splice <- scRNAexample[,Split_index==i]
saveRDS(Example_splice,file = paste0(set.dirs,"Example_splice",i,".rds"))
}
#########
###1.By celltypes
#Create the random index number.
for (i in levels(Idents(scRNAexample))) {
Example_splice <- subset(scRNAexample,idents = i)
saveRDS(Example_splice,file = paste0(set.dirs,"Example_splice",i,".rds"))
}
Pagwas<-list()
gwas_data <- bigreadr::fread2(system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"))
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = 0.1
)
Pagwas$snp_gene_df <- Snp2Gene(snp = Pagwas$gwas_data, refGene = block_annotation, marg = 10000)
names(Pagwas)
setwd(set.dirs)
for (i in 1:n_split) {
scPagwas_main(Pagwas =Pagwas,
gwas_data =NULL,
Single_data = paste0("Example_splice",i,".rds"), #the
output.prefix=i, #the prefix can be the circulation coefficient i.
output.dirs="splice_scPagwas", #the output.dirs shoukd be the same for each circulation
Pathway_list=Genes_by_pathway_kegg,
run_split=TRUE, #This parameter is set to run single result for each split result.
ncores=1,
min_clustercells=1, #the minimum cluster cell number should be 1.
assay="RNA",
block_annotation = block_annotation,
chrom_ld = chrom_ld)
}
##------ Thu Sep 29 13:31:27 2022 ------##
setwd(set.dirs)
for (i in 1:n_split) {
scPagwas_main(Pagwas =Pagwas,
gwas_data =NULL,
Single_data = paste0(set.dirs,"/Example_splice",i,".rds"), #the
output.prefix=i, #the prefix can be the circulation coefficient i.
output.dirs="splice_scPagwas", #the output.dirs shoukd be the same for each circulation
Pathway_list=Genes_by_pathway_kegg,
run_split=TRUE, #This parameter is set to run single result for each split result.
ncores=1,
min_clustercells=1, #the minimum cluster cell number should be 1.
assay="RNA",
block_annotation = block_annotation,
chrom_ld = chrom_ld)
}
##------ Thu Sep 29 13:31:52 2022 ------##
paste0(set.dirs,"/Example_splice",i,".rds")
set.dirs
paste0(set.dirs,"/Example_splice",i,".rds")
setwd(set.dirs)
for (i in 1:n_split) {
scPagwas_main(Pagwas =Pagwas,
gwas_data =NULL,
Single_data = paste0(set.dirs,"Example_splice",i,".rds"), #the
output.prefix=i, #the prefix can be the circulation coefficient i.
output.dirs="splice_scPagwas", #the output.dirs shoukd be the same for each circulation
Pathway_list=Genes_by_pathway_kegg,
run_split=TRUE, #This parameter is set to run single result for each split result.
ncores=1,
min_clustercells=1, #the minimum cluster cell number should be 1.
assay="RNA",
block_annotation = block_annotation,
chrom_ld = chrom_ld)
}
##------ Thu Sep 29 13:32:44 2022 ------##
paste0(set.dirs,"Example_splice",i,".rds")
devtools::load_all(".")
for (i in 1:n_split) {
scPagwas_main(Pagwas =Pagwas,
gwas_data =NULL,
Single_data = paste0(set.dirs,"Example_splice",i,".rds"), #the
output.prefix=i, #the prefix can be the circulation coefficient i.
output.dirs="splice_scPagwas", #the output.dirs shoukd be the same for each circulation
Pathway_list=Genes_by_pathway_kegg,
run_split=TRUE, #You must set the key parameter.This parameter is set to run single result for each split result.
ncores=1,
min_clustercells=1, #the minimum cluster cell number should be 1.
assay="RNA",
block_annotation = block_annotation,
chrom_ld = chrom_ld)
}
##------ Thu Sep 29 13:34:54 2022 ------##
##------ Thu Sep 29 13:34:54 2022 ------##
##------ Thu Sep 29 13:35:08 2022 ------##
##------ Thu Sep 29 13:35:08 2022 ------##
##------ Thu Sep 29 13:35:09 2022 ------##
##------ Thu Sep 29 13:35:49 2022 ------##
##------ Thu Sep 29 13:35:50 2022 ------##
##------ Thu Sep 29 13:35:54 2022 ------##
##------ Thu Sep 29 13:35:54 2022 ------##
##------ Thu Sep 29 13:36:06 2022 ------##
##------ Thu Sep 29 13:36:06 2022 ------##
##------ Thu Sep 29 13:36:07 2022 ------##
##------ Thu Sep 29 13:36:45 2022 ------##
##------ Thu Sep 29 13:36:46 2022 ------##
setwd(set.dirs) #you must set the workfiles the same as before
Pagwas_integrate <- merge_pagwas(Single_data = system.file("extdata", "scRNAexample.rds", package = "scPagwas") ,# read the whole single cell data.
output.dirs="splice_scPagwas", #The same with scPagwas_main functionn_topgenes = 1000,
assay='RNA',
random=T,
seed=1234,
random_times=10,
proportion=0.3)
Pagwas_integrate
head(Pagwas_integrate@meta.data)
devtools::document()
usethis::use_version()
library(scPagwas)
usethis::use_vignette("Prune_GwasSummaryFIles_plink")
usethis::use_pkgdown()
pkgdown::build_site()
library(scPagwas)
gwas_data <- bigreadr::fread2(system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"))
knitr::kable(head(gwas_data))
Genes_by_pathway_kegg[1:3]
length(genes.by.reactome.pathway)
length(unlist(genes.by.reactome.pathway))
suppressMessages(library(scPagwas))
knitr::kable(head(block_annotation))
suppressMessages(library(scPagwas))
class(chrom_ld)
knitr::kable(head(chrom_ld[["chr1"]]))
pkgdown::build_site()
BiocManager::install("S4Vectors")
pkgdown::build_site()
renv::init(bioconductor = TRUE)
pkgdown::build_site()
names(Pagwas)
"gwas_data" %in% names(Pagwas)
devtools::load_all(".")
library(scPagwas)
Pagwas<-list()
gwas_data <- bigreadr::fread2(system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"))
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = 0.1
)
Pagwas$snp_gene_df <- Snp2Gene(snp = Pagwas$gwas_data, refGene = block_annotation, marg = 10000)
names(Pagwas)
Pagwas <- Single_data_input(Pagwas=Pagwas,
assay="RNA",
Single_data=Single_data,
Pathway_list=reduce_genes.by.immunologic.pathway)
Pagwas<-list()
gwas_data <- bigreadr::fread2(system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"))
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = 0.1
)
Pagwas$snp_gene_df <- Snp2Gene(snp = Pagwas$gwas_data, refGene = block_annotation, marg = 10000)
names(Pagwas)
scRNAexample <-readRDS(system.file("extdata", "scRNAexample.rds", package = "scPagwas"))
Pagwas <- Single_data_input(Pagwas=Pagwas,
assay="RNA",
Single_data=scRNAexample,
Pathway_list=reduce_genes.by.immunologic.pathway)
Pagwas <- Pathway_pcascore_run(Pagwas=Pagwas,
Pathway_list=reduce_genes.by.immunologic.pathway)
Pagwas<-list()
gwas_data <- bigreadr::fread2(system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"))
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = 0.1
)
Pagwas$snp_gene_df <- Snp2Gene(snp = Pagwas$gwas_data, refGene = block_annotation, marg = 10000)
names(Pagwas)
scRNAexample <-readRDS(system.file("extdata", "scRNAexample.rds", package = "scPagwas"))
Pagwas <- Single_data_input(Pagwas=Pagwas,
assay="RNA",
Single_data=scRNAexample,
Pathway_list=Genes_by_pathway_kegg)
Pagwas <- Pathway_pcascore_run(Pagwas=Pagwas,
Pathway_list=Genes_by_pathway_kegg)
scPagwas_main(Pagwas =Pagwas,
gwas_data =NULL,
#Single_data = paste0(set.dirs,"Example_splice",i,".rds"), #the
output.prefix=i, #the prefix can be the circulation coefficient i.
output.dirs="splice_scPagwas", #the output.dirs shoukd be the same for each circulation
Pathway_list=Genes_by_pathway_kegg,
run_split=TRUE, #You must set the key parameter.This parameter is set to run single result for each split result.
ncores=1,
min_clustercells=1, #the minimum cluster cell number should be 1.
assay="RNA",
block_annotation = block_annotation,
chrom_ld = chrom_ld)
scPagwas_main(Pagwas =Pagwas,
gwas_data =NULL,
#Single_data = paste0(set.dirs,"Example_splice",i,".rds"), #the
output.prefix="", #the prefix can be the circulation coefficient i.
output.dirs="splice_scPagwas", #the output.dirs shoukd be the same for each circulation
Pathway_list=Genes_by_pathway_kegg,
run_split=TRUE, #You must set the key parameter.This parameter is set to run single result for each split result.
ncores=1,
min_clustercells=1, #the minimum cluster cell number should be 1.
assay="RNA",
block_annotation = block_annotation,
chrom_ld = chrom_ld)
##------ Thu Sep 29 17:00:28 2022 ------##
##------ Thu Sep 29 17:00:28 2022 ------##
##------ Thu Sep 29 17:00:28 2022 ------##
##------ Thu Sep 29 17:00:30 2022 ------##
##------ Thu Sep 29 17:01:15 2022 ------##
##------ Thu Sep 29 17:01:17 2022 ------##
devtools::load_all(".")
scPagwas_main(Pagwas =Pagwas,
gwas_data =NULL,
#Single_data = paste0(set.dirs,"Example_splice",i,".rds"), #the
output.prefix="", #the prefix can be the circulation coefficient i.
output.dirs="splice_scPagwas", #the output.dirs shoukd be the same for each circulation
Pathway_list=Genes_by_pathway_kegg,
run_split=TRUE, #You must set the key parameter.This parameter is set to run single result for each split result.
ncores=1,
min_clustercells=1, #the minimum cluster cell number should be 1.
assay="RNA",
block_annotation = block_annotation,
chrom_ld = chrom_ld)
##------ Thu Sep 29 17:15:06 2022 ------##
##------ Thu Sep 29 17:15:06 2022 ------##
##------ Thu Sep 29 17:15:06 2022 ------##
##------ Thu Sep 29 17:15:08 2022 ------##
##------ Thu Sep 29 17:15:54 2022 ------##
##------ Thu Sep 29 17:15:55 2022 ------##
Pagwas<-list()
gwas_data <- bigreadr::fread2(system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"))
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = 0.1
)
Pagwas$snp_gene_df <- Snp2Gene(snp = Pagwas$gwas_data, refGene = block_annotation, marg = 10000)
names(Pagwas)
Pagwas2<-list()
scRNAexample <-readRDS(system.file("extdata", "scRNAexample.rds", package = "scPagwas"))
Pagwas2 <- Single_data_input(Pagwas=Pagwas2,
assay="RNA",
Single_data=scRNAexample,
Pathway_list=Genes_by_pathway_kegg)
Pagwas2 <- Pathway_pcascore_run(Pagwas=Pagwas2,
Pathway_list=Genes_by_pathway_kegg)
c(Pagwas,Pagwas2)
names(Pagwas)
names(Pagwas2)
Pagwas1<-c(Pagwas,Pagwas2)
names(Pagwas1)
library(scPagwas)
devtools::load_all(".")
devtools::document()
library(scPagwas)
