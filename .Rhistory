#'
#' @return
para_names_adjust <- function(Pagwas, lm_results = Pagwas$lm_results) {
pca_cell_df <- Pagwas$pca_cell_df
if (sum(names(lm_results$parameters) %in% colnames(pca_cell_df)) < ncol(pca_cell_df)) {
# message("There is blank or '+' within cell names!")
names(lm_results$parameters) <- stringr::str_replace_all(names(lm_results$parameters), " ", ".")
names(lm_results$parameters) <- stringr::str_replace_all(names(lm_results$parameters), "\\+", ".")
names(lm_results$parameters) <- stringr::str_replace_all(names(lm_results$parameters), "-", ".")
}
if (sum(names(lm_results$parameters) %in% colnames(pca_cell_df)) < ncol(pca_cell_df)) {
stop("unidentified signal within cell names, please remove it!")
}
return(lm_results)
}
#' xy2vector
#' @description Take a list of Pagwas - Pathway_ld_gwas_data and vectorize it.
#' @param Pathway_ld_gwas_data the list of block information from Pagwas object
#'
#' @return
#'
xy2vector <- function(Pathway_ld_gwas_data = Pagwas$Pathway_ld_gwas_data) {
# use only blocks flagged for inference inclusion
Pathway_ld_gwas_data <- Pathway_ld_gwas_data[sapply(Pathway_ld_gwas_data, function(block) {
block$include_in_inference
})]
# unpack Pathway_ld_gwas_data
y <- do.call("c", lapply(Pathway_ld_gwas_data, function(block) {
block$y
}))
x <- do.call("rbind", lapply(Pathway_ld_gwas_data, function(block) {
block$x
}))
rownames(x) <- do.call("c", lapply(Pathway_ld_gwas_data, function(block) {
block$snps$rsid
}))
noise_per_snp <- do.call("c", lapply(Pathway_ld_gwas_data, function(block) {
block$snps$se**2
}))
# exclude na elements
na_elements <- is.na(y) | apply(x, 1, function(x) {
any(is.na(x))
}) | is.na(noise_per_snp)
return(list(
y = y[!na_elements], x = x[!na_elements, ],
noise_per_snp = noise_per_snp[!na_elements]
))
}
#' Get_Pathway_heritability_contributions
#' @description Caclulate predicted block values based on block information and model fit.
#' @param pca_cell_df pca score dataframe
#' @param parameters parameter fit
#'
#' @return
#'
Get_Pathway_heritability_contributions <- function(pca_cell_df, parameters) {
if (any(is.na(parameters))) {
warning("NA pameters found!")
parameters[is.na(parameters)] <- 0
}
# only include parameter for which we have block data
Pathway_block_info <- as.numeric(as.matrix(pca_cell_df) %*% parameters[colnames(pca_cell_df)])
names(Pathway_block_info) <- rownames(pca_cell_df)
return(Pathway_block_info)
}
#' Get_bootresults_df
#' @description Helper function to make a summary table of results from bootstrap data.
#' @param value_collection collection of bootstrapped value estimates
#' @param annotations vector of annotation names
#' @param model_estimates estimates for bias parameter estimates
#'
#' @return
Get_bootresults_df <- function(value_collection, annotations, model_estimates) {
# in the case we're calculating single parameter estimates
if (is.null(dim(value_collection))) {
value_collection <- matrix(value_collection, nrow = 1)
}
parameter_estimates <- data.frame(
annotation = annotations,
bootstrap_estimate = rowMeans(value_collection),
bootstrap_error = apply(value_collection, 1, stats::sd)
) %>%
dplyr::mutate(
bt_value = bootstrap_estimate / bootstrap_error,
bp_value = stats::pnorm(bt_value, lower.tail = F),
bias_corrected_estimate = 2 * model_estimates - bootstrap_estimate
)
parameter_estimates$CI_lo <-
apply(value_collection, 1, function(x) {
stats::quantile(x, 0.025, na.rm = T)
})
parameter_estimates$CI_hi <-
apply(value_collection, 1, function(x) {
stats::quantile(x, 0.975, na.rm = T)
})
return(parameter_estimates)
}
#' Pagwas_perform_regularized_inference
#'
#' @description Run inference with added regularization.
#' If p-values are desired use the other inference function. This for
#' prediction purposes.
#' @param Pagwas Pagwas data
#' @param n_folds folds for regularized inference
#'
#' @return
Pagwas_perform_regularized_regression <- function(Pagwas, n_folds = 10) {
message("performing cross validation")
Pagwas$cv_regularized_lm_results <- cv_regularized_parameter_estimator(
xy2vector(Pagwas$Pathway_ld_gwas_data),
n_folds = n_folds
)
# add on block values
Pagwas$regularized_Pathway_heritability_contributions <- Get_Pathway_heritability_contributions(
Pagwas$pca_cell_df, Pagwas$cv_regularized_lm_results$parameters
)
return(Pagwas)
}
#' cv_regularized_parameter_estimator
#' @description Perform regularization inference.
#' Use CV to find appropriate values of lambda for either feature selection
#' @param vectorized_Pagwas_data Pagwas data used for inference
#' @param n_folds number of folds for cross validation
#' @param ... other arguments to pass to cv.glmnet
#'
#' @return
cv_regularized_parameter_estimator <- function(vectorized_Pagwas_data,
n_folds = 10,
...) {
lm_results <- list()
m <- glmnet::cv.glmnet(
x = vectorized_Pagwas_data$x,
y = vectorized_Pagwas_data$y,
offset = vectorized_Pagwas_data$noise_per_snp,
foldid = cut(seq_len(length(vectorized_Pagwas_data$y)), breaks = n_folds, labels = F),
family = "gaussian", ... = ...
)
# can choose coefficients with either: lambda.min, or lambda.1se
lm_results$parameters <- stats::coef(m, s = "lambda.min") %>% as.numeric()
annotation_names <- c("intercept", colnames(vectorized_Pagwas_data$x))
names(lm_results$parameters) <- annotation_names
lm_results$model <- m
return(lm_results)
}
Pagwas_test <- Pagwas_perform_regression(Pagwas=Pagwas_test, iters = 100)
library("dplyr")
library("data.table")
library("Matrix")
library(stringr)
Pagwas_test <- Pagwas_perform_regression(Pagwas=Pagwas_test, iters = 100)
names(Pagwas_test)
names(Pagwas_test$bootstrap_results)
Pagwas_test$bootstrap_results)
Pagwas_test$bootstrap_results
devtools::document()
library(scPagwas)
usethis::use_version()
library(scPagwas)
library(Seurat)
library(scPagwas)
library("dplyr")
library("data.table")
library("Matrix")
library(stringr)
## basic example code
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#Input GWAS summry data(data.frame).
data(GWAS_summ_example)
#gene annotation files.
data(gtf_df)
#Single cell example data.
data(scRNAexample)
scRNAexample@meta.data$anno[which(scRNAexample@meta.data$anno=="Celltype4")]<-"Effector CD8+T cell"
Idents(scRNAexample)<-scRNAexample@meta.data$anno
#LD data
data(chrom_ld)
Pagwas<-Pagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",# only snps within TSS windows
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld)
##------ Mon Mar 14 20:11:10 2022 ------##
##------ Mon Mar 14 20:11:10 2022 ------##
##------ Mon Mar 14 20:11:14 2022 ------##
##------ Mon Mar 14 20:11:21 2022 ------##
##------ Mon Mar 14 20:11:21 2022 ------##
##------ Mon Mar 14 20:11:22 2022 ------##
##------ Mon Mar 14 20:11:41 2022 ------##
##------ Mon Mar 14 20:11:43 2022 ------##
if (is.null(Pagwas$Pathway_ld_gwas_data)) {
warning("data has not been precomputed, returning without results")
return(Pagwas)
}
message("** Start inference")
# fit model
vectorized_Pagwas_data <- xy2vector(Pagwas$Pathway_ld_gwas_data)
Pagwas$lm_results <- Parameter_regression(vectorized_Pagwas_data)
devtools::load_all(".")
if (is.null(Pagwas$Pathway_ld_gwas_data)) {
warning("data has not been precomputed, returning without results")
return(Pagwas)
}
message("** Start inference")
# fit model
vectorized_Pagwas_data <- xy2vector(Pagwas$Pathway_ld_gwas_data)
Pagwas$lm_results <- Parameter_regression(vectorized_Pagwas_data)
Pagwas$lm_results
Pagwas$lm_results$parameters
Pagwas$Pathway_block_heritability <-
Get_Pathway_heritability_contributions(
Pagwas$pca_cell_df,
Pagwas$lm_results$parameters
)
Pagwas$Pathway_block_heritability
Pagwas$pca_cell_df
dim(Pagwas$pca_cell_df)
Pagwas$lm_results$parameters
colnames(Pagwas$pca_cell_df)
Get_Pathway_heritability_contributions(
Pagwas$pca_cell_df,
Pagwas$lm_results$parameters
)
Pagwas_test <- GWAS_summary_input(Pagwas=NULL,
gwas_data=GWAS_summ_example)
Pagwas_test <- Single_data_input(Pagwas=Pagwas_test,
Single_data=scRNAexample)
Pagwas_test <- Pathway_pcascore_run(Pagwas=Pagwas_test,
Pathway_list=Genes_by_pathway_kegg
)
Pagwas_test$block_annotation<-gtf_df
snp_gene_df<-Snp2Gene(snp=as.data.frame(Pagwas_test$gwas_data),refGene=gtf_df)
snp_gene_df$slope <- rep(1,nrow(snp_gene_df))
Pagwas_test$snp_gene_df <- snp_gene_df[snp_gene_df$Disstance=="0",]
Pagwas_test <- Pathway_annotation_input(Pagwas=Pagwas_test)
Pagwas_test <- Link_pathway_blocks_gwas(Pagwas=Pagwas_test,
chrom_ld=ld)
Pagwas_test <- Link_pathway_blocks_gwas(Pagwas=Pagwas_test,
chrom_ld=chrom_ld)
Pagwas_test <- link_pwpca_block(Pagwas=Pagwas_test)
if (is.null(Pagwas$Pathway_ld_gwas_data)) {
warning("data has not been precomputed, returning without results")
return(Pagwas)
}
message("** Start inference")
# fit model
vectorized_Pagwas_data <- xy2vector(Pagwas$Pathway_ld_gwas_data)
Pagwas$lm_results <- Parameter_regression(vectorized_Pagwas_data)
Pagwas$lm_results
Get_Pathway_heritability_contributions(
Pagwas$pca_cell_df,
Pagwas$lm_results$parameters
)
dim(Pagwas$pca_cell_df)
Pagwas$lm_results$parameters
length(Pagwas$lm_results$parameters)
parameters[colnames(pca_cell_df)]
colnames(pca_cell_df)
Pagwas$lm_results
Pagwas$lm_results$parameters
colnames(Pagwas$pca_cell_df)
Pagwas <- GWAS_summary_input(Pagwas=NULL,
gwas_data=GWAS_summ_example)
Pagwas <- Single_data_input(Pagwas=Pagwas,
Single_data=scRNAexample)
Pagwas <- Pathway_pcascore_run(Pagwas=Pagwas,
Pathway_list=Genes_by_pathway_kegg
)
Pagwas$block_annotation<-gtf_df
snp_gene_df<-Snp2Gene(snp=as.data.frame(Pagwas$gwas_data),refGene=gtf_df)
snp_gene_df$slope <- rep(1,nrow(snp_gene_df))
Pagwas$snp_gene_df <- snp_gene_df[snp_gene_df$Disstance=="0",]
Pagwas <- Pathway_annotation_input(Pagwas=Pagwas)
Pagwas <- Link_pathway_blocks_gwas(Pagwas=Pagwas,
chrom_ld=chrom_ld)
Pagwas <- link_pwpca_block(Pagwas=Pagwas)
vectorized_Pagwas_data <- xy2vector(Pagwas$Pathway_ld_gwas_data)
Pagwas$lm_results <- Parameter_regression(vectorized_Pagwas_data)
Pagwas$lm_results
Pagwas$Pathway_block_heritability <-
Get_Pathway_heritability_contributions(
Pagwas$pca_cell_df,
Pagwas$lm_results$parameters
)
Pagwas$Pathway_block_heritability
Boot_evaluate(Pagwas, bootstrap_iters = iters, n.cores = n.cores, part = part)
Boot_evaluate(Pagwas, bootstrap_iters = iters)
Boot_evaluate(Pagwas)
Pagwas<- Boot_evaluate(Pagwas)
names(Pagwas)
Pagwas$bootstrap_results
devtools::document()
library(Seurat)
library(scPagwas)
library("dplyr")
library("data.table")
library("Matrix")
library(stringr)
## basic example code
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#Input GWAS summry data(data.frame).
data(GWAS_summ_example)
#gene annotation files.
data(gtf_df)
#Single cell example data.
data(scRNAexample)
scRNAexample@meta.data$anno[which(scRNAexample@meta.data$anno=="Celltype4")]<-"Effector CD8+T cell"
Idents(scRNAexample)<-scRNAexample@meta.data$anno
data(chrom_ld)
#Pagwas_main is a function wrapper other process codes
Pagwas<-Pagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",# only snps within TSS windows
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld)
##------ Mon Mar 14 20:25:58 2022 ------##
##------ Mon Mar 14 20:25:58 2022 ------##
##------ Mon Mar 14 20:26:01 2022 ------##
##------ Mon Mar 14 20:26:07 2022 ------##
##------ Mon Mar 14 20:26:08 2022 ------##
##------ Mon Mar 14 20:26:09 2022 ------##
##------ Mon Mar 14 20:26:29 2022 ------##
##------ Mon Mar 14 20:26:31 2022 ------##
Bootstrap_P_Barplot(Pagwas=Pagwas,title = "Test scPagwas")
Bootstrap_estimate_Plot(Pagwas=Pagwas,figurenames = NULL)
scPagwas<- scPagwas_main(Pagwas = Pagwas,
#gwas_data = GWAS_summ_example,
#add_eqtls="OnlyTSS",
#block_annotation = gtf_df,
#Single_data = scRNAexample,
#Pathway_list=Genes_by_pathway_kegg,
#chrom_ld = chrom_ld,
simp_results=TRUE)
##------ Mon Mar 14 20:26:44 2022 ------##
##------ Mon Mar 14 20:26:44 2022 ------##
##------ Mon Mar 14 20:26:44 2022 ------##
##------ Mon Mar 14 20:26:44 2022 ------##
##------ Mon Mar 14 20:26:44 2022 ------##
##------ Mon Mar 14 20:26:44 2022 ------##
##------ Mon Mar 14 20:26:44 2022 ------##
##------ Mon Mar 14 20:26:57 2022 ------##
scPagwas_Visualization(scPagwas_score = scPagwas$scPagwas_score,
Single_data = scRNAexample,
Reduction = TRUE,
assay = "SCT",
cellpercent = 0.1,
filename = "scPagwas_testFigure",
FigureType = "tsne",
width = 7,
height = 7,
lowColor = "#FFBC80", highColor = "#FC4F4F",
size = 1,
title = "scPagwas_score")
devtools::document()
library(scPagwas)
Pagwas<-Pagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",# only snps within TSS windows
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=FALSE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld)
##------ Mon Mar 14 20:47:54 2022 ------##
##------ Mon Mar 14 20:47:54 2022 ------##
##------ Mon Mar 14 20:47:59 2022 ------##
##------ Mon Mar 14 20:48:05 2022 ------##
##------ Mon Mar 14 20:48:05 2022 ------##
##------ Mon Mar 14 20:48:06 2022 ------##
data(scRNAexample)
scRNAexample@meta.data$anno[which(scRNAexample@meta.data$anno=="Celltype4")]<-"Effector CD8+T cell"
Idents(scRNAexample)<-scRNAexample@meta.data$anno
#LD data
data(chrom_ld)
Pagwas<-Pagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",# only snps within TSS windows
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=FALSE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld)
##------ Mon Mar 14 20:48:34 2022 ------##
##------ Mon Mar 14 20:48:34 2022 ------##
##------ Mon Mar 14 20:48:40 2022 ------##
##------ Mon Mar 14 20:48:48 2022 ------##
##------ Mon Mar 14 20:48:49 2022 ------##
##------ Mon Mar 14 20:48:50 2022 ------##
##------ Mon Mar 14 20:49:04 2022 ------##
##------ Mon Mar 14 20:49:06 2022 ------##
Bootstrap_P_Barplot(Pagwas=Pagwas,title = "Test scPagwas")
Pagwas<-Pagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",# only snps within TSS windows
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld)
##------ Mon Mar 14 20:49:40 2022 ------##
##------ Mon Mar 14 20:49:40 2022 ------##
##------ Mon Mar 14 20:49:45 2022 ------##
##------ Mon Mar 14 20:49:53 2022 ------##
##------ Mon Mar 14 20:49:54 2022 ------##
##------ Mon Mar 14 20:49:55 2022 ------##
##------ Mon Mar 14 20:50:01 2022 ------##
##------ Mon Mar 14 20:50:03 2022 ------##
Bootstrap_P_Barplot(Pagwas=Pagwas,title = "Test scPagwas")
devtools::document()
library(Seurat)
library(scPagwas)
library("dplyr")
library("data.table")
library("Matrix")
library(stringr)
## basic example code
#Input pathway gene list, you can construct with youself.
data(Genes_by_pathway_kegg)
#Input GWAS summry data(data.frame).
data(GWAS_summ_example)
#gene annotation files.
data(gtf_df)
#Single cell example data.
data(scRNAexample)
scRNAexample@meta.data$anno[which(scRNAexample@meta.data$anno=="Celltype4")]<-"Effector CD8+T cell"
Idents(scRNAexample)<-scRNAexample@meta.data$anno
#LD data
data(chrom_ld)
Pagwas<-Pagwas_main(Pagwas = NULL,
gwas_data = GWAS_summ_example,
add_eqtls="OnlyTSS",# only snps within TSS windows
block_annotation = gtf_df,
Single_data = scRNAexample,
FilterSingleCell=TRUE,
Pathway_list=Genes_by_pathway_kegg,
chrom_ld = chrom_ld)
##------ Mon Mar 14 20:53:14 2022 ------##
##------ Mon Mar 14 20:53:14 2022 ------##
##------ Mon Mar 14 20:53:18 2022 ------##
##------ Mon Mar 14 20:53:25 2022 ------##
##------ Mon Mar 14 20:53:25 2022 ------##
##------ Mon Mar 14 20:53:26 2022 ------##
##------ Mon Mar 14 20:53:43 2022 ------##
##------ Mon Mar 14 20:53:46 2022 ------##
Bootstrap_P_Barplot(Pagwas=Pagwas,title = "Test scPagwas")
Bootstrap_estimate_Plot(Pagwas=Pagwas,figurenames = NULL)
time.
scPagwas<- scPagwas_main(Pagwas = Pagwas,
#gwas_data = GWAS_summ_example,
#add_eqtls="OnlyTSS",
#block_annotation = gtf_df,
#Single_data = scRNAexample,
#Pathway_list=Genes_by_pathway_kegg,
#chrom_ld = chrom_ld,
simp_results=TRUE)
##------ Mon Mar 14 20:54:05 2022 ------##
##------ Mon Mar 14 20:54:05 2022 ------##
##------ Mon Mar 14 20:54:05 2022 ------##
##------ Mon Mar 14 20:54:05 2022 ------##
##------ Mon Mar 14 20:54:05 2022 ------##
##------ Mon Mar 14 20:54:05 2022 ------##
##------ Mon Mar 14 20:54:05 2022 ------##
##------ Mon Mar 14 20:54:20 2022 ------##
scPagwas_Visualization(scPagwas_score = scPagwas$scPagwas_score,
Single_data = scRNAexample,
Reduction = TRUE,
assay = "SCT",
cellpercent = 0.1,
filename = "scPagwas_testFigure",
FigureType = "tsne",
width = 7,
height = 7,
lowColor = "#FFBC80", highColor = "#FC4F4F",
size = 1,
title = "scPagwas_score")
Bootstrap_P_Barplot(Pagwas=Pagwas,title = "Test scPagwas")
Pagwas$bootstrap_results
devtools::document()
devtools::load_all(".")
library
library(SOAR)
library(Seurat)
library(scPagwas)
library("dplyr")
library("data.table")
library("Matrix")
library(stringr)
data(Genes_by_pathway_kegg)
#Input GWAS summry data(data.frame).
data(GWAS_summ_example)
#gene annotation files.
data(gtf_df)
#Single cell example data.
data(scRNAexample)
Idents(scRNAexample)<-scRNAexample@meta.data$anno
#LD data
data(chrom_ld)
library(lineprof)
Pagwas <- lineprof(GWAS_summary_input(Pagwas=NULL,
gwas_data=GWAS_summ_example))
shine(Pagwas)
source("E:/RPakage/scPagwas/R/GWAS_summary_input.R")
Pagwas <- lineprof(GWAS_summary_input(Pagwas=NULL,
gwas_data=GWAS_summ_example))
shine(Pagwas)
