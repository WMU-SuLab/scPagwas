devtools::document()
library(devtools)
renv::status()
?renv::status()
usethis::use_version()
install.packages("usethis")
usethis::use_version()
lintr::lint_package()
install.packages("lintr")
usethis::use_version()
scPagwas2.0 is update!
library(scPagwas)
install.packages("devtools")
devtools::document()
install.packages("devtools")
devtools::document()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
devtools::document()
BiocManager::install("GenomicRanges")
BiocManager::install("GenomicRanges")
BiocManager::install("GenomicRanges")
devtools::document()
library(scPagwas)
devtools::document()
devtools::document()
BiocManager::install("GenomicRanges")
install.packages("~/Downloads/GenomicRanges_1.58.0.tar.gz", repos = NULL, type = "source")
BiocManager::install("GenomicRanges")
BiocManager::install("GenomicRanges",force = TRUE)
BiocManager::install("GenomeInfoDbData",force = TRUE)
install.packages("~/Downloads/GenomeInfoDbData_1.2.11.tar.gz", repos = NULL, type = "source")
BiocManager::install("GenomicRanges",force = TRUE)
install.packages("~/Downloads/GenomicRanges_1.54.1.tgz", repos = NULL, type = .Platform$pkgType)
BiocManager::install("GenomicRanges",force = TRUE)
devtools::document()
BiocManager::install("GenomeInfoDb",force = TRUE)
options(repos = c(CRAN = "https://cran.rstudio.com"))
BiocManager::install("GenomeInfoDb")
BiocManager::install(version = "3.18")
options(repos = c(CRAN = "https://cran.rstudio.com"))
BiocManager::install("GenomeInfoDb")
library(scPagwas)
library(scPagwas)
BiocManager::install("GenomicRanges")
BiocManager::install("GenomicRanges",force = TRUE)
library(BiocManager)
devtools::document()
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("Seurat")
install.packages("ggpubr")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges")
devtools::document()
install.packages("bigmemory")
install.packages("bigreadr")
install.packages("RMTstat")
install.packages("reshape")
install.packages("ggtext")
install.packages("bigstatsr")
install.packages("ggthemes")
install.packages("SOAR")
install.packages("glmnet")
devtools::document()
install.packages("biganalytics")
devtools::document()
library(scPagwas)
library(scPagwas)
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main2(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation_hg37,# gene position in chromosome is provided by package. default is hg38, block_annotation_hg37 is hg37.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
iters_singlecell = 10,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Wed Nov 27 10:18:42 2024 ------##
##------ Wed Nov 27 10:18:45 2024 ------##
##------ Wed Nov 27 10:18:53 2024 ------##
##------ Wed Nov 27 10:18:53 2024 ------##
##------ Wed Nov 27 10:18:53 2024 ------##
##------ Wed Nov 27 10:18:53 2024 ------##
##------ Wed Nov 27 10:19:06 2024 ------##
##------ Wed Nov 27 10:19:08 2024 ------##
devtools::document()
library(scPagwas)
library(scPagwas)
library(scPagwas)
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main2(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation_hg37,# gene position in chromosome is provided by package. default is hg38, block_annotation_hg37 is hg37.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
iters_singlecell = 10,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Wed Nov 27 10:27:34 2024 ------##
##------ Wed Nov 27 10:27:37 2024 ------##
##------ Wed Nov 27 10:27:44 2024 ------##
##------ Wed Nov 27 10:27:44 2024 ------##
##------ Wed Nov 27 10:27:44 2024 ------##
##------ Wed Nov 27 10:27:44 2024 ------##
##------ Wed Nov 27 10:27:58 2024 ------##
##------ Wed Nov 27 10:27:59 2024 ------##
library(scPagwas)
library(scPagwas)
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main2(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation_hg37,# gene position in chromosome is provided by package. default is hg38, block_annotation_hg37 is hg37.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
iters_singlecell = 10,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Wed Nov 27 10:30:57 2024 ------##
##------ Wed Nov 27 10:31:00 2024 ------##
##------ Wed Nov 27 10:31:06 2024 ------##
##------ Wed Nov 27 10:31:06 2024 ------##
##------ Wed Nov 27 10:31:07 2024 ------##
##------ Wed Nov 27 10:31:07 2024 ------##
##------ Wed Nov 27 10:31:19 2024 ------##
##------ Wed Nov 27 10:31:20 2024 ------##
Pagwas =NULL
gwas_data = system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas")
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas")
output.prefix=""
output.dirs="test"
load("D:/OneDrive/GWAS_Multiomics/Manuscripts/Revise_comments/pathway_add/reduce_genes.by.gobp.pathway.RData")
Pagwas =NULL
gwas_data = system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas")
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas")
output.prefix=""
output.dirs="test"
Pathway_list=Genes_by_pathway_kegg
assay="RNA"
singlecell=T
celltype=F
block_annotation = block_annotation
chrom_ld = chrom_ld
assay = "RNA"
run_split=FALSE
n.cores=1
marg = 10000
maf_filter = 0.01
min_clustercells = 10
min.pathway.size = 5
max.pathway.size = 300
iters_singlecell = 100
iters_celltype = 200
n_topgenes = 1000
seurat_return = TRUE
remove_outlier = TRUE
if (!dir.exists(output.dirs)) {
dir.create(output.dirs)
}
if (dir.exists(paste0("./", output.dirs, "/temp"))) {
temp_folder_path <- paste0("./", output.dirs, "/temp")
files_to_remove <- list.files(temp_folder_path)
invisible(file.remove(file.path(temp_folder_path, files_to_remove)))
cat("bk files has been deleted")
}
## miximal file path lenght;
## Windows OS support max. 259 characters
Sys.setenv(R_LOCAL_CACHE = paste0("./", output.dirs, "/scPagwas_cache"))
tt <- Sys.time()
if (is.null(Pagwas)) {
Pagwas <- list()
} else if (class(Pagwas) == "Seurat" & is.null(Single_data)) {
Single_data <- Pagwas
Pagwas <- list()
Pagwas <- Single_data@misc
if ("scPagwasPaPca" %in% Seurat::Assays(Single_data)) {
Pagwas$pca_scCell_mat <- GetAssayData(Single_data,
assay = "scPagwasPaPca"
)
}
if (assay %in% Seurat::Assays(Single_data)) {
Pagwas$data_mat <- Seurat::GetAssayData(Single_data, assay = assay)
} else {
stop("Error:assay is not in Pagwas!")
}
if (is.null(Pathway_list)) {
stop("Error:Pathway_list should be input!")
}
SOAR::Store(Single_data)
Pagwas$rawPathway_list <- Pathway_list
} else if (class(Pagwas) == "Seurat" & !is.null(Single_data)) {
message("Warning:Single_data and Pagwas seurat class are redundant!
we will keep the new Single_data and rerun the
Single_data_input and Pathway_pcascore_run function")
Pagwas <- list()
} else if (class(Pagwas) == "list" & is.null(Single_data) & singlecell) {
if("data_mat" %in% names(Pagwas) & run_split){
message("The single cell data are in the preprocessed pagwas list!")
}else{
stop("Error:Single_data should be input!")
}
} else if (class(Pagwas) == "list" & !is.null(Single_data)) {
Pagwas$rawPathway_list <- Pathway_list
} else if (class(Pagwas) != "list") {
stop("Error:The class for Pagwas is wrong! Should be NULL,
list or Seurat class.")
}
message(paste(utils::timestamp(quiet = T),
" ******* 1st: Single_data_input function start! ********",
sep = ""
))
##------ Wed Nov 27 10:36:14 2024 ------##
tt <- Sys.time()
if (class(Single_data) == "character") {
if (grepl(".rds", Single_data)) {
message("** Start to read the single cell data!")
Single_data <- readRDS(Single_data)
} else {
stop("Error:There is need a data in `.rds` format ")
}
if (!assay %in% Seurat::Assays(Single_data)) {
stop("Error:There is no need assays in your Single_data")
}
} else if (class(Single_data) != "Seurat") {
if(run_split){
message("run_split is TRUE!")
}else if(singlecell){
stop("Error:When the run_split is FALSE! There is need a Seurat class for Single_data")
}
}
if (is.null(Pathway_list)) {
stop("Error:Pathway_list should be input!")
}
if(!("data_mat" %in% names(Pagwas))){
message("** Start to filter single cell data!")
Pagwas <- Single_data_input(
Pagwas = Pagwas,
assay = assay,
# nfeatures =nfeatures,
Single_data = Single_data,
Pathway_list = Pathway_list,
min_clustercells = min_clustercells
)
}
if(!run_split){
Single_data <- Single_data[, colnames(Pagwas$data_mat)]
SOAR::Store(Single_data)
}else{
if(!is.null(Single_data)){
#Single_data <- Single_data[, colnames(Pagwas$data_mat)]
rm(Single_data)
}
r_n <- colnames(Pagwas$data_mat)
}
message("done!")
#############################
## 2.Pathway_pcascore_run
#############################
if (!("pca_cell_df" %in% names(Pagwas))) {
message(paste(utils::timestamp(quiet = T),
" ******* 2nd: Pathway_pcascore_run function start!! ********",
sep = ""
))
tt <- Sys.time()
Pagwas <- Pathway_pcascore_run(
Pagwas = Pagwas,
Pathway_list = Pathway_list,
min.pathway.size = min.pathway.size,
max.pathway.size = max.pathway.size
)
message("done!")
}
##------ Wed Nov 27 10:36:25 2024 ------##
message(paste(utils::timestamp(quiet = T),
" ******* 3rd: GWAS_summary_input function start! ********",
sep = ""
))
##------ Wed Nov 27 10:36:43 2024 ------##
if (!is.null(gwas_data)) {
if (class(gwas_data) == "character") {
message("** Start to read the gwas_data!")
suppressMessages(gwas_data <- bigreadr::fread2(gwas_data))
} else if(class(gwas_data) == "data.frame"){
gwas_data$se<-as.numeric(gwas_data$se)
gwas_data$beta<-as.numeric(gwas_data$beta)
}else{
stop("Error:There is need a filename and address for gwas_data")
}
if (maf_filter >= 1 & maf_filter < 0) {
stop("Error:maf_filter should between 0 and 1")
}
tt <- Sys.time()
Pagwas <- GWAS_summary_input(
Pagwas = Pagwas,
gwas_data = gwas_data,
maf_filter = maf_filter
)
rm(gwas_data)
message("done!")
#############################
## 4.SnpToGene
#############################
message(paste(utils::timestamp(quiet = T),
" ******* 4th: SnpToGene start!! ********",
sep = ""
))
tt <- Sys.time()
if (!is.null(block_annotation)) {
Pagwas$snp_gene_df <- SnpToGene(
gwas_data = Pagwas$gwas_data,
block_annotation = block_annotation,
marg = marg
)
} else if (!("snp_gene_df" %in% names(Pagwas))) {
stop("Error: block_annotation should input!")
}
} else if (!("gwas_data" %in% names(Pagwas)) | !("snp_gene_df" %in%
names(Pagwas))) {
stop("Error: gwas_data should be input!")
}
##------ Wed Nov 27 10:36:43 2024 ------##
#############################
message(paste(utils::timestamp(quiet = T),
" ******* 5th: Pathway_annotation_input function
start! ********",
sep = ""
))
##------ Wed Nov 27 10:36:55 2024 ------##
tt <- Sys.time()
if (!is.null(block_annotation)) {
Pagwas <- Pathway_annotation_input(
Pagwas = Pagwas,
block_annotation = block_annotation
)
} else if (!("snp_gene_df" %in% names(Pagwas))) {
stop("Error: block_annotation should input!")
}
message("done!")
#############################
## 6.Link_pathway_blocks_gwas
#############################
message(paste(utils::timestamp(quiet = T),
" ******* 6th: Link_pathway_blocks_gwas
function start! ********",
sep = ""
))
##------ Wed Nov 27 10:36:55 2024 ------##
tt <- Sys.time()
if (!is.null(chrom_ld)) {
Pagwas <- Link_pathway_blocks_gwas(
Pagwas = Pagwas,
chrom_ld = chrom_ld,
singlecell = singlecell,
celltype = celltype,
backingpath=paste0("./", output.dirs, "/temp"),
n.cores=n.cores
)
message("done!")
if (file.exists(paste0("./", output.dirs, "/temp"))) {
unlink(paste0("./", output.dirs, "/temp"),recursive = TRUE)
cat("bk files has been deleted")
}
} else if (!("Pathway_sclm_results" %in% names(Pagwas))) {
stop("Error: chrom_ld should input!")
}
message(paste(utils::timestamp(quiet = T),
" ******* 8th: scPagwas_perform_score function start! ********",
sep = ""
))
##------ Wed Nov 27 10:37:07 2024 ------##
Pagwas$Pathway_ld_gwas_data <- NULL
Pagwas <- scPagwas_perform_score(
Pagwas = Pagwas,
remove_outlier = TRUE
)
message("done!")
#############################
## 9.scGet_PCC
#############################
if(!run_split){
message(paste(utils::timestamp(quiet = T),
" ******* 9th: scGet_PCC function start! ********",
sep = ""
))
」
Pagwas <- scPagwas_perform_score(
Pagwas = Pagwas,
remove_outlier = TRUE
)
Pagwas <- scGet_PCC2(Pagwas=Pagwas)
utils::write.csv(Pagwas$PCC,
file = paste0(
"./", output.dirs, "/",
output.prefix,
"_gene_PCC.csv"
),
quote = F
)
scPagwas_topgenes <- rownames(Pagwas$PCC)[order(Pagwas$PCC, decreasing = T)[1:n_topgenes]]
Pagwas$PCC
head(Pagwas$PCC)
scPagwas_topgenes <- rownames(Pagwas$PCC)[order(Pagwas$PCC$weight_pcc, decreasing = T)[1:n_topgenes]]
scPagwas_topgenes
library(scPagwas)
library(scPagwas)
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main2(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation_hg37,# gene position in chromosome is provided by package. default is hg38, block_annotation_hg37 is hg37.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
iters_singlecell = 10,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Wed Nov 27 12:48:58 2024 ------##
##------ Wed Nov 27 12:49:02 2024 ------##
##------ Wed Nov 27 12:49:12 2024 ------##
##------ Wed Nov 27 12:49:12 2024 ------##
##------ Wed Nov 27 12:49:12 2024 ------##
##------ Wed Nov 27 12:49:12 2024 ------##
##------ Wed Nov 27 12:49:15 2024 ------##
##------ Wed Nov 27 12:49:16 2024 ------##
Single_data <- Seurat::AddModuleScore(Single_data, assay = assay, scPagwas_topgenes, name ="scPagwas.TRS.Score")
correct_pdf<-Get_CorrectBg_p(Single_data=Single_data,
scPagwas.TRS.Score=Single_data$scPagwas.TRS.Score1,
iters_singlecell=iters_singlecell,
n_topgenes=n_topgenes,
scPagwas_topgenes=scPagwas_topgenes,
assay=assay
)
Pagwas$Random_Correct_BG_pdf <- correct_pdf
message("* Get Merged pvalue for each celltype!")
Pagwas$Merged_celltype_pvalue<-Merge_celltype_p(single_p=correct_pdf$pooled_p,celltype=Pagwas$Celltype_anno$annotation)
Pagwas$scPagwas.TRS.Score <- Single_data$scPagwas.TRS.Score1
a <- data.frame(
scPagwas.TRS.Score = Pagwas$scPagwas.TRS.Score,
scPagwas.gPAS.score = Pagwas$scPagwas.gPAS.score,
Random_Correct_BG_p = correct_pdf$pooled_p,
Random_Correct_BG_adjp = correct_pdf$adj_p,
Random_Correct_BG_z = correct_pdf$pooled_z)
library(scPagwas)
library(scPagwas)
system.time(
#1.start to run the wrapper functions for example.
Pagwas_data<-scPagwas_main2(Pagwas = NULL,
gwas_data =system.file("extdata", "GWAS_summ_example.txt", package = "scPagwas"), # The GWAS Summary statistics files
Single_data =system.file("extdata", "scRNAexample.rds", package = "scPagwas"),# scRNA-seq data in seruat format with "RNA" assays and normalized.
output.prefix="test", # the prefix name for output files
output.dirs="scPagwastest_output",# the directory file's name for output
block_annotation = block_annotation_hg37,# gene position in chromosome is provided by package. default is hg38, block_annotation_hg37 is hg37.
assay="RNA", # the assays for scRNA-seq data to use.
Pathway_list=Genes_by_pathway_kegg,# pathway list is provided by package, including gene symbols.
n.cores=1,
iters_singlecell = 10,
chrom_ld = chrom_ld,# The LD data is provided by package.
singlecell=T, # Whether to run the singlecell process.
celltype=T# Whether to run the celltype process.
)
)
##------ Wed Nov 27 12:56:26 2024 ------##
##------ Wed Nov 27 12:56:29 2024 ------##
##------ Wed Nov 27 12:56:38 2024 ------##
##------ Wed Nov 27 12:56:38 2024 ------##
##------ Wed Nov 27 12:56:38 2024 ------##
##------ Wed Nov 27 12:56:38 2024 ------##
##------ Wed Nov 27 12:56:40 2024 ------##
##------ Wed Nov 27 12:56:42 2024 ------##
library(scPagwas)
library(scPagwas)
library(scPagwas)
library(scPagwas)
library(scPagwas)
library(scPagwas)
library(scPagwas)
install.packages("ggplot2")
library(scPagwas)
devtools::document()
